{"version":3,"sources":["../../src/utils/Helpers.js"],"names":["_","require","ApplicationError","InvalidConfiguration","path","spawn","exports","withProps","Base","Props","constructor","args","Object","assign","dependsOn","features","app","fromFeature","hasNotEnabled","find","castArray","feature","enabled","Error","restart","envVariables","processOptions","env","process","detached","stdio","cp","argv","slice","unref","exit","requireConfig","config","keys","prefix","forEach","key","value","get","isNil","ensureFeatureName","name","scriptBaseName","fileName","basename"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAQC,OAAO,CAAC,YAAD,CAArB;;AACA,MAAM;AAAEC,EAAAA,gBAAF;AAAoBC,EAAAA;AAApB,IAA6CF,OAAO,CAAC,aAAD,CAA1D;;AACA,MAAMG,IAAI,GAAGH,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMI,KAAK,GAAGJ,OAAO,CAAC,eAAD,CAAP,CAAyBI,KAAvC;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACAC,OAAO,CAACC,SAAR,GAAoB,CAACC,IAAD,EAAOC,KAAP,KAAiB,cAAcD,IAAd,CAAmB;AACpDE,EAAAA,WAAW,CAAC,GAAGC,IAAJ,EAAU;AACjB,UAAM,GAAGA,IAAT;AAEAC,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBJ,KAApB;AACH;;AALmD,CAAxD;AAQC;AACD;AACA;AACA;AACA;;;AACAH,OAAO,CAACQ,SAAR,GAAoB,UAAUC,QAAV,EAAoBC,GAApB,EAAyBC,WAAzB,EAAsC;AACtD,MAAIC,aAAa,GAAGlB,CAAC,CAACmB,IAAF,CAAOnB,CAAC,CAACoB,SAAF,CAAYL,QAAZ,CAAP,EAA8BM,OAAO,IAAI,CAACL,GAAG,CAACM,OAAJ,CAAYD,OAAZ,CAA1C,CAApB;;AAEA,MAAIH,aAAJ,EAAmB;AACf,UAAM,IAAIK,KAAJ,CAAW,IAAGN,WAAY,uBAAsBC,aAAc,0BAA9D,CAAN;AACH;AACJ,CAND;AAQA;AACA;AACA;AACA;;;AACAZ,OAAO,CAACkB,OAAR,GAAkB,UAAUC,YAAV,EAAwB;AACtC,MAAIC,cAAc,GAAG;AACjBC,IAAAA,GAAG,EAAE,EAAE,GAAGC,OAAO,CAACD,GAAb;AAAkB,SAAGF;AAArB,KADY;AAEjBI,IAAAA,QAAQ,EAAE,IAFO;AAGjBC,IAAAA,KAAK,EAAE;AAHU,GAArB;AAMA,MAAIC,EAAE,GAAG1B,KAAK,CAACuB,OAAO,CAACI,IAAR,CAAa,CAAb,CAAD,EAAkBJ,OAAO,CAACI,IAAR,CAAaC,KAAb,CAAmB,CAAnB,CAAlB,EAAyCP,cAAzC,CAAd;AACAK,EAAAA,EAAE,CAACG,KAAH;AACAN,EAAAA,OAAO,CAACO,IAAR,CAAa,CAAb;AACH,CAVD;;AAYA7B,OAAO,CAAC8B,aAAR,GAAwB,UAAUpB,GAAV,EAAeqB,MAAf,EAAuBC,IAAvB,EAA6BC,MAA7B,EAAqC;AACzDD,EAAAA,IAAI,CAACE,OAAL,CAAaC,GAAG,IAAI;AAChB,QAAIC,KAAK,GAAG1C,CAAC,CAAC2C,GAAF,CAAMN,MAAN,EAAcI,GAAd,CAAZ;;AACA,QAAIzC,CAAC,CAAC4C,KAAF,CAAQF,KAAR,CAAJ,EAAoB;AAChB,YAAM,IAAIvC,oBAAJ,CAA0B,iCAAgCsC,GAAI,IAA9D,EAAmEzB,GAAnE,EAAyE,GAAEuB,MAAO,IAAGE,GAAI,EAAzF,CAAN;AACH;AACJ,GALD;AAMH,CAPD;;AASAnC,OAAO,CAACuC,iBAAR,GAA4BC,IAAI,IAAI;AAChC,MAAI,CAACA,IAAL,EAAW,MAAM,IAAI5C,gBAAJ,CAAqB,gDAArB,CAAN;AACd,CAFD;;AAIAI,OAAO,CAACyC,cAAR,GAA0BC,QAAD,IAAc5C,IAAI,CAAC6C,QAAL,CAAcD,QAAd,EAAwB,KAAxB,CAAvC","sourcesContent":["/**\n * Common helpers for service container.\n * @module Helpers\n */ \n\nconst { _ } = require('@genx/july');\nconst { ApplicationError, InvalidConfiguration } = require('@genx/error');\nconst path = require('path');\nconst spawn = require('child_process').spawn;\n\n/**\n * Returns a new class mixing with given properties and initial values.\n * @mixin\n * @param {*} Base \n * @param {object} Props \n */\nexports.withProps = (Base, Props) => class extends Base {\n    constructor(...args) {\n        super(...args);\n\n        Object.assign(this, Props);\n    }\n};\n\n /**\n  * @param {string|array.<string>} features - Dependencies of other features.\n  * @param {ServiceContainer} app - Origin service container app.\n  * @param {string} fromFeature - Dependent feature.\n  */\nexports.dependsOn = function (features, app, fromFeature) {\n    let hasNotEnabled = _.find(_.castArray(features), feature => !app.enabled(feature));\n\n    if (hasNotEnabled) {\n        throw new Error(`\"${fromFeature}\" feature requires \"${hasNotEnabled}\" feature to be enabled.`);\n    }\n};\n\n/**\n * Restart the current process.\n * @param {object} envVariables - Environment variables\n */\nexports.restart = function (envVariables) {\n    let processOptions = {        \n        env: { ...process.env, ...envVariables },\n        detached: true,\n        stdio: 'ignore'\n    };\n\n    let cp = spawn(process.argv[0], process.argv.slice(1), processOptions);\n    cp.unref();\n    process.exit(0);\n};\n\nexports.requireConfig = function (app, config, keys, prefix) {\n    keys.forEach(key => {\n        let value = _.get(config, key);\n        if (_.isNil(value)) {\n            throw new InvalidConfiguration(`Missing required config item \"${key}\".`, app, `${prefix}.${key}`);\n        }\n    })\n};\n\nexports.ensureFeatureName = name => {\n    if (!name) throw new ApplicationError('This feature cannot be used in v1.x @genx/app.');\n}\n\nexports.scriptBaseName = (fileName) => path.basename(fileName, '.js');"],"file":"Helpers.js"}