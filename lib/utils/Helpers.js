"use strict";

require("source-map-support/register");

const {
  _
} = require('rk-utils');

const spawn = require('child_process').spawn;

exports.dependsOn = function (features, app, fromFeature) {
  let hasNotEnabled = _.find(_.castArray(features), feature => !app.enabled(feature));

  if (hasNotEnabled) {
    throw new Error(`"${fromFeature}" feature requires "${hasNotEnabled}" feature to be enabled.`);
  }
};

exports.splitControllerAction = function (actionString) {
  let pos = actionString.lastIndexOf('.');

  if (pos <= 0) {
    throw new Error(`Unrecognized controller.action syntax: ${actionString}.`);
  }

  let controller = actionString.substr(0, pos);
  let action = actionString.substr(pos + 1);
  return {
    controller,
    action
  };
};

exports.tryRequire = function (packageName) {
  function tryRequireBy(packageName, mainModule, throwWhenNotFound) {
    try {
      return mainModule.require(packageName);
    } catch (error) {
      if (error.code === 'MODULE_NOT_FOUND') {
        if (throwWhenNotFound) {
          let pkgPaths = packageName.split('/');
          let npmPkgName = pkgPaths[0];

          if (pkgPaths[0].startsWith('@') && pkgPaths.length > 1) {
            npmPkgName += '/' + pkgPaths[1];
          }

          throw new Error(`Module "${packageName}" not found. Try run "npm install ${npmPkgName}" to install the dependency.`);
        }

        return undefined;
      }

      throw error;
    }
  }

  return tryRequireBy(packageName, module) || tryRequireBy(packageName, require.main, true);
};

exports.withExpose = Base => {
  var _temp;

  return _temp = class extends Base {
    constructor(...args) {
      super(...args);
      this.expose = true;
    }

  }, _temp;
};

exports.withName = Base => class extends Base {
  constructor(...args) {
    super(...args);
    this.name = this.constructor.name;
  }

};

exports.withExtraInfo = Base => class extends Base {
  constructor(...args) {
    super(...args);
    let expectedNumArgs = super.constructor.length;

    if (args.length > expectedNumArgs) {
      let extra = args.slice(expectedNumArgs);
      this.extraInfo = extra.length > 1 ? extra : extra[0];
    }
  }

};

exports.restart = function (envVariables) {
  let processOptions = {
    env: { ...process.env,
      ...envVariables
    },
    detached: true,
    stdio: 'ignore'
  };
  let cp = spawn(process.argv[0], process.argv.slice(1), processOptions);
  cp.unref();
  process.exit(0);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9IZWxwZXJzLmpzIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwic3Bhd24iLCJleHBvcnRzIiwiZGVwZW5kc09uIiwiZmVhdHVyZXMiLCJhcHAiLCJmcm9tRmVhdHVyZSIsImhhc05vdEVuYWJsZWQiLCJmaW5kIiwiY2FzdEFycmF5IiwiZmVhdHVyZSIsImVuYWJsZWQiLCJFcnJvciIsInNwbGl0Q29udHJvbGxlckFjdGlvbiIsImFjdGlvblN0cmluZyIsInBvcyIsImxhc3RJbmRleE9mIiwiY29udHJvbGxlciIsInN1YnN0ciIsImFjdGlvbiIsInRyeVJlcXVpcmUiLCJwYWNrYWdlTmFtZSIsInRyeVJlcXVpcmVCeSIsIm1haW5Nb2R1bGUiLCJ0aHJvd1doZW5Ob3RGb3VuZCIsImVycm9yIiwiY29kZSIsInBrZ1BhdGhzIiwic3BsaXQiLCJucG1Qa2dOYW1lIiwic3RhcnRzV2l0aCIsImxlbmd0aCIsInVuZGVmaW5lZCIsIm1vZHVsZSIsIm1haW4iLCJ3aXRoRXhwb3NlIiwiQmFzZSIsImV4cG9zZSIsIndpdGhOYW1lIiwiY29uc3RydWN0b3IiLCJhcmdzIiwibmFtZSIsIndpdGhFeHRyYUluZm8iLCJleHBlY3RlZE51bUFyZ3MiLCJleHRyYSIsInNsaWNlIiwiZXh0cmFJbmZvIiwicmVzdGFydCIsImVudlZhcmlhYmxlcyIsInByb2Nlc3NPcHRpb25zIiwiZW52IiwicHJvY2VzcyIsImRldGFjaGVkIiwic3RkaW8iLCJjcCIsImFyZ3YiLCJ1bnJlZiIsImV4aXQiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBT0MsTUFBTTtBQUFFQSxFQUFBQTtBQUFGLElBQVFDLE9BQU8sQ0FBQyxVQUFELENBQXJCOztBQUNBLE1BQU1DLEtBQUssR0FBR0QsT0FBTyxDQUFDLGVBQUQsQ0FBUCxDQUF5QkMsS0FBdkM7O0FBT0RDLE9BQU8sQ0FBQ0MsU0FBUixHQUFvQixVQUFVQyxRQUFWLEVBQW9CQyxHQUFwQixFQUF5QkMsV0FBekIsRUFBc0M7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RUFBVTtBQUNqQixVQUFNLEdBQUdBLElBQVQ7QUFFQSxRQUFJRyxlQUFlLEdBQUcsTUFBTUosV0FBTixDQUFrQlIsTUFBeEM7O0FBRUEsUUFBSVMsSUFBSSxDQUFDVCxNQUFMLEdBQWNZLGVBQWxCLEVBQW1DO0FBQy9CLFVBQUlDLEtBQUssR0FBR0osSUFBSSxDQUFDSyxLQUFMLENBQVdGLGVBQVgsQ0FBWjtBQU1BLFdBQUtHLFNBQUwsR0FBaUJGLEtBQUssQ0FBQ2IsTUFBTixHQUFlLENBQWYsR0FBbUJhLEtBQW5CLEdBQTJCQSxLQUFLLENBQUMsQ0FBRCxDQUFqRDtBQUNIO0FBQ0o7O0FBZmdELENBQXJEOztBQXNCQTFDLE9BQU8sQ0FBQzZDLE9BQVIsR0FBa0IsVUFBVUMsWUFBVixFQUF3QjtBQUN0QyxNQUFJQyxjQUFjLEdBQUc7QUFDakJDLElBQUFBLEdBQUcsRUFBRSxFQUFFLEdBQUdDLE9BQU8sQ0FBQ0QsR0FBYjtBQUFrQixTQUFHRjtBQUFyQixLQURZO0FBRWpCSSxJQUFBQSxRQUFRLEVBQUUsSUFGTztBQUdqQkMsSUFBQUEsS0FBSyxFQUFFO0FBSFUsR0FBckI7QUFNQSxNQUFJQyxFQUFFLEdBQUdyRCxLQUFLLENBQUNrRCxPQUFPLENBQUNJLElBQVIsQ0FBYSxDQUFiLENBQUQsRUFBa0JKLE9BQU8sQ0FBQ0ksSUFBUixDQUFhVixLQUFiLENBQW1CLENBQW5CLENBQWxCLEVBQXlDSSxjQUF6QyxDQUFkO0FBQ0FLLEVBQUFBLEVBQUUsQ0FBQ0UsS0FBSDtBQUNBTCxFQUFBQSxPQUFPLENBQUNNLElBQVIsQ0FBYSxDQUFiO0FBQ0gsQ0FWRCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIENvbW1vbiBoZWxwZXJzIGZvciBzZXJ2aWNlIGNvbnRhaW5lci5cbiAqIEBtb2R1bGUgSGVscGVyc1xuICovIFxuXG4gY29uc3QgeyBfIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuIGNvbnN0IHNwYXduID0gcmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpLnNwYXduO1xuXG4gLyoqXG4gICogQHBhcmFtIHtzdHJpbmd8YXJyYXkuPHN0cmluZz59IGZlYXR1cmVzIC0gRGVwZW5kZW5jaWVzIG9mIG90aGVyIGZlYXR1cmVzLlxuICAqIEBwYXJhbSB7U2VydmljZUNvbnRhaW5lcn0gYXBwIC0gT3JpZ2luIHNlcnZpY2UgY29udGFpbmVyIGFwcC5cbiAgKiBAcGFyYW0ge3N0cmluZ30gZnJvbUZlYXR1cmUgLSBEZXBlbmRlbnQgZmVhdHVyZS5cbiAgKi9cbmV4cG9ydHMuZGVwZW5kc09uID0gZnVuY3Rpb24gKGZlYXR1cmVzLCBhcHAsIGZyb21GZWF0dXJlKSB7XG4gICAgbGV0IGhhc05vdEVuYWJsZWQgPSBfLmZpbmQoXy5jYXN0QXJyYXkoZmVhdHVyZXMpLCBmZWF0dXJlID0+ICFhcHAuZW5hYmxlZChmZWF0dXJlKSk7XG5cbiAgICBpZiAoaGFzTm90RW5hYmxlZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFwiJHtmcm9tRmVhdHVyZX1cIiBmZWF0dXJlIHJlcXVpcmVzIFwiJHtoYXNOb3RFbmFibGVkfVwiIGZlYXR1cmUgdG8gYmUgZW5hYmxlZC5gKTtcbiAgICB9XG59O1xuXG5leHBvcnRzLnNwbGl0Q29udHJvbGxlckFjdGlvbiA9IGZ1bmN0aW9uIChhY3Rpb25TdHJpbmcpIHtcbiAgICBsZXQgcG9zID0gYWN0aW9uU3RyaW5nLmxhc3RJbmRleE9mKCcuJyk7XG4gICAgaWYgKHBvcyA8PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5yZWNvZ25pemVkIGNvbnRyb2xsZXIuYWN0aW9uIHN5bnRheDogJHthY3Rpb25TdHJpbmd9LmApO1xuICAgIH1cblxuICAgIGxldCBjb250cm9sbGVyID0gYWN0aW9uU3RyaW5nLnN1YnN0cigwLCBwb3MpO1xuICAgIGxldCBhY3Rpb24gPSBhY3Rpb25TdHJpbmcuc3Vic3RyKHBvcyArIDEpO1xuXG4gICAgcmV0dXJuIHsgY29udHJvbGxlciwgYWN0aW9uIH07XG59O1xuXG4vKipcbiAqIFRyeSByZXF1aXJlIGEgcGFja2FnZSBtb2R1bGUgYW5kIHNob3cgaW5zdGFsbCB0aXBzIGlmIG5vdCBmb3VuZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYWNrYWdlTmFtZVxuICovXG5leHBvcnRzLnRyeVJlcXVpcmUgPSBmdW5jdGlvbiAocGFja2FnZU5hbWUpIHtcblxuICAgIGZ1bmN0aW9uIHRyeVJlcXVpcmVCeShwYWNrYWdlTmFtZSwgbWFpbk1vZHVsZSwgdGhyb3dXaGVuTm90Rm91bmQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBtYWluTW9kdWxlLnJlcXVpcmUocGFja2FnZU5hbWUpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGVycm9yLmNvZGUgPT09ICdNT0RVTEVfTk9UX0ZPVU5EJykge1xuICAgICAgICAgICAgICAgIGlmICh0aHJvd1doZW5Ob3RGb3VuZCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcGtnUGF0aHMgPSBwYWNrYWdlTmFtZS5zcGxpdCgnLycpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbnBtUGtnTmFtZSA9IHBrZ1BhdGhzWzBdO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGtnUGF0aHNbMF0uc3RhcnRzV2l0aCgnQCcpICYmIHBrZ1BhdGhzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5wbVBrZ05hbWUgKz0gJy8nICsgcGtnUGF0aHNbMV07XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE1vZHVsZSBcIiR7cGFja2FnZU5hbWV9XCIgbm90IGZvdW5kLiBUcnkgcnVuIFwibnBtIGluc3RhbGwgJHtucG1Qa2dOYW1lfVwiIHRvIGluc3RhbGwgdGhlIGRlcGVuZGVuY3kuYCk7XG4gICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRyeVJlcXVpcmVCeShwYWNrYWdlTmFtZSwgbW9kdWxlKSB8fCB0cnlSZXF1aXJlQnkocGFja2FnZU5hbWUsIHJlcXVpcmUubWFpbiwgdHJ1ZSk7XG59O1xuXG4vKipcbiAqIEFkZCBhIGV4cG9zZSBwcm9wZXJ0eSB0byB0aGUgZXJyb3Igb2JqZWN0LlxuICogQG1peGluXG4gKiBAcGFyYW0geyp9IEJhc2UgXG4gKi9cbmV4cG9ydHMud2l0aEV4cG9zZSA9IChCYXNlKSA9PiBjbGFzcyBleHRlbmRzIEJhc2Uge1xuICAgIGV4cG9zZSA9IHRydWU7ICAgIFxufTtcblxuLyoqXG4gKiBBZGQgYSBuYW1lIHByb3BlcnR5IG9mIHdoaWNoIHRoZSB2YWx1ZSBpcyB0aGUgY2xhc3MgbmFtZS5cbiAqIEBtaXhpblxuICogQHBhcmFtIHsqfSBCYXNlIFxuICovXG5leHBvcnRzLndpdGhOYW1lID0gKEJhc2UpID0+IGNsYXNzIGV4dGVuZHMgQmFzZSB7ICAgIFxuICAgIGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJncyk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVycm9yIG5hbWUuXG4gICAgICAgICAqIEBtZW1iZXIge3N0cmluZ31cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubmFtZSA9IHRoaXMuY29uc3RydWN0b3IubmFtZTtcbiAgICB9ICAgIFxufTtcblxuLyoqXG4gKiBBZGQgYW4gZXh0cmFJbmZvIHByb3BlcnR5IGFuZCBwYXNzZWQgaW4gYnkgZXh0cmEgY29uc3RydXRvciBhcmd1bWVudHMuXG4gKiBAbWl4aW5cbiAqIEBwYXJhbSB7Kn0gQmFzZSBcbiAqL1xuZXhwb3J0cy53aXRoRXh0cmFJbmZvID0gKEJhc2UpID0+IGNsYXNzIGV4dGVuZHMgQmFzZSB7ICAgIFxuICAgIGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJncyk7XG5cbiAgICAgICAgbGV0IGV4cGVjdGVkTnVtQXJncyA9IHN1cGVyLmNvbnN0cnVjdG9yLmxlbmd0aDtcblxuICAgICAgICBpZiAoYXJncy5sZW5ndGggPiBleHBlY3RlZE51bUFyZ3MpIHtcbiAgICAgICAgICAgIGxldCBleHRyYSA9IGFyZ3Muc2xpY2UoZXhwZWN0ZWROdW1BcmdzKTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBFeHRyYSBlcnJvciBpbmZvLlxuICAgICAgICAgICAgICogQG1lbWJlciB7b2JqZWN0fVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLmV4dHJhSW5mbyA9IGV4dHJhLmxlbmd0aCA+IDEgPyBleHRyYSA6IGV4dHJhWzBdO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuLyoqXG4gKiBSZXN0YXJ0IHRoZSBjdXJyZW50IHByb2Nlc3MuXG4gKiBAcGFyYW0ge29iamVjdH0gZW52VmFyaWFibGVzIC0gRW52aXJvbm1lbnQgdmFyaWFibGVzXG4gKi9cbmV4cG9ydHMucmVzdGFydCA9IGZ1bmN0aW9uIChlbnZWYXJpYWJsZXMpIHtcbiAgICBsZXQgcHJvY2Vzc09wdGlvbnMgPSB7ICAgICAgICBcbiAgICAgICAgZW52OiB7IC4uLnByb2Nlc3MuZW52LCAuLi5lbnZWYXJpYWJsZXMgfSxcbiAgICAgICAgZGV0YWNoZWQ6IHRydWUsXG4gICAgICAgIHN0ZGlvOiAnaWdub3JlJ1xuICAgIH07XG5cbiAgICBsZXQgY3AgPSBzcGF3bihwcm9jZXNzLmFyZ3ZbMF0sIHByb2Nlc3MuYXJndi5zbGljZSgxKSwgcHJvY2Vzc09wdGlvbnMpO1xuICAgIGNwLnVucmVmKCk7XG4gICAgcHJvY2Vzcy5leGl0KDApO1xufTtcbiJdfQ==