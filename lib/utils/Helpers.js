"use strict";

require("source-map-support/register");

const {
  _
} = require('rk-utils');

const spawn = require('child_process').spawn;

exports.withErrorCode = (Base, CODE) => {
  var _temp;

  return _temp = class extends Base {
    constructor(...args) {
      super(...args);
      this.code = CODE;
    }

  }, _temp;
};

exports.dependsOn = function (features, app, fromFeature) {
  let hasNotEnabled = _.find(_.castArray(features), feature => !app.enabled(feature));

  if (hasNotEnabled) {
    throw new Error(`"${fromFeature}" feature requires "${hasNotEnabled}" feature to be enabled.`);
  }
};

exports.tryRequire = function (packageName) {
  function tryRequireBy(packageName, mainModule, throwWhenNotFound) {
    try {
      return mainModule.require(packageName);
    } catch (error) {
      if (error.code === 'MODULE_NOT_FOUND') {
        if (throwWhenNotFound) {
          let pkgPaths = packageName.split('/');
          let npmPkgName = pkgPaths[0];

          if (pkgPaths[0].startsWith('@') && pkgPaths.length > 1) {
            npmPkgName += '/' + pkgPaths[1];
          }

          console.log(error.message);
          throw new Error(`Module "${packageName}" not found. Try run "npm install ${npmPkgName}" to install the dependency.`);
        }

        return undefined;
      }

      throw error;
    }
  }

  return tryRequireBy(packageName, module, require.main === module) || tryRequireBy(packageName, require.main, true);
};

exports.restart = function (envVariables) {
  let processOptions = {
    env: { ...process.env,
      ...envVariables
    },
    detached: true,
    stdio: 'ignore'
  };
  let cp = spawn(process.argv[0], process.argv.slice(1), processOptions);
  cp.unref();
  process.exit(0);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9IZWxwZXJzLmpzIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwic3Bhd24iLCJleHBvcnRzIiwid2l0aEVycm9yQ29kZSIsIkJhc2UiLCJDT0RFIiwiY29kZSIsImRlcGVuZHNPbiIsImZlYXR1cmVzIiwiYXBwIiwiZnJvbUZlYXR1cmUiLCJoYXNOb3RFbmFibGVkIiwiZmluZCIsImNhc3RBcnJheSIsImZlYXR1cmUiLCJlbmFibGVkIiwiRXJyb3IiLCJ0cnlSZXF1aXJlIiwicGFja2FnZU5hbWUiLCJ0cnlSZXF1aXJlQnkiLCJtYWluTW9kdWxlIiwidGhyb3dXaGVuTm90Rm91bmQiLCJlcnJvciIsInBrZ1BhdGhzIiwic3BsaXQiLCJucG1Qa2dOYW1lIiwic3RhcnRzV2l0aCIsImxlbmd0aCIsImNvbnNvbGUiLCJsb2ciLCJtZXNzYWdlIiwidW5kZWZpbmVkIiwibW9kdWxlIiwibWFpbiIsInJlc3RhcnQiLCJlbnZWYXJpYWJsZXMiLCJwcm9jZXNzT3B0aW9ucyIsImVudiIsInByb2Nlc3MiLCJkZXRhY2hlZCIsInN0ZGlvIiwiY3AiLCJhcmd2Iiwic2xpY2UiLCJ1bnJlZiIsImV4aXQiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBT0MsTUFBTTtBQUFFQSxFQUFBQTtBQUFGLElBQVFDLE9BQU8sQ0FBQyxVQUFELENBQXJCOztBQUNBLE1BQU1DLEtBQUssR0FBR0QsT0FBTyxDQUFDLGVBQUQsQ0FBUCxDQUF5QkMsS0FBdkM7O0FBUURDLE9BQU8sQ0FBQ0MsYUFBUixHQUF3QixDQUFDQyxJQUFELEVBQU9DLElBQVA7QUFBQTs7QUFBQSxpQkFBZ0IsY0FBY0QsSUFBZCxDQUFtQjtBQUFBO0FBQUE7QUFBQSxXQUt2REUsSUFMdUQsR0FLaERELElBTGdEO0FBQUE7O0FBQUEsR0FBbkM7QUFBQSxDQUF4Qjs7QUFhQUgsT0FBTyxDQUFDSyxTQUFSLEdBQW9CLFVBQVVDLFFBQVYsRUFBb0JDLEdBQXBCLEVBQXlCQyxXQUF6QixFQUFzQztBQUN0RCxNQUFJQyxhQUFhLEdBQUdaLENBQUMsQ0FBQ2EsSUFBRixDQUFPYixDQUFDLENBQUNjLFNBQUYsQ0FBWUwsUUFBWixDQUFQLEVBQThCTSxPQUFPLElBQUksQ0FBQ0wsR0FBRyxDQUFDTSxPQUFKLENBQVlELE9BQVosQ0FBMUMsQ0FBcEI7O0FBRUEsTUFBSUgsYUFBSixFQUFtQjtBQUNmLFVBQU0sSUFBSUssS0FBSixDQUFXLElBQUdOLFdBQVksdUJBQXNCQyxhQUFjLDBCQUE5RCxDQUFOO0FBQ0g7QUFDSixDQU5EOztBQVlBVCxPQUFPLENBQUNlLFVBQVIsR0FBcUIsVUFBVUMsV0FBVixFQUF1QjtBQUV4QyxXQUFTQyxZQUFULENBQXNCRCxXQUF0QixFQUFtQ0UsVUFBbkMsRUFBK0NDLGlCQUEvQyxFQUFrRTtBQUM5RCxRQUFJO0FBQ0EsYUFBT0QsVUFBVSxDQUFDcEIsT0FBWCxDQUFtQmtCLFdBQW5CLENBQVA7QUFDSCxLQUZELENBRUUsT0FBT0ksS0FBUCxFQUFjO0FBQ1osVUFBSUEsS0FBSyxDQUFDaEIsSUFBTixLQUFlLGtCQUFuQixFQUF1QztBQUNuQyxZQUFJZSxpQkFBSixFQUF1QjtBQUNuQixjQUFJRSxRQUFRLEdBQUdMLFdBQVcsQ0FBQ00sS0FBWixDQUFrQixHQUFsQixDQUFmO0FBQ0EsY0FBSUMsVUFBVSxHQUFHRixRQUFRLENBQUMsQ0FBRCxDQUF6Qjs7QUFDQSxjQUFJQSxRQUFRLENBQUMsQ0FBRCxDQUFSLENBQVlHLFVBQVosQ0FBdUIsR0FBdkIsS0FBK0JILFFBQVEsQ0FBQ0ksTUFBVCxHQUFrQixDQUFyRCxFQUF3RDtBQUNwREYsWUFBQUEsVUFBVSxJQUFJLE1BQU1GLFFBQVEsQ0FBQyxDQUFELENBQTVCO0FBQ0g7O0FBRURLLFVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZUCxLQUFLLENBQUNRLE9BQWxCO0FBRUEsZ0JBQU0sSUFBSWQsS0FBSixDQUFXLFdBQVVFLFdBQVkscUNBQW9DTyxVQUFXLDhCQUFoRixDQUFOO0FBQ0g7O0FBRUQsZUFBT00sU0FBUDtBQUNIOztBQUVELFlBQU1ULEtBQU47QUFDSDtBQUNKOztBQUVELFNBQU9ILFlBQVksQ0FBQ0QsV0FBRCxFQUFjYyxNQUFkLEVBQXNCaEMsT0FBTyxDQUFDaUMsSUFBUixLQUFpQkQsTUFBdkMsQ0FBWixJQUE4RGIsWUFBWSxDQUFDRCxXQUFELEVBQWNsQixPQUFPLENBQUNpQyxJQUF0QixFQUE0QixJQUE1QixDQUFqRjtBQUNILENBM0JEOztBQWtDQS9CLE9BQU8sQ0FBQ2dDLE9BQVIsR0FBa0IsVUFBVUMsWUFBVixFQUF3QjtBQUN0QyxNQUFJQyxjQUFjLEdBQUc7QUFDakJDLElBQUFBLEdBQUcsRUFBRSxFQUFFLEdBQUdDLE9BQU8sQ0FBQ0QsR0FBYjtBQUFrQixTQUFHRjtBQUFyQixLQURZO0FBRWpCSSxJQUFBQSxRQUFRLEVBQUUsSUFGTztBQUdqQkMsSUFBQUEsS0FBSyxFQUFFO0FBSFUsR0FBckI7QUFNQSxNQUFJQyxFQUFFLEdBQUd4QyxLQUFLLENBQUNxQyxPQUFPLENBQUNJLElBQVIsQ0FBYSxDQUFiLENBQUQsRUFBa0JKLE9BQU8sQ0FBQ0ksSUFBUixDQUFhQyxLQUFiLENBQW1CLENBQW5CLENBQWxCLEVBQXlDUCxjQUF6QyxDQUFkO0FBQ0FLLEVBQUFBLEVBQUUsQ0FBQ0csS0FBSDtBQUNBTixFQUFBQSxPQUFPLENBQUNPLElBQVIsQ0FBYSxDQUFiO0FBQ0gsQ0FWRCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIENvbW1vbiBoZWxwZXJzIGZvciBzZXJ2aWNlIGNvbnRhaW5lci5cbiAqIEBtb2R1bGUgSGVscGVyc1xuICovIFxuXG4gY29uc3QgeyBfIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuIGNvbnN0IHNwYXduID0gcmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpLnNwYXduO1xuXG4gLyoqXG4gKiBGaWxsIGFuIGVycm9yIGNvZGUgdGhlIHRoZSBlcnJvciBvYmplY3QuXG4gKiBAbWl4aW5cbiAqIEBwYXJhbSB7Kn0gQmFzZSBcbiAqIEBwYXJhbSB7Kn0gQ09ERSBcbiAqL1xuZXhwb3J0cy53aXRoRXJyb3JDb2RlID0gKEJhc2UsIENPREUpID0+IGNsYXNzIGV4dGVuZHMgQmFzZSB7XG4gICAgLyoqXG4gICAgICogRXJyb3IgY29kZS5cbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICovXG4gICAgY29kZSA9IENPREU7XG59O1xuXG4gLyoqXG4gICogQHBhcmFtIHtzdHJpbmd8YXJyYXkuPHN0cmluZz59IGZlYXR1cmVzIC0gRGVwZW5kZW5jaWVzIG9mIG90aGVyIGZlYXR1cmVzLlxuICAqIEBwYXJhbSB7U2VydmljZUNvbnRhaW5lcn0gYXBwIC0gT3JpZ2luIHNlcnZpY2UgY29udGFpbmVyIGFwcC5cbiAgKiBAcGFyYW0ge3N0cmluZ30gZnJvbUZlYXR1cmUgLSBEZXBlbmRlbnQgZmVhdHVyZS5cbiAgKi9cbmV4cG9ydHMuZGVwZW5kc09uID0gZnVuY3Rpb24gKGZlYXR1cmVzLCBhcHAsIGZyb21GZWF0dXJlKSB7XG4gICAgbGV0IGhhc05vdEVuYWJsZWQgPSBfLmZpbmQoXy5jYXN0QXJyYXkoZmVhdHVyZXMpLCBmZWF0dXJlID0+ICFhcHAuZW5hYmxlZChmZWF0dXJlKSk7XG5cbiAgICBpZiAoaGFzTm90RW5hYmxlZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFwiJHtmcm9tRmVhdHVyZX1cIiBmZWF0dXJlIHJlcXVpcmVzIFwiJHtoYXNOb3RFbmFibGVkfVwiIGZlYXR1cmUgdG8gYmUgZW5hYmxlZC5gKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIFRyeSByZXF1aXJlIGEgcGFja2FnZSBtb2R1bGUgYW5kIHNob3cgaW5zdGFsbCB0aXBzIGlmIG5vdCBmb3VuZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYWNrYWdlTmFtZVxuICovXG5leHBvcnRzLnRyeVJlcXVpcmUgPSBmdW5jdGlvbiAocGFja2FnZU5hbWUpIHtcblxuICAgIGZ1bmN0aW9uIHRyeVJlcXVpcmVCeShwYWNrYWdlTmFtZSwgbWFpbk1vZHVsZSwgdGhyb3dXaGVuTm90Rm91bmQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBtYWluTW9kdWxlLnJlcXVpcmUocGFja2FnZU5hbWUpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGVycm9yLmNvZGUgPT09ICdNT0RVTEVfTk9UX0ZPVU5EJykge1xuICAgICAgICAgICAgICAgIGlmICh0aHJvd1doZW5Ob3RGb3VuZCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcGtnUGF0aHMgPSBwYWNrYWdlTmFtZS5zcGxpdCgnLycpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbnBtUGtnTmFtZSA9IHBrZ1BhdGhzWzBdO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGtnUGF0aHNbMF0uc3RhcnRzV2l0aCgnQCcpICYmIHBrZ1BhdGhzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5wbVBrZ05hbWUgKz0gJy8nICsgcGtnUGF0aHNbMV07XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvci5tZXNzYWdlKTtcblxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE1vZHVsZSBcIiR7cGFja2FnZU5hbWV9XCIgbm90IGZvdW5kLiBUcnkgcnVuIFwibnBtIGluc3RhbGwgJHtucG1Qa2dOYW1lfVwiIHRvIGluc3RhbGwgdGhlIGRlcGVuZGVuY3kuYCk7XG4gICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRyeVJlcXVpcmVCeShwYWNrYWdlTmFtZSwgbW9kdWxlLCByZXF1aXJlLm1haW4gPT09IG1vZHVsZSkgfHwgdHJ5UmVxdWlyZUJ5KHBhY2thZ2VOYW1lLCByZXF1aXJlLm1haW4sIHRydWUpO1xufTtcblxuXG4vKipcbiAqIFJlc3RhcnQgdGhlIGN1cnJlbnQgcHJvY2Vzcy5cbiAqIEBwYXJhbSB7b2JqZWN0fSBlbnZWYXJpYWJsZXMgLSBFbnZpcm9ubWVudCB2YXJpYWJsZXNcbiAqL1xuZXhwb3J0cy5yZXN0YXJ0ID0gZnVuY3Rpb24gKGVudlZhcmlhYmxlcykge1xuICAgIGxldCBwcm9jZXNzT3B0aW9ucyA9IHsgICAgICAgIFxuICAgICAgICBlbnY6IHsgLi4ucHJvY2Vzcy5lbnYsIC4uLmVudlZhcmlhYmxlcyB9LFxuICAgICAgICBkZXRhY2hlZDogdHJ1ZSxcbiAgICAgICAgc3RkaW86ICdpZ25vcmUnXG4gICAgfTtcblxuICAgIGxldCBjcCA9IHNwYXduKHByb2Nlc3MuYXJndlswXSwgcHJvY2Vzcy5hcmd2LnNsaWNlKDEpLCBwcm9jZXNzT3B0aW9ucyk7XG4gICAgY3AudW5yZWYoKTtcbiAgICBwcm9jZXNzLmV4aXQoMCk7XG59O1xuIl19