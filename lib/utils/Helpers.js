"use strict";

require("source-map-support/register");

const {
  _
} = require('@genx/july');

const {
  ApplicationError,
  InvalidConfiguration
} = require('@genx/error');

const path = require('path');

const spawn = require('child_process').spawn;

exports.withProps = (Base, Props) => class extends Base {
  constructor(...args) {
    super(...args);
    Object.assign(this, Props);
  }

};

exports.dependsOn = function (features, app, fromFeature) {
  let hasNotEnabled = _.find(_.castArray(features), feature => !app.enabled(feature));

  if (hasNotEnabled) {
    throw new Error(`"${fromFeature}" feature requires "${hasNotEnabled}" feature to be enabled.`);
  }
};

exports.restart = function (envVariables) {
  let processOptions = {
    env: { ...process.env,
      ...envVariables
    },
    detached: true,
    stdio: 'ignore'
  };
  let cp = spawn(process.argv[0], process.argv.slice(1), processOptions);
  cp.unref();
  process.exit(0);
};

exports.requireConfig = function (app, config, keys, prefix) {
  keys.forEach(key => {
    let value = _.get(config, key);

    if (_.isNil(value)) {
      throw new InvalidConfiguration(`Missing required config item "${key}".`, app, `${prefix}.${key}`);
    }
  });
};

exports.ensureFeatureName = name => {
  if (!name) throw new ApplicationError('This feature cannot be used in v1.x @genx/app.');
};

exports.scriptBaseName = fileName => path.basename(fileName, '.js');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9IZWxwZXJzLmpzIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwiQXBwbGljYXRpb25FcnJvciIsIkludmFsaWRDb25maWd1cmF0aW9uIiwicGF0aCIsInNwYXduIiwiZXhwb3J0cyIsIndpdGhQcm9wcyIsIkJhc2UiLCJQcm9wcyIsImNvbnN0cnVjdG9yIiwiYXJncyIsIk9iamVjdCIsImFzc2lnbiIsImRlcGVuZHNPbiIsImZlYXR1cmVzIiwiYXBwIiwiZnJvbUZlYXR1cmUiLCJoYXNOb3RFbmFibGVkIiwiZmluZCIsImNhc3RBcnJheSIsImZlYXR1cmUiLCJlbmFibGVkIiwiRXJyb3IiLCJyZXN0YXJ0IiwiZW52VmFyaWFibGVzIiwicHJvY2Vzc09wdGlvbnMiLCJlbnYiLCJwcm9jZXNzIiwiZGV0YWNoZWQiLCJzdGRpbyIsImNwIiwiYXJndiIsInNsaWNlIiwidW5yZWYiLCJleGl0IiwicmVxdWlyZUNvbmZpZyIsImNvbmZpZyIsImtleXMiLCJwcmVmaXgiLCJmb3JFYWNoIiwia2V5IiwidmFsdWUiLCJnZXQiLCJpc05pbCIsImVuc3VyZUZlYXR1cmVOYW1lIiwibmFtZSIsInNjcmlwdEJhc2VOYW1lIiwiZmlsZU5hbWUiLCJiYXNlbmFtZSJdLCJtYXBwaW5ncyI6Ijs7OztBQUtBLE1BQU07QUFBRUEsRUFBQUE7QUFBRixJQUFRQyxPQUFPLENBQUMsWUFBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBLGdCQUFGO0FBQW9CQyxFQUFBQTtBQUFwQixJQUE2Q0YsT0FBTyxDQUFDLGFBQUQsQ0FBMUQ7O0FBQ0EsTUFBTUcsSUFBSSxHQUFHSCxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNSSxLQUFLLEdBQUdKLE9BQU8sQ0FBQyxlQUFELENBQVAsQ0FBeUJJLEtBQXZDOztBQVFBQyxPQUFPLENBQUNDLFNBQVIsR0FBb0IsQ0FBQ0MsSUFBRCxFQUFPQyxLQUFQLEtBQWlCLGNBQWNELElBQWQsQ0FBbUI7QUFDcERFLEVBQUFBLFdBQVcsQ0FBQyxHQUFHQyxJQUFKLEVBQVU7QUFDakIsVUFBTSxHQUFHQSxJQUFUO0FBRUFDLElBQUFBLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjLElBQWQsRUFBb0JKLEtBQXBCO0FBQ0g7O0FBTG1ELENBQXhEOztBQWFBSCxPQUFPLENBQUNRLFNBQVIsR0FBb0IsVUFBVUMsUUFBVixFQUFvQkMsR0FBcEIsRUFBeUJDLFdBQXpCLEVBQXNDO0FBQ3RELE1BQUlDLGFBQWEsR0FBR2xCLENBQUMsQ0FBQ21CLElBQUYsQ0FBT25CLENBQUMsQ0FBQ29CLFNBQUYsQ0FBWUwsUUFBWixDQUFQLEVBQThCTSxPQUFPLElBQUksQ0FBQ0wsR0FBRyxDQUFDTSxPQUFKLENBQVlELE9BQVosQ0FBMUMsQ0FBcEI7O0FBRUEsTUFBSUgsYUFBSixFQUFtQjtBQUNmLFVBQU0sSUFBSUssS0FBSixDQUFXLElBQUdOLFdBQVksdUJBQXNCQyxhQUFjLDBCQUE5RCxDQUFOO0FBQ0g7QUFDSixDQU5EOztBQVlBWixPQUFPLENBQUNrQixPQUFSLEdBQWtCLFVBQVVDLFlBQVYsRUFBd0I7QUFDdEMsTUFBSUMsY0FBYyxHQUFHO0FBQ2pCQyxJQUFBQSxHQUFHLEVBQUUsRUFBRSxHQUFHQyxPQUFPLENBQUNELEdBQWI7QUFBa0IsU0FBR0Y7QUFBckIsS0FEWTtBQUVqQkksSUFBQUEsUUFBUSxFQUFFLElBRk87QUFHakJDLElBQUFBLEtBQUssRUFBRTtBQUhVLEdBQXJCO0FBTUEsTUFBSUMsRUFBRSxHQUFHMUIsS0FBSyxDQUFDdUIsT0FBTyxDQUFDSSxJQUFSLENBQWEsQ0FBYixDQUFELEVBQWtCSixPQUFPLENBQUNJLElBQVIsQ0FBYUMsS0FBYixDQUFtQixDQUFuQixDQUFsQixFQUF5Q1AsY0FBekMsQ0FBZDtBQUNBSyxFQUFBQSxFQUFFLENBQUNHLEtBQUg7QUFDQU4sRUFBQUEsT0FBTyxDQUFDTyxJQUFSLENBQWEsQ0FBYjtBQUNILENBVkQ7O0FBWUE3QixPQUFPLENBQUM4QixhQUFSLEdBQXdCLFVBQVVwQixHQUFWLEVBQWVxQixNQUFmLEVBQXVCQyxJQUF2QixFQUE2QkMsTUFBN0IsRUFBcUM7QUFDekRELEVBQUFBLElBQUksQ0FBQ0UsT0FBTCxDQUFhQyxHQUFHLElBQUk7QUFDaEIsUUFBSUMsS0FBSyxHQUFHMUMsQ0FBQyxDQUFDMkMsR0FBRixDQUFNTixNQUFOLEVBQWNJLEdBQWQsQ0FBWjs7QUFDQSxRQUFJekMsQ0FBQyxDQUFDNEMsS0FBRixDQUFRRixLQUFSLENBQUosRUFBb0I7QUFDaEIsWUFBTSxJQUFJdkMsb0JBQUosQ0FBMEIsaUNBQWdDc0MsR0FBSSxJQUE5RCxFQUFtRXpCLEdBQW5FLEVBQXlFLEdBQUV1QixNQUFPLElBQUdFLEdBQUksRUFBekYsQ0FBTjtBQUNIO0FBQ0osR0FMRDtBQU1ILENBUEQ7O0FBU0FuQyxPQUFPLENBQUN1QyxpQkFBUixHQUE0QkMsSUFBSSxJQUFJO0FBQ2hDLE1BQUksQ0FBQ0EsSUFBTCxFQUFXLE1BQU0sSUFBSTVDLGdCQUFKLENBQXFCLGdEQUFyQixDQUFOO0FBQ2QsQ0FGRDs7QUFJQUksT0FBTyxDQUFDeUMsY0FBUixHQUEwQkMsUUFBRCxJQUFjNUMsSUFBSSxDQUFDNkMsUUFBTCxDQUFjRCxRQUFkLEVBQXdCLEtBQXhCLENBQXZDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb21tb24gaGVscGVycyBmb3Igc2VydmljZSBjb250YWluZXIuXG4gKiBAbW9kdWxlIEhlbHBlcnNcbiAqLyBcblxuY29uc3QgeyBfIH0gPSByZXF1aXJlKCdAZ2VueC9qdWx5Jyk7XG5jb25zdCB7IEFwcGxpY2F0aW9uRXJyb3IsIEludmFsaWRDb25maWd1cmF0aW9uIH0gPSByZXF1aXJlKCdAZ2VueC9lcnJvcicpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IHNwYXduID0gcmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpLnNwYXduO1xuXG4vKipcbiAqIFJldHVybnMgYSBuZXcgY2xhc3MgbWl4aW5nIHdpdGggZ2l2ZW4gcHJvcGVydGllcyBhbmQgaW5pdGlhbCB2YWx1ZXMuXG4gKiBAbWl4aW5cbiAqIEBwYXJhbSB7Kn0gQmFzZSBcbiAqIEBwYXJhbSB7b2JqZWN0fSBQcm9wcyBcbiAqL1xuZXhwb3J0cy53aXRoUHJvcHMgPSAoQmFzZSwgUHJvcHMpID0+IGNsYXNzIGV4dGVuZHMgQmFzZSB7XG4gICAgY29uc3RydWN0b3IoLi4uYXJncykge1xuICAgICAgICBzdXBlciguLi5hcmdzKTtcblxuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIFByb3BzKTtcbiAgICB9XG59O1xuXG4gLyoqXG4gICogQHBhcmFtIHtzdHJpbmd8YXJyYXkuPHN0cmluZz59IGZlYXR1cmVzIC0gRGVwZW5kZW5jaWVzIG9mIG90aGVyIGZlYXR1cmVzLlxuICAqIEBwYXJhbSB7U2VydmljZUNvbnRhaW5lcn0gYXBwIC0gT3JpZ2luIHNlcnZpY2UgY29udGFpbmVyIGFwcC5cbiAgKiBAcGFyYW0ge3N0cmluZ30gZnJvbUZlYXR1cmUgLSBEZXBlbmRlbnQgZmVhdHVyZS5cbiAgKi9cbmV4cG9ydHMuZGVwZW5kc09uID0gZnVuY3Rpb24gKGZlYXR1cmVzLCBhcHAsIGZyb21GZWF0dXJlKSB7XG4gICAgbGV0IGhhc05vdEVuYWJsZWQgPSBfLmZpbmQoXy5jYXN0QXJyYXkoZmVhdHVyZXMpLCBmZWF0dXJlID0+ICFhcHAuZW5hYmxlZChmZWF0dXJlKSk7XG5cbiAgICBpZiAoaGFzTm90RW5hYmxlZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFwiJHtmcm9tRmVhdHVyZX1cIiBmZWF0dXJlIHJlcXVpcmVzIFwiJHtoYXNOb3RFbmFibGVkfVwiIGZlYXR1cmUgdG8gYmUgZW5hYmxlZC5gKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIFJlc3RhcnQgdGhlIGN1cnJlbnQgcHJvY2Vzcy5cbiAqIEBwYXJhbSB7b2JqZWN0fSBlbnZWYXJpYWJsZXMgLSBFbnZpcm9ubWVudCB2YXJpYWJsZXNcbiAqL1xuZXhwb3J0cy5yZXN0YXJ0ID0gZnVuY3Rpb24gKGVudlZhcmlhYmxlcykge1xuICAgIGxldCBwcm9jZXNzT3B0aW9ucyA9IHsgICAgICAgIFxuICAgICAgICBlbnY6IHsgLi4ucHJvY2Vzcy5lbnYsIC4uLmVudlZhcmlhYmxlcyB9LFxuICAgICAgICBkZXRhY2hlZDogdHJ1ZSxcbiAgICAgICAgc3RkaW86ICdpZ25vcmUnXG4gICAgfTtcblxuICAgIGxldCBjcCA9IHNwYXduKHByb2Nlc3MuYXJndlswXSwgcHJvY2Vzcy5hcmd2LnNsaWNlKDEpLCBwcm9jZXNzT3B0aW9ucyk7XG4gICAgY3AudW5yZWYoKTtcbiAgICBwcm9jZXNzLmV4aXQoMCk7XG59O1xuXG5leHBvcnRzLnJlcXVpcmVDb25maWcgPSBmdW5jdGlvbiAoYXBwLCBjb25maWcsIGtleXMsIHByZWZpeCkge1xuICAgIGtleXMuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBsZXQgdmFsdWUgPSBfLmdldChjb25maWcsIGtleSk7XG4gICAgICAgIGlmIChfLmlzTmlsKHZhbHVlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRDb25maWd1cmF0aW9uKGBNaXNzaW5nIHJlcXVpcmVkIGNvbmZpZyBpdGVtIFwiJHtrZXl9XCIuYCwgYXBwLCBgJHtwcmVmaXh9LiR7a2V5fWApO1xuICAgICAgICB9XG4gICAgfSlcbn07XG5cbmV4cG9ydHMuZW5zdXJlRmVhdHVyZU5hbWUgPSBuYW1lID0+IHtcbiAgICBpZiAoIW5hbWUpIHRocm93IG5ldyBBcHBsaWNhdGlvbkVycm9yKCdUaGlzIGZlYXR1cmUgY2Fubm90IGJlIHVzZWQgaW4gdjEueCBAZ2VueC9hcHAuJyk7XG59XG5cbmV4cG9ydHMuc2NyaXB0QmFzZU5hbWUgPSAoZmlsZU5hbWUpID0+IHBhdGguYmFzZW5hbWUoZmlsZU5hbWUsICcuanMnKTsiXX0=