"use strict";

require("source-map-support/register");

const {
  _
} = require('@genx/july');

const {
  ApplicationError
} = require('@genx/error');

const path = require('path');

const spawn = require('child_process').spawn;

exports.withProps = (Base, Props) => class extends Base {
  constructor(...args) {
    super(...args);
    Object.assign(this, Props);
  }

};

exports.dependsOn = function (features, app, fromFeature) {
  let hasNotEnabled = _.find(_.castArray(features), feature => !app.enabled(feature));

  if (hasNotEnabled) {
    throw new Error(`"${fromFeature}" feature requires "${hasNotEnabled}" feature to be enabled.`);
  }
};

exports.restart = function (envVariables) {
  let processOptions = {
    env: { ...process.env,
      ...envVariables
    },
    detached: true,
    stdio: 'ignore'
  };
  let cp = spawn(process.argv[0], process.argv.slice(1), processOptions);
  cp.unref();
  process.exit(0);
};

exports.requireConfig = function (app, config, keys, prefix) {
  const {
    InvalidConfiguration
  } = require('./Errors');

  keys.forEach(key => {
    let value = _.get(config, key);

    if (_.isNil(value)) {
      throw new InvalidConfiguration(`Missing required config item "${key}".`, app, `${prefix}.${key}`);
    }
  });
};

exports.ensureFeatureName = name => {
  if (!name) throw new ApplicationError('This feature cannot be used in v1.x @genx/app.');
};

exports.scriptBaseName = fileName => path.basename(fileName, '.js');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9IZWxwZXJzLmpzIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwiQXBwbGljYXRpb25FcnJvciIsInBhdGgiLCJzcGF3biIsImV4cG9ydHMiLCJ3aXRoUHJvcHMiLCJCYXNlIiwiUHJvcHMiLCJjb25zdHJ1Y3RvciIsImFyZ3MiLCJPYmplY3QiLCJhc3NpZ24iLCJkZXBlbmRzT24iLCJmZWF0dXJlcyIsImFwcCIsImZyb21GZWF0dXJlIiwiaGFzTm90RW5hYmxlZCIsImZpbmQiLCJjYXN0QXJyYXkiLCJmZWF0dXJlIiwiZW5hYmxlZCIsIkVycm9yIiwicmVzdGFydCIsImVudlZhcmlhYmxlcyIsInByb2Nlc3NPcHRpb25zIiwiZW52IiwicHJvY2VzcyIsImRldGFjaGVkIiwic3RkaW8iLCJjcCIsImFyZ3YiLCJzbGljZSIsInVucmVmIiwiZXhpdCIsInJlcXVpcmVDb25maWciLCJjb25maWciLCJrZXlzIiwicHJlZml4IiwiSW52YWxpZENvbmZpZ3VyYXRpb24iLCJmb3JFYWNoIiwia2V5IiwidmFsdWUiLCJnZXQiLCJpc05pbCIsImVuc3VyZUZlYXR1cmVOYW1lIiwibmFtZSIsInNjcmlwdEJhc2VOYW1lIiwiZmlsZU5hbWUiLCJiYXNlbmFtZSJdLCJtYXBwaW5ncyI6Ijs7OztBQUtBLE1BQU07QUFBRUEsRUFBQUE7QUFBRixJQUFRQyxPQUFPLENBQUMsWUFBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBO0FBQUYsSUFBdUJELE9BQU8sQ0FBQyxhQUFELENBQXBDOztBQUNBLE1BQU1FLElBQUksR0FBR0YsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsTUFBTUcsS0FBSyxHQUFHSCxPQUFPLENBQUMsZUFBRCxDQUFQLENBQXlCRyxLQUF2Qzs7QUFRQUMsT0FBTyxDQUFDQyxTQUFSLEdBQW9CLENBQUNDLElBQUQsRUFBT0MsS0FBUCxLQUFpQixjQUFjRCxJQUFkLENBQW1CO0FBQ3BERSxFQUFBQSxXQUFXLENBQUMsR0FBR0MsSUFBSixFQUFVO0FBQ2pCLFVBQU0sR0FBR0EsSUFBVDtBQUVBQyxJQUFBQSxNQUFNLENBQUNDLE1BQVAsQ0FBYyxJQUFkLEVBQW9CSixLQUFwQjtBQUNIOztBQUxtRCxDQUF4RDs7QUFhQUgsT0FBTyxDQUFDUSxTQUFSLEdBQW9CLFVBQVVDLFFBQVYsRUFBb0JDLEdBQXBCLEVBQXlCQyxXQUF6QixFQUFzQztBQUN0RCxNQUFJQyxhQUFhLEdBQUdqQixDQUFDLENBQUNrQixJQUFGLENBQU9sQixDQUFDLENBQUNtQixTQUFGLENBQVlMLFFBQVosQ0FBUCxFQUE4Qk0sT0FBTyxJQUFJLENBQUNMLEdBQUcsQ0FBQ00sT0FBSixDQUFZRCxPQUFaLENBQTFDLENBQXBCOztBQUVBLE1BQUlILGFBQUosRUFBbUI7QUFDZixVQUFNLElBQUlLLEtBQUosQ0FBVyxJQUFHTixXQUFZLHVCQUFzQkMsYUFBYywwQkFBOUQsQ0FBTjtBQUNIO0FBQ0osQ0FORDs7QUFZQVosT0FBTyxDQUFDa0IsT0FBUixHQUFrQixVQUFVQyxZQUFWLEVBQXdCO0FBQ3RDLE1BQUlDLGNBQWMsR0FBRztBQUNqQkMsSUFBQUEsR0FBRyxFQUFFLEVBQUUsR0FBR0MsT0FBTyxDQUFDRCxHQUFiO0FBQWtCLFNBQUdGO0FBQXJCLEtBRFk7QUFFakJJLElBQUFBLFFBQVEsRUFBRSxJQUZPO0FBR2pCQyxJQUFBQSxLQUFLLEVBQUU7QUFIVSxHQUFyQjtBQU1BLE1BQUlDLEVBQUUsR0FBRzFCLEtBQUssQ0FBQ3VCLE9BQU8sQ0FBQ0ksSUFBUixDQUFhLENBQWIsQ0FBRCxFQUFrQkosT0FBTyxDQUFDSSxJQUFSLENBQWFDLEtBQWIsQ0FBbUIsQ0FBbkIsQ0FBbEIsRUFBeUNQLGNBQXpDLENBQWQ7QUFDQUssRUFBQUEsRUFBRSxDQUFDRyxLQUFIO0FBQ0FOLEVBQUFBLE9BQU8sQ0FBQ08sSUFBUixDQUFhLENBQWI7QUFDSCxDQVZEOztBQVlBN0IsT0FBTyxDQUFDOEIsYUFBUixHQUF3QixVQUFVcEIsR0FBVixFQUFlcUIsTUFBZixFQUF1QkMsSUFBdkIsRUFBNkJDLE1BQTdCLEVBQXFDO0FBQ3pELFFBQU07QUFBRUMsSUFBQUE7QUFBRixNQUEyQnRDLE9BQU8sQ0FBQyxVQUFELENBQXhDOztBQUVBb0MsRUFBQUEsSUFBSSxDQUFDRyxPQUFMLENBQWFDLEdBQUcsSUFBSTtBQUNoQixRQUFJQyxLQUFLLEdBQUcxQyxDQUFDLENBQUMyQyxHQUFGLENBQU1QLE1BQU4sRUFBY0ssR0FBZCxDQUFaOztBQUNBLFFBQUl6QyxDQUFDLENBQUM0QyxLQUFGLENBQVFGLEtBQVIsQ0FBSixFQUFvQjtBQUNoQixZQUFNLElBQUlILG9CQUFKLENBQTBCLGlDQUFnQ0UsR0FBSSxJQUE5RCxFQUFtRTFCLEdBQW5FLEVBQXlFLEdBQUV1QixNQUFPLElBQUdHLEdBQUksRUFBekYsQ0FBTjtBQUNIO0FBQ0osR0FMRDtBQU1ILENBVEQ7O0FBV0FwQyxPQUFPLENBQUN3QyxpQkFBUixHQUE0QkMsSUFBSSxJQUFJO0FBQ2hDLE1BQUksQ0FBQ0EsSUFBTCxFQUFXLE1BQU0sSUFBSTVDLGdCQUFKLENBQXFCLGdEQUFyQixDQUFOO0FBQ2QsQ0FGRDs7QUFJQUcsT0FBTyxDQUFDMEMsY0FBUixHQUEwQkMsUUFBRCxJQUFjN0MsSUFBSSxDQUFDOEMsUUFBTCxDQUFjRCxRQUFkLEVBQXdCLEtBQXhCLENBQXZDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb21tb24gaGVscGVycyBmb3Igc2VydmljZSBjb250YWluZXIuXG4gKiBAbW9kdWxlIEhlbHBlcnNcbiAqLyBcblxuY29uc3QgeyBfIH0gPSByZXF1aXJlKCdAZ2VueC9qdWx5Jyk7XG5jb25zdCB7IEFwcGxpY2F0aW9uRXJyb3IgfSA9IHJlcXVpcmUoJ0BnZW54L2Vycm9yJyk7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3Qgc3Bhd24gPSByZXF1aXJlKCdjaGlsZF9wcm9jZXNzJykuc3Bhd247XG5cbi8qKlxuICogUmV0dXJucyBhIG5ldyBjbGFzcyBtaXhpbmcgd2l0aCBnaXZlbiBwcm9wZXJ0aWVzIGFuZCBpbml0aWFsIHZhbHVlcy5cbiAqIEBtaXhpblxuICogQHBhcmFtIHsqfSBCYXNlIFxuICogQHBhcmFtIHtvYmplY3R9IFByb3BzIFxuICovXG5leHBvcnRzLndpdGhQcm9wcyA9IChCYXNlLCBQcm9wcykgPT4gY2xhc3MgZXh0ZW5kcyBCYXNlIHtcbiAgICBjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3MpO1xuXG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgUHJvcHMpO1xuICAgIH1cbn07XG5cbiAvKipcbiAgKiBAcGFyYW0ge3N0cmluZ3xhcnJheS48c3RyaW5nPn0gZmVhdHVyZXMgLSBEZXBlbmRlbmNpZXMgb2Ygb3RoZXIgZmVhdHVyZXMuXG4gICogQHBhcmFtIHtTZXJ2aWNlQ29udGFpbmVyfSBhcHAgLSBPcmlnaW4gc2VydmljZSBjb250YWluZXIgYXBwLlxuICAqIEBwYXJhbSB7c3RyaW5nfSBmcm9tRmVhdHVyZSAtIERlcGVuZGVudCBmZWF0dXJlLlxuICAqL1xuZXhwb3J0cy5kZXBlbmRzT24gPSBmdW5jdGlvbiAoZmVhdHVyZXMsIGFwcCwgZnJvbUZlYXR1cmUpIHtcbiAgICBsZXQgaGFzTm90RW5hYmxlZCA9IF8uZmluZChfLmNhc3RBcnJheShmZWF0dXJlcyksIGZlYXR1cmUgPT4gIWFwcC5lbmFibGVkKGZlYXR1cmUpKTtcblxuICAgIGlmIChoYXNOb3RFbmFibGVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgXCIke2Zyb21GZWF0dXJlfVwiIGZlYXR1cmUgcmVxdWlyZXMgXCIke2hhc05vdEVuYWJsZWR9XCIgZmVhdHVyZSB0byBiZSBlbmFibGVkLmApO1xuICAgIH1cbn07XG5cbi8qKlxuICogUmVzdGFydCB0aGUgY3VycmVudCBwcm9jZXNzLlxuICogQHBhcmFtIHtvYmplY3R9IGVudlZhcmlhYmxlcyAtIEVudmlyb25tZW50IHZhcmlhYmxlc1xuICovXG5leHBvcnRzLnJlc3RhcnQgPSBmdW5jdGlvbiAoZW52VmFyaWFibGVzKSB7XG4gICAgbGV0IHByb2Nlc3NPcHRpb25zID0geyAgICAgICAgXG4gICAgICAgIGVudjogeyAuLi5wcm9jZXNzLmVudiwgLi4uZW52VmFyaWFibGVzIH0sXG4gICAgICAgIGRldGFjaGVkOiB0cnVlLFxuICAgICAgICBzdGRpbzogJ2lnbm9yZSdcbiAgICB9O1xuXG4gICAgbGV0IGNwID0gc3Bhd24ocHJvY2Vzcy5hcmd2WzBdLCBwcm9jZXNzLmFyZ3Yuc2xpY2UoMSksIHByb2Nlc3NPcHRpb25zKTtcbiAgICBjcC51bnJlZigpO1xuICAgIHByb2Nlc3MuZXhpdCgwKTtcbn07XG5cbmV4cG9ydHMucmVxdWlyZUNvbmZpZyA9IGZ1bmN0aW9uIChhcHAsIGNvbmZpZywga2V5cywgcHJlZml4KSB7XG4gICAgY29uc3QgeyBJbnZhbGlkQ29uZmlndXJhdGlvbiB9ID0gcmVxdWlyZSgnLi9FcnJvcnMnKTtcblxuICAgIGtleXMuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBsZXQgdmFsdWUgPSBfLmdldChjb25maWcsIGtleSk7XG4gICAgICAgIGlmIChfLmlzTmlsKHZhbHVlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRDb25maWd1cmF0aW9uKGBNaXNzaW5nIHJlcXVpcmVkIGNvbmZpZyBpdGVtIFwiJHtrZXl9XCIuYCwgYXBwLCBgJHtwcmVmaXh9LiR7a2V5fWApO1xuICAgICAgICB9XG4gICAgfSlcbn07XG5cbmV4cG9ydHMuZW5zdXJlRmVhdHVyZU5hbWUgPSBuYW1lID0+IHtcbiAgICBpZiAoIW5hbWUpIHRocm93IG5ldyBBcHBsaWNhdGlvbkVycm9yKCdUaGlzIGZlYXR1cmUgY2Fubm90IGJlIHVzZWQgaW4gdjEueCBAZ2VueC9hcHAuJyk7XG59XG5cbmV4cG9ydHMuc2NyaXB0QmFzZU5hbWUgPSAoZmlsZU5hbWUpID0+IHBhdGguYmFzZW5hbWUoZmlsZU5hbWUsICcuanMnKTsiXX0=