"use strict";

require("source-map-support/register");

class GeneralError extends Error {
  constructor(message, info, status, code) {
    super(message);
    this.name = this.constructor.name;
    let typeOfInfo = typeof info;
    let typeOfStatus = typeof status;
    let typeOfCode = typeof code;

    if (typeOfCode === 'undefined') {
      if (typeOfStatus === 'string') {
        code = status;
        status = undefined;
        typeOfStatus = 'undefined';
      }
    }

    if (typeOfStatus === 'undefined') {
      if (typeOfInfo === 'number') {
        status = info;
        info = undefined;
      }

      if (typeOfCode === 'undefined' && typeOfInfo === 'string') {
        code = info;
        info = undefined;
      }
    }

    this.info = info;
    this.status = status;
    this.code = code;
  }

}

class ApplicationError extends GeneralError {
  constructor(message, info, code) {
    super(message, info, 500, code || 'E_APP');
  }

}

class RequestError extends GeneralError {
  constructor(message, info, code) {
    super(message, info, 400, code || 'E_REQ');
    this.expose = true;
  }

}

class InvalidConfiguration extends ApplicationError {
  constructor(message, app, item) {
    super(message, {
      app: app.name,
      configNode: item
    }, 'E_INVALID_CONF');
  }

}

exports.GeneralError = GeneralError;
exports.RequestError = RequestError;
exports.ApplicationError = ApplicationError;
exports.InvalidConfiguration = InvalidConfiguration;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9FcnJvcnMuanMiXSwibmFtZXMiOlsiR2VuZXJhbEVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsIm1lc3NhZ2UiLCJpbmZvIiwic3RhdHVzIiwiY29kZSIsIm5hbWUiLCJ0eXBlT2ZJbmZvIiwidHlwZU9mU3RhdHVzIiwidHlwZU9mQ29kZSIsInVuZGVmaW5lZCIsIkFwcGxpY2F0aW9uRXJyb3IiLCJSZXF1ZXN0RXJyb3IiLCJleHBvc2UiLCJJbnZhbGlkQ29uZmlndXJhdGlvbiIsImFwcCIsIml0ZW0iLCJjb25maWdOb2RlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFZQSxNQUFNQSxZQUFOLFNBQTJCQyxLQUEzQixDQUFpQztBQUM3QkMsRUFBQUEsV0FBVyxDQUFDQyxPQUFELEVBQVVDLElBQVYsRUFBZ0JDLE1BQWhCLEVBQXdCQyxJQUF4QixFQUE4QjtBQUNyQyxVQUFNSCxPQUFOO0FBRUEsU0FBS0ksSUFBTCxHQUFZLEtBQUtMLFdBQUwsQ0FBaUJLLElBQTdCO0FBQ0EsUUFBSUMsVUFBVSxHQUFHLE9BQU9KLElBQXhCO0FBQ0EsUUFBSUssWUFBWSxHQUFHLE9BQU9KLE1BQTFCO0FBQ0EsUUFBSUssVUFBVSxHQUFHLE9BQU9KLElBQXhCOztBQUVBLFFBQUlJLFVBQVUsS0FBSyxXQUFuQixFQUFnQztBQUM1QixVQUFJRCxZQUFZLEtBQUssUUFBckIsRUFBK0I7QUFDM0JILFFBQUFBLElBQUksR0FBR0QsTUFBUDtBQUNBQSxRQUFBQSxNQUFNLEdBQUdNLFNBQVQ7QUFDQUYsUUFBQUEsWUFBWSxHQUFHLFdBQWY7QUFDSDtBQUNKOztBQUVELFFBQUlBLFlBQVksS0FBSyxXQUFyQixFQUFrQztBQUM5QixVQUFJRCxVQUFVLEtBQUssUUFBbkIsRUFBNkI7QUFDekJILFFBQUFBLE1BQU0sR0FBR0QsSUFBVDtBQUNBQSxRQUFBQSxJQUFJLEdBQUdPLFNBQVA7QUFDSDs7QUFFRCxVQUFJRCxVQUFVLEtBQUssV0FBZixJQUE4QkYsVUFBVSxLQUFLLFFBQWpELEVBQTJEO0FBQ3ZERixRQUFBQSxJQUFJLEdBQUdGLElBQVA7QUFDQUEsUUFBQUEsSUFBSSxHQUFHTyxTQUFQO0FBQ0g7QUFDSjs7QUFNRCxTQUFLUCxJQUFMLEdBQVlBLElBQVo7QUFNQSxTQUFLQyxNQUFMLEdBQWNBLE1BQWQ7QUFNQSxTQUFLQyxJQUFMLEdBQVlBLElBQVo7QUFDSDs7QUE5QzRCOztBQXNEakMsTUFBTU0sZ0JBQU4sU0FBK0JaLFlBQS9CLENBQTRDO0FBTXhDRSxFQUFBQSxXQUFXLENBQUNDLE9BQUQsRUFBVUMsSUFBVixFQUFnQkUsSUFBaEIsRUFBc0I7QUFDN0IsVUFBTUgsT0FBTixFQUFlQyxJQUFmLEVBQXFCLEdBQXJCLEVBQTBCRSxJQUFJLElBQUksT0FBbEM7QUFDSDs7QUFSdUM7O0FBZ0I1QyxNQUFNTyxZQUFOLFNBQTJCYixZQUEzQixDQUF3QztBQU1wQ0UsRUFBQUEsV0FBVyxDQUFDQyxPQUFELEVBQVVDLElBQVYsRUFBZ0JFLElBQWhCLEVBQXNCO0FBQzdCLFVBQU1ILE9BQU4sRUFBZUMsSUFBZixFQUFxQixHQUFyQixFQUEwQkUsSUFBSSxJQUFJLE9BQWxDO0FBTUEsU0FBS1EsTUFBTCxHQUFjLElBQWQ7QUFDSDs7QUFkbUM7O0FBc0J4QyxNQUFNQyxvQkFBTixTQUFtQ0gsZ0JBQW5DLENBQW9EO0FBTWhEVixFQUFBQSxXQUFXLENBQUNDLE9BQUQsRUFBVWEsR0FBVixFQUFlQyxJQUFmLEVBQXFCO0FBQzVCLFVBQU1kLE9BQU4sRUFBZTtBQUFFYSxNQUFBQSxHQUFHLEVBQUVBLEdBQUcsQ0FBQ1QsSUFBWDtBQUFpQlcsTUFBQUEsVUFBVSxFQUFFRDtBQUE3QixLQUFmLEVBQW9ELGdCQUFwRDtBQUNIOztBQVIrQzs7QUFXcERFLE9BQU8sQ0FBQ25CLFlBQVIsR0FBdUJBLFlBQXZCO0FBQ0FtQixPQUFPLENBQUNOLFlBQVIsR0FBdUJBLFlBQXZCO0FBQ0FNLE9BQU8sQ0FBQ1AsZ0JBQVIsR0FBMkJBLGdCQUEzQjtBQUNBTyxPQUFPLENBQUNKLG9CQUFSLEdBQStCQSxvQkFBL0IiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBFcnJvciBkZWZpbml0aW9ucy5cbiAqIEBtb2R1bGUgRXJyb3JzXG4gKi9cblxuIC8qKlxuICogR2VuZXJhbCBlcnJvcnMgd2l0aCBlcnJvciBpbmZvLCBodHRwIHN0YXR1cyBhbmQgZXJyb3IgY29kZS5cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgRXJyb3IgIFxuICovXG5jbGFzcyBHZW5lcmFsRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgaW5mbywgc3RhdHVzLCBjb2RlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuXG4gICAgICAgIHRoaXMubmFtZSA9IHRoaXMuY29uc3RydWN0b3IubmFtZTtcbiAgICAgICAgbGV0IHR5cGVPZkluZm8gPSB0eXBlb2YgaW5mbztcbiAgICAgICAgbGV0IHR5cGVPZlN0YXR1cyA9IHR5cGVvZiBzdGF0dXM7XG4gICAgICAgIGxldCB0eXBlT2ZDb2RlID0gdHlwZW9mIGNvZGU7XG5cbiAgICAgICAgaWYgKHR5cGVPZkNvZGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBpZiAodHlwZU9mU3RhdHVzID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGNvZGUgPSBzdGF0dXM7XG4gICAgICAgICAgICAgICAgc3RhdHVzID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHR5cGVPZlN0YXR1cyA9ICd1bmRlZmluZWQnO1xuICAgICAgICAgICAgfSBcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlT2ZTdGF0dXMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBpZiAodHlwZU9mSW5mbyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICBzdGF0dXMgPSBpbmZvO1xuICAgICAgICAgICAgICAgIGluZm8gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlT2ZDb2RlID09PSAndW5kZWZpbmVkJyAmJiB0eXBlT2ZJbmZvID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGNvZGUgPSBpbmZvO1xuICAgICAgICAgICAgICAgIGluZm8gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gICAgICAgXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVycm9yIGluZm9ybWF0aW9uXG4gICAgICAgICAqIEBtZW1iZXIge29iamVjdH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaW5mbyA9IGluZm87XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEh0dHAgc3RhdHVzXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3RhdHVzID0gc3RhdHVzO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFcnJvciBjb2RlXG4gICAgICAgICAqIEBtZW1iZXIge3N0cmluZ31cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY29kZSA9IGNvZGU7ICAgICAgICBcbiAgICB9XG59XG5cbi8qKlxuICogQXBwbGljYXRpb24gZXJyb3JzLlxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBHZW5lcmFsRXJyb3IgIFxuICovXG5jbGFzcyBBcHBsaWNhdGlvbkVycm9yIGV4dGVuZHMgR2VuZXJhbEVycm9yIHtcbiAgICAvKiogICAgIFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIC0gRXJyb3IgbWVzc2FnZSAgICAgXG4gICAgICogQHBhcmFtIHsqfSBpbmZvXG4gICAgICogQHBhcmFtIHsqfSBjb2RlIFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGluZm8sIGNvZGUpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgaW5mbywgNTAwLCBjb2RlIHx8ICdFX0FQUCcpO1xuICAgIH1cbn0gXG5cbi8qKlxuICogUmVxdWVzdCBlcnJvcnMuXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIEdlbmVyYWxFcnJvciAgXG4gKi9cbmNsYXNzIFJlcXVlc3RFcnJvciBleHRlbmRzIEdlbmVyYWxFcnJvciB7XG4gICAgLyoqICAgICBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSAtIEVycm9yIG1lc3NhZ2UgICAgIFxuICAgICAqIEBwYXJhbSB7Kn0gaW5mb1xuICAgICAqIEBwYXJhbSB7Kn0gY29kZSBcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBpbmZvLCBjb2RlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsIGluZm8sIDQwMCwgY29kZSB8fCAnRV9SRVEnKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRmxhcyB0byBwYXNzIGRldGFpbGVkIGVycm9yIG1lc3NhZ2UgdG8gdGhlIGNsaWVudFxuICAgICAgICAgKiBAbWVtYmVyIHtzdHJpbmd9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmV4cG9zZSA9IHRydWU7XG4gICAgfVxufSBcblxuLyoqXG4gKiBFcnJvciBjYXVzZWQgYnkgaW52YWxpZCBjb25maWd1cmF0aW9uLlxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBBcHBsaWNhdGlvbkVycm9yICBcbiAqL1xuY2xhc3MgSW52YWxpZENvbmZpZ3VyYXRpb24gZXh0ZW5kcyBBcHBsaWNhdGlvbkVycm9yIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSAtIEVycm9yIG1lc3NhZ2VcbiAgICAgKiBAcGFyYW0ge0FwcH0gW2FwcF0gLSBUaGUgcmVsYXRlZCBhcHAgbW9kdWxlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtpdGVtXSAtIFRoZSByZWxhdGVkIGNvbmZpZyBpdGVtICAgXG4gICAgICovIFxuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGFwcCwgaXRlbSkgeyAgICAgICAgXG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsIHsgYXBwOiBhcHAubmFtZSwgY29uZmlnTm9kZTogaXRlbSB9LCAnRV9JTlZBTElEX0NPTkYnKTtcbiAgICB9XG59XG5cbmV4cG9ydHMuR2VuZXJhbEVycm9yID0gR2VuZXJhbEVycm9yO1xuZXhwb3J0cy5SZXF1ZXN0RXJyb3IgPSBSZXF1ZXN0RXJyb3I7XG5leHBvcnRzLkFwcGxpY2F0aW9uRXJyb3IgPSBBcHBsaWNhdGlvbkVycm9yO1xuZXhwb3J0cy5JbnZhbGlkQ29uZmlndXJhdGlvbiA9IEludmFsaWRDb25maWd1cmF0aW9uOyJdfQ==