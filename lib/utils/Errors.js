"use strict";

require("source-map-support/register");

const {
  withName,
  withExtraInfo,
  withExpose
} = require('./Helpers');

const RichInfoError = withExtraInfo(withName(Error));
const RequestError = withExpose(RichInfoError);

class ApplicationError extends RichInfoError {
  constructor(message, code, otherExtra) {
    if (arguments.length === 2 && typeof code === 'object') {
      otherExtra = code;
      code = undefined;
    } else if (code !== undefined && otherExtra && !('code' in otherExtra)) {
      otherExtra = Object.assign({}, otherExtra, {
        code
      });
    }

    super(message, otherExtra);

    if (code !== undefined) {
      this.code = code;
    }
  }

}

class InvalidConfiguration extends ApplicationError {
  constructor(message, app, item) {
    super(message, 'E_INVALID_CONFIG', {
      app: app.name,
      configNode: item
    });
  }

}

exports.RequestError = RequestError;
exports.ApplicationError = ApplicationError;
exports.RichInfoError = RichInfoError;
exports.InvalidConfiguration = InvalidConfiguration;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9FcnJvcnMuanMiXSwibmFtZXMiOlsid2l0aE5hbWUiLCJ3aXRoRXh0cmFJbmZvIiwid2l0aEV4cG9zZSIsInJlcXVpcmUiLCJSaWNoSW5mb0Vycm9yIiwiRXJyb3IiLCJSZXF1ZXN0RXJyb3IiLCJBcHBsaWNhdGlvbkVycm9yIiwiY29uc3RydWN0b3IiLCJtZXNzYWdlIiwiY29kZSIsIm90aGVyRXh0cmEiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJPYmplY3QiLCJhc3NpZ24iLCJJbnZhbGlkQ29uZmlndXJhdGlvbiIsImFwcCIsIml0ZW0iLCJuYW1lIiwiY29uZmlnTm9kZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBT0EsTUFBTTtBQUFFQSxFQUFBQSxRQUFGO0FBQVlDLEVBQUFBLGFBQVo7QUFBMkJDLEVBQUFBO0FBQTNCLElBQTBDQyxPQUFPLENBQUMsV0FBRCxDQUF2RDs7QUFFQSxNQUFNQyxhQUFhLEdBQUdILGFBQWEsQ0FBQ0QsUUFBUSxDQUFDSyxLQUFELENBQVQsQ0FBbkM7QUFDQSxNQUFNQyxZQUFZLEdBQUdKLFVBQVUsQ0FBQ0UsYUFBRCxDQUEvQjs7QUFPQSxNQUFNRyxnQkFBTixTQUErQkgsYUFBL0IsQ0FBNkM7QUFNekNJLEVBQUFBLFdBQVcsQ0FBQ0MsT0FBRCxFQUFVQyxJQUFWLEVBQWdCQyxVQUFoQixFQUE0QjtBQUNuQyxRQUFJQyxTQUFTLENBQUNDLE1BQVYsS0FBcUIsQ0FBckIsSUFBMEIsT0FBT0gsSUFBUCxLQUFnQixRQUE5QyxFQUF3RDtBQUNwREMsTUFBQUEsVUFBVSxHQUFHRCxJQUFiO0FBQ0FBLE1BQUFBLElBQUksR0FBR0ksU0FBUDtBQUNILEtBSEQsTUFHTyxJQUFJSixJQUFJLEtBQUtJLFNBQVQsSUFBc0JILFVBQXRCLElBQW9DLEVBQUUsVUFBVUEsVUFBWixDQUF4QyxFQUFpRTtBQUNwRUEsTUFBQUEsVUFBVSxHQUFHSSxNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCTCxVQUFsQixFQUE4QjtBQUFFRCxRQUFBQTtBQUFGLE9BQTlCLENBQWI7QUFDSDs7QUFFRCxVQUFNRCxPQUFOLEVBQWVFLFVBQWY7O0FBRUEsUUFBSUQsSUFBSSxLQUFLSSxTQUFiLEVBQXdCO0FBS3BCLFdBQUtKLElBQUwsR0FBWUEsSUFBWjtBQUNIO0FBQ0o7O0FBdkJ3Qzs7QUErQjdDLE1BQU1PLG9CQUFOLFNBQW1DVixnQkFBbkMsQ0FBb0Q7QUFNaERDLEVBQUFBLFdBQVcsQ0FBQ0MsT0FBRCxFQUFVUyxHQUFWLEVBQWVDLElBQWYsRUFBcUI7QUFDNUIsVUFBTVYsT0FBTixFQUFlLGtCQUFmLEVBQW1DO0FBQUVTLE1BQUFBLEdBQUcsRUFBRUEsR0FBRyxDQUFDRSxJQUFYO0FBQWlCQyxNQUFBQSxVQUFVLEVBQUVGO0FBQTdCLEtBQW5DO0FBQ0g7O0FBUitDOztBQVdwREcsT0FBTyxDQUFDaEIsWUFBUixHQUF1QkEsWUFBdkI7QUFDQWdCLE9BQU8sQ0FBQ2YsZ0JBQVIsR0FBMkJBLGdCQUEzQjtBQUNBZSxPQUFPLENBQUNsQixhQUFSLEdBQXdCQSxhQUF4QjtBQUNBa0IsT0FBTyxDQUFDTCxvQkFBUixHQUErQkEsb0JBQS9CIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogRXJyb3IgZGVmaW5pdGlvbnMuXG4gKiBAbW9kdWxlIEVycm9yc1xuICovXG5cbmNvbnN0IHsgd2l0aE5hbWUsIHdpdGhFeHRyYUluZm8sIHdpdGhFeHBvc2UgfSA9IHJlcXVpcmUoJy4vSGVscGVycycpO1xuXG5jb25zdCBSaWNoSW5mb0Vycm9yID0gd2l0aEV4dHJhSW5mbyh3aXRoTmFtZShFcnJvcikpO1xuY29uc3QgUmVxdWVzdEVycm9yID0gd2l0aEV4cG9zZShSaWNoSW5mb0Vycm9yKTtcblxuLyoqXG4gKiBFcnJvciBjYXVzZWQgYnkgYWxsIGtpbmRzIG9mIHJ1bnRpbWUgZXJyb3JzLlxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBSaWNoSW5mb0Vycm9yICBcbiAqL1xuY2xhc3MgQXBwbGljYXRpb25FcnJvciBleHRlbmRzIFJpY2hJbmZvRXJyb3Ige1xuICAgIC8qKiAgICAgXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgLSBFcnJvciBtZXNzYWdlXG4gICAgICogQHBhcmFtIHsqfSBjb2RlIFxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXJFeHRyYVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGNvZGUsIG90aGVyRXh0cmEpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIgJiYgdHlwZW9mIGNvZGUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBvdGhlckV4dHJhID0gY29kZTtcbiAgICAgICAgICAgIGNvZGUgPSB1bmRlZmluZWQ7ICAgICAgICAgICAgXG4gICAgICAgIH0gZWxzZSBpZiAoY29kZSAhPT0gdW5kZWZpbmVkICYmIG90aGVyRXh0cmEgJiYgISgnY29kZScgaW4gb3RoZXJFeHRyYSkpIHtcbiAgICAgICAgICAgIG90aGVyRXh0cmEgPSBPYmplY3QuYXNzaWduKHt9LCBvdGhlckV4dHJhLCB7IGNvZGUgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBzdXBlcihtZXNzYWdlLCBvdGhlckV4dHJhKTtcblxuICAgICAgICBpZiAoY29kZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEVycm9yIENvZGVcbiAgICAgICAgICAgICAqIEBtZW1iZXIge2ludGVnZXJ8c3RyaW5nfVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICAgICAgICB9XG4gICAgfVxufSBcblxuLyoqXG4gKiBFcnJvciBjYXVzZWQgYnkgaW52YWxpZCBjb25maWd1cmF0aW9uLlxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBBcHBsaWNhdGlvbkVycm9yICBcbiAqL1xuY2xhc3MgSW52YWxpZENvbmZpZ3VyYXRpb24gZXh0ZW5kcyBBcHBsaWNhdGlvbkVycm9yIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSAtIEVycm9yIG1lc3NhZ2VcbiAgICAgKiBAcGFyYW0ge0FwcH0gW2FwcF0gLSBUaGUgcmVsYXRlZCBhcHAgbW9kdWxlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtpdGVtXSAtIFRoZSByZWxhdGVkIGNvbmZpZyBpdGVtICAgXG4gICAgICovIFxuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGFwcCwgaXRlbSkgeyAgICAgICAgXG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsICdFX0lOVkFMSURfQ09ORklHJywgeyBhcHA6IGFwcC5uYW1lLCBjb25maWdOb2RlOiBpdGVtIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0cy5SZXF1ZXN0RXJyb3IgPSBSZXF1ZXN0RXJyb3I7XG5leHBvcnRzLkFwcGxpY2F0aW9uRXJyb3IgPSBBcHBsaWNhdGlvbkVycm9yO1xuZXhwb3J0cy5SaWNoSW5mb0Vycm9yID0gUmljaEluZm9FcnJvcjtcbmV4cG9ydHMuSW52YWxpZENvbmZpZ3VyYXRpb24gPSBJbnZhbGlkQ29uZmlndXJhdGlvbjsiXX0=