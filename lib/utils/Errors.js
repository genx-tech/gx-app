"use strict";

require("source-map-support/register");

const {
  withProps
} = require('./Helpers');

class GeneralError extends Error {
  constructor(message, info, status, code) {
    super(message);
    this.name = this.constructor.name;
    let typeOfInfo = typeof info;
    let typeOfStatus = typeof status;
    let typeOfCode = typeof code;

    if (typeOfCode === 'undefined') {
      if (typeOfStatus === 'string') {
        code = status;
        status = undefined;
        typeOfStatus = 'undefined';
      }
    }

    if (typeOfStatus === 'undefined') {
      if (typeOfInfo === 'number') {
        status = info;
        info = undefined;
      }

      if (typeOfCode === 'undefined' && typeOfInfo === 'string') {
        code = info;
        info = undefined;
      }
    }

    this.info = info;
    this.status = status;
    this.code = code;
  }

}

class ApplicationError extends GeneralError {
  constructor(message, info, code) {
    super(message, info, 500, code || 'E_APP');
  }

}

class InvalidConfiguration extends ApplicationError {
  constructor(message, app, item) {
    super(message, {
      app: app.name,
      configNode: item
    }, 'E_INVALID_CONF');
  }

}

class InvalidArgument extends ApplicationError {
  constructor(message, info) {
    super(message, info, 'E_INVALID_ARG');
  }

}

const ExposableError = withProps(GeneralError, {
  expose: true
});
exports.GeneralError = GeneralError;
exports.ApplicationError = ApplicationError;
exports.InvalidArgument = InvalidArgument;
exports.InvalidConfiguration = InvalidConfiguration;
exports.ExposableError = ExposableError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9FcnJvcnMuanMiXSwibmFtZXMiOlsid2l0aFByb3BzIiwicmVxdWlyZSIsIkdlbmVyYWxFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJtZXNzYWdlIiwiaW5mbyIsInN0YXR1cyIsImNvZGUiLCJuYW1lIiwidHlwZU9mSW5mbyIsInR5cGVPZlN0YXR1cyIsInR5cGVPZkNvZGUiLCJ1bmRlZmluZWQiLCJBcHBsaWNhdGlvbkVycm9yIiwiSW52YWxpZENvbmZpZ3VyYXRpb24iLCJhcHAiLCJpdGVtIiwiY29uZmlnTm9kZSIsIkludmFsaWRBcmd1bWVudCIsIkV4cG9zYWJsZUVycm9yIiwiZXhwb3NlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFPQyxNQUFNO0FBQUVBLEVBQUFBO0FBQUYsSUFBZ0JDLE9BQU8sQ0FBQyxXQUFELENBQTdCOztBQU9ELE1BQU1DLFlBQU4sU0FBMkJDLEtBQTNCLENBQWlDO0FBQzdCQyxFQUFBQSxXQUFXLENBQUNDLE9BQUQsRUFBVUMsSUFBVixFQUFnQkMsTUFBaEIsRUFBd0JDLElBQXhCLEVBQThCO0FBQ3JDLFVBQU1ILE9BQU47QUFFQSxTQUFLSSxJQUFMLEdBQVksS0FBS0wsV0FBTCxDQUFpQkssSUFBN0I7QUFDQSxRQUFJQyxVQUFVLEdBQUcsT0FBT0osSUFBeEI7QUFDQSxRQUFJSyxZQUFZLEdBQUcsT0FBT0osTUFBMUI7QUFDQSxRQUFJSyxVQUFVLEdBQUcsT0FBT0osSUFBeEI7O0FBRUEsUUFBSUksVUFBVSxLQUFLLFdBQW5CLEVBQWdDO0FBQzVCLFVBQUlELFlBQVksS0FBSyxRQUFyQixFQUErQjtBQUMzQkgsUUFBQUEsSUFBSSxHQUFHRCxNQUFQO0FBQ0FBLFFBQUFBLE1BQU0sR0FBR00sU0FBVDtBQUNBRixRQUFBQSxZQUFZLEdBQUcsV0FBZjtBQUNIO0FBQ0o7O0FBRUQsUUFBSUEsWUFBWSxLQUFLLFdBQXJCLEVBQWtDO0FBQzlCLFVBQUlELFVBQVUsS0FBSyxRQUFuQixFQUE2QjtBQUN6QkgsUUFBQUEsTUFBTSxHQUFHRCxJQUFUO0FBQ0FBLFFBQUFBLElBQUksR0FBR08sU0FBUDtBQUNIOztBQUVELFVBQUlELFVBQVUsS0FBSyxXQUFmLElBQThCRixVQUFVLEtBQUssUUFBakQsRUFBMkQ7QUFDdkRGLFFBQUFBLElBQUksR0FBR0YsSUFBUDtBQUNBQSxRQUFBQSxJQUFJLEdBQUdPLFNBQVA7QUFDSDtBQUNKOztBQU1ELFNBQUtQLElBQUwsR0FBWUEsSUFBWjtBQU1BLFNBQUtDLE1BQUwsR0FBY0EsTUFBZDtBQU1BLFNBQUtDLElBQUwsR0FBWUEsSUFBWjtBQUNIOztBQTlDNEI7O0FBc0RqQyxNQUFNTSxnQkFBTixTQUErQlosWUFBL0IsQ0FBNEM7QUFNeENFLEVBQUFBLFdBQVcsQ0FBQ0MsT0FBRCxFQUFVQyxJQUFWLEVBQWdCRSxJQUFoQixFQUFzQjtBQUM3QixVQUFNSCxPQUFOLEVBQWVDLElBQWYsRUFBcUIsR0FBckIsRUFBMEJFLElBQUksSUFBSSxPQUFsQztBQUNIOztBQVJ1Qzs7QUFnQjVDLE1BQU1PLG9CQUFOLFNBQW1DRCxnQkFBbkMsQ0FBb0Q7QUFNaERWLEVBQUFBLFdBQVcsQ0FBQ0MsT0FBRCxFQUFVVyxHQUFWLEVBQWVDLElBQWYsRUFBcUI7QUFDNUIsVUFBTVosT0FBTixFQUFlO0FBQUVXLE1BQUFBLEdBQUcsRUFBRUEsR0FBRyxDQUFDUCxJQUFYO0FBQWlCUyxNQUFBQSxVQUFVLEVBQUVEO0FBQTdCLEtBQWYsRUFBb0QsZ0JBQXBEO0FBQ0g7O0FBUitDOztBQWdCcEQsTUFBTUUsZUFBTixTQUE4QkwsZ0JBQTlCLENBQStDO0FBTTNDVixFQUFBQSxXQUFXLENBQUNDLE9BQUQsRUFBVUMsSUFBVixFQUFnQjtBQUN2QixVQUFNRCxPQUFOLEVBQWVDLElBQWYsRUFBcUIsZUFBckI7QUFDSDs7QUFSMEM7O0FBVy9DLE1BQU1jLGNBQWMsR0FBR3BCLFNBQVMsQ0FBQ0UsWUFBRCxFQUFlO0FBQUVtQixFQUFBQSxNQUFNLEVBQUU7QUFBVixDQUFmLENBQWhDO0FBRUFDLE9BQU8sQ0FBQ3BCLFlBQVIsR0FBdUJBLFlBQXZCO0FBQ0FvQixPQUFPLENBQUNSLGdCQUFSLEdBQTJCQSxnQkFBM0I7QUFDQVEsT0FBTyxDQUFDSCxlQUFSLEdBQTBCQSxlQUExQjtBQUNBRyxPQUFPLENBQUNQLG9CQUFSLEdBQStCQSxvQkFBL0I7QUFDQU8sT0FBTyxDQUFDRixjQUFSLEdBQXlCQSxjQUF6QiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEVycm9yIGRlZmluaXRpb25zLlxuICogQG1vZHVsZSBFcnJvcnNcbiAqL1xuXG4gY29uc3QgeyB3aXRoUHJvcHMgfSA9IHJlcXVpcmUoJy4vSGVscGVycycpO1xuXG4gLyoqXG4gKiBHZW5lcmFsIGVycm9ycyB3aXRoIGVycm9yIGluZm8sIGh0dHAgc3RhdHVzIGFuZCBlcnJvciBjb2RlLlxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBFcnJvciAgXG4gKi9cbmNsYXNzIEdlbmVyYWxFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBpbmZvLCBzdGF0dXMsIGNvZGUpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG5cbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgICAgICBsZXQgdHlwZU9mSW5mbyA9IHR5cGVvZiBpbmZvO1xuICAgICAgICBsZXQgdHlwZU9mU3RhdHVzID0gdHlwZW9mIHN0YXR1cztcbiAgICAgICAgbGV0IHR5cGVPZkNvZGUgPSB0eXBlb2YgY29kZTtcblxuICAgICAgICBpZiAodHlwZU9mQ29kZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGlmICh0eXBlT2ZTdGF0dXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgY29kZSA9IHN0YXR1cztcbiAgICAgICAgICAgICAgICBzdGF0dXMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgdHlwZU9mU3RhdHVzID0gJ3VuZGVmaW5lZCc7XG4gICAgICAgICAgICB9IFxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVPZlN0YXR1cyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGlmICh0eXBlT2ZJbmZvID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIHN0YXR1cyA9IGluZm87XG4gICAgICAgICAgICAgICAgaW5mbyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVPZkNvZGUgPT09ICd1bmRlZmluZWQnICYmIHR5cGVPZkluZm8gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgY29kZSA9IGluZm87XG4gICAgICAgICAgICAgICAgaW5mbyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSAgICAgICBcblxuICAgICAgICAvKipcbiAgICAgICAgICogRXJyb3IgaW5mb3JtYXRpb25cbiAgICAgICAgICogQG1lbWJlciB7b2JqZWN0fVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pbmZvID0gaW5mbztcblxuICAgICAgICAvKipcbiAgICAgICAgICogSHR0cCBzdGF0dXNcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVycm9yIGNvZGVcbiAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jb2RlID0gY29kZTsgICAgICAgIFxuICAgIH1cbn1cblxuLyoqXG4gKiBBcHBsaWNhdGlvbiBlcnJvcnMuXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIEdlbmVyYWxFcnJvciAgXG4gKi9cbmNsYXNzIEFwcGxpY2F0aW9uRXJyb3IgZXh0ZW5kcyBHZW5lcmFsRXJyb3Ige1xuICAgIC8qKiAgICAgXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgLSBFcnJvciBtZXNzYWdlICAgICBcbiAgICAgKiBAcGFyYW0geyp9IGluZm9cbiAgICAgKiBAcGFyYW0geyp9IGNvZGUgXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgaW5mbywgY29kZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlLCBpbmZvLCA1MDAsIGNvZGUgfHwgJ0VfQVBQJyk7XG4gICAgfVxufVxuXG4vKipcbiAqIEVycm9yIGNhdXNlZCBieSBpbnZhbGlkIGNvbmZpZ3VyYXRpb24uXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIEFwcGxpY2F0aW9uRXJyb3IgIFxuICovXG5jbGFzcyBJbnZhbGlkQ29uZmlndXJhdGlvbiBleHRlbmRzIEFwcGxpY2F0aW9uRXJyb3Ige1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIC0gRXJyb3IgbWVzc2FnZVxuICAgICAqIEBwYXJhbSB7QXBwfSBbYXBwXSAtIFRoZSByZWxhdGVkIGFwcCBtb2R1bGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2l0ZW1dIC0gVGhlIHJlbGF0ZWQgY29uZmlnIGl0ZW0gICBcbiAgICAgKi8gXG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgYXBwLCBpdGVtKSB7ICAgICAgICBcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgeyBhcHA6IGFwcC5uYW1lLCBjb25maWdOb2RlOiBpdGVtIH0sICdFX0lOVkFMSURfQ09ORicpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBFcnJvciBjYXVzZWQgYnkgaW52YWxpZCBmdW5jdGlvbiBhcmd1bWVudC4gTm90IHN1aXRhYmxlIGZvciBodHRwIHJlcXVlc3QsIHdoaWNoIHNob3VsZCB1c2UgUmVxdWVzdEVycm9yXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIEludmFsaWRBcmd1bWVudCAgXG4gKi9cbmNsYXNzIEludmFsaWRBcmd1bWVudCBleHRlbmRzIEFwcGxpY2F0aW9uRXJyb3Ige1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIC0gRXJyb3IgbWVzc2FnZVxuICAgICAqIEBwYXJhbSB7Kn0gW2luZm9dIC0gRXh0cmEgaW5mb1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbaXRlbV0gLSBUaGUgcmVsYXRlZCBjb25maWcgaXRlbSAgIFxuICAgICAqLyBcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBpbmZvKSB7ICAgICAgICBcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgaW5mbywgJ0VfSU5WQUxJRF9BUkcnKTtcbiAgICB9XG59XG5cbmNvbnN0IEV4cG9zYWJsZUVycm9yID0gd2l0aFByb3BzKEdlbmVyYWxFcnJvciwgeyBleHBvc2U6IHRydWUgfSk7XG5cbmV4cG9ydHMuR2VuZXJhbEVycm9yID0gR2VuZXJhbEVycm9yO1xuZXhwb3J0cy5BcHBsaWNhdGlvbkVycm9yID0gQXBwbGljYXRpb25FcnJvcjtcbmV4cG9ydHMuSW52YWxpZEFyZ3VtZW50ID0gSW52YWxpZEFyZ3VtZW50O1xuZXhwb3J0cy5JbnZhbGlkQ29uZmlndXJhdGlvbiA9IEludmFsaWRDb25maWd1cmF0aW9uO1xuZXhwb3J0cy5FeHBvc2FibGVFcnJvciA9IEV4cG9zYWJsZUVycm9yOyJdfQ==