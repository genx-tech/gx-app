{"version":3,"sources":["../src/ServiceContainer.js"],"names":["ConfigLoader","require","JsonConfigProvider","_","pushIntoBucket","eachAsync_","fs","tryRequire","_tryRequire","path","EventEmitter","winston","Feature","Literal","ServiceContainer","logError","error","message","logException","logErrorAsWarning","constructor","name","options","Object","assign","env","process","NODE_ENV","workingPath","resolve","cwd","configPath","toAbsolutePath","DEFAULT_CONFIG_PATH","configName","APP_CFG_NAME","start_","log","_featureRegistry","_getFeatureFallbackPath","features","services","loadConfigFromOptions","config","configLoader","disableEnvAwareConfig","join","createEnvAwareJsonLoader","loadConfig_","emit","isEmpty","Error","_loadFeatures_","started","stop_","emitAsync_","removeAllListeners","configVariables","_getConfigVariables","load_","args","length","pkgName","registerService","serviceObject","override","hasService","getService","enabled","feature","hasOwnProperty","addFeatureRegistry","registry","omit","level","rest","logger","summary","pick","replaceLogger","assert","_loggerBackup","_externalLoggerBackup","_externalLogger","processInfo","arch","argv","pid","platform","app","__dirname","FEATURES_PATH","featuresPath","event","asyncHandlers","Promise","all","configStageFeatures","forOwn","featureOptions","allowedFeatures","indexOf","_loadFeature","err","type","CONF","push","forEach","_loadFeatureGroup_","featureGroups","INIT","SERVICE","PLUGIN","READY","group","featureGroup","groupLevel","loaded","featureObject","featurePath","loadOption","Array","isArray","get","searchingPath","found","findLast","p","existsSync","validate","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst ConfigLoader = require(\"@genx/config\");\nconst JsonConfigProvider = require(\"@genx/config/lib/JsonConfigProvider\");\nconst { _, pushIntoBucket, eachAsync_ } = require(\"@genx/july\");\nconst { fs, tryRequire: _tryRequire } = require(\"@genx/sys\");\nconst path = require(\"path\");\nconst EventEmitter = require(\"events\");\nconst winston = require(\"winston\");\n\nconst Feature = require(\"./enum/Feature\");\nconst Literal = require(\"./enum/Literal\");\n\n/**\n * Service container class.\n * @class\n * @extends EventEmitter\n */\nclass ServiceContainer extends EventEmitter {\n    logError = (error, message) => {\n        return this.logException(\"error\", error, message);\n    };\n\n    logErrorAsWarning = (error, message) => {\n        return this.logException(\"warn\", error, message);\n    };\n\n    /**\n     * @param {string} name - The name of the container instance.\n     * @param {object} [options] - Container options\n     * @property {string} [options.env] - Environment, default to process.env.NODE_ENV\n     * @property {string} [options.workingPath] - App's working path, default to process.cwd()\n     * @property {string} [options.configPath] - App's config path, default to \"conf\" under workingPath\n     * @property {string} [options.configName] - App's config basename, default to \"app\"\n     * @property {string} [options.disableEnvAwareConfig=false] - Don't use environment-aware config\n     * @property {array} [options.allowedFeatures] - A list of enabled feature names\n     * @property {boolean} [options.loadConfigFromOptions=false] - Whether to load config from passed-in options\n     * @property {object} [options.config] - Config in options, used only when loadConfigFromOptions\n     */\n    constructor(name, options) {\n        super();\n\n        /**\n         * Name of the app\n         * @member {object}\n         **/\n        this.name = name;\n\n        /**\n         * App options\n         * @member {object}\n         */\n        this.options = Object.assign(\n            {\n                //... default options\n            },\n            options\n        );\n\n        /**\n         * Environment flag\n         * @member {string}\n         */\n        this.env = this.options.env || process.env.NODE_ENV || \"development\";\n\n        /**\n         * Working directory of this cli app\n         * @member {string}\n         */\n        this.workingPath = this.options.workingPath ? path.resolve(this.options.workingPath) : process.cwd();\n\n        /**\n         * Config path\n         * @member {string}\n         */\n        this.configPath = this.toAbsolutePath(this.options.configPath || Literal.DEFAULT_CONFIG_PATH);\n\n        /**\n         * Config basename\n         * @member {string}\n         */\n        this.configName = this.options.configName || Literal.APP_CFG_NAME;\n    }\n\n    /**\n     * Start the container.\n     * @fires ServiceContainer#configLoaded\n     * @fires ServiceContainer#ready\n     * @returns {Promise.<ServiceContainer>}\n     */\n    async start_() {\n        this.log(\"verbose\", `Starting app [${this.name}] ...`);\n\n        this._featureRegistry = {\n            //firstly look up \"features\" under current working path, and then try the builtin features path\n            \"*\": this._getFeatureFallbackPath(),\n        };\n        /**\n         * Loaded features, name => feature object\n         * @member {object}\n         */\n        this.features = {};\n        /**\n         * Loaded services\n         * @member {object}\n         */\n        this.services = {};\n\n        if (this.options.loadConfigFromOptions) {\n            this.config = this.options.config;\n        } else {\n            /**\n             * Configuration loader instance\n             * @member {ConfigLoader}\n             */\n            this.configLoader = this.options.disableEnvAwareConfig\n                ? new ConfigLoader(new JsonConfigProvider(path.join(this.configPath, this.configName + \".json\")), this)\n                : ConfigLoader.createEnvAwareJsonLoader(this.configPath, this.configName, this.env, this);\n\n            await this.loadConfig_();\n        }\n\n        /**\n         * Config loaded event.\n         * @event ServiceContainer#configLoaded\n         */\n        this.emit(\"configLoaded\");\n\n        if (_.isEmpty(this.config)) {\n            throw Error(\"Empty configuration. Nothing to do! Config path: \" + this.configPath);\n        }\n\n        await this._loadFeatures_();\n\n        /**\n         * App ready\n         * @event ServiceContainer#ready\n         */\n        this.emit(\"ready\");\n\n        /**\n         * Flag showing the app is started or not.\n         * @member {bool}\n         */\n        this.started = true;\n\n        return this;\n    }\n\n    /**\n     * Stop the container\n     * @fires ServiceContainer#stopping\n     * @returns {Promise.<ServiceContainer>}\n     */\n    async stop_() {\n        /**\n         * App stopping\n         * @event ServiceContainer#stopping\n         */\n        await this.emitAsync_(\"stopping\");\n\n        this.log(\"verbose\", `Stopping app [${this.name}] ...`);\n\n        this.started = false;\n\n        delete this.services;\n        delete this.features;\n        delete this._featureRegistry;\n\n        delete this.config;\n        delete this.configLoader;\n\n        await this.emitAsync_(\"stopped\");\n\n        this.removeAllListeners();\n    }\n\n    /**\n     * @returns {ServiceContainer}\n     */\n    async loadConfig_() {\n        let configVariables = this._getConfigVariables();\n\n        /**\n         * App configuration\n         * @member {object}\n         */\n        this.config = await this.configLoader.load_(configVariables);\n\n        return this;\n    }\n\n    /**\n     * Translate a relative path of this app module to an absolute path\n     * @param {array} args - Array of path parts\n     * @returns {string}\n     */\n    toAbsolutePath(...args) {\n        if (args.length === 0 || args[0] == null) {\n            return this.workingPath;\n        }\n\n        return path.resolve(this.workingPath, ...args);\n    }\n\n    tryRequire(pkgName) {\n        return _tryRequire(pkgName, this.workingPath);\n    }\n\n    /**\n     * Register a service\n     * @param {string} name\n     * @param {object} serviceObject\n     * @param {boolean} override\n     */\n    registerService(name, serviceObject, override) {\n        if (name in this.services && !override) {\n            throw new Error('Service \"' + name + '\" already registered!');\n        }\n\n        this.services[name] = serviceObject;\n        this.log(\"verbose\", `Service \"${name}\" registered.`);\n        return this;\n    }\n\n    /**\n     * Check whether a service exists\n     * @param {*} name\n     * @returns {boolean}\n     */\n    hasService(name) {\n        return name in this.services;\n    }\n\n    /**\n     * Get a service from module hierarchy\n     * @param name\n     * @returns {object}\n     */\n    getService(name) {\n        return this.services[name];\n    }\n\n    /**\n     * Check whether a feature is enabled in the app.\n     * @param {string} feature\n     * @returns {bool}\n     */\n    enabled(feature) {\n        return this.features.hasOwnProperty(feature);\n    }\n\n    /**\n     * Add more or overide current feature registry\n     * @param {object} registry\n     */\n    addFeatureRegistry(registry) {\n        // * is used as the fallback location to find a feature\n        if (registry.hasOwnProperty(\"*\")) {\n            pushIntoBucket(this._featureRegistry, \"*\", registry[\"*\"]);\n        }\n\n        Object.assign(this._featureRegistry, _.omit(registry, [\"*\"]));\n    }\n\n    /**\n     * Default log method, may be override by loggers feature\n     * @param {string} - Log level\n     * @param {string} - Log message\n     * @param {...object} - Extra meta data\n     * @returns {ServiceContainer}\n     */\n    log(level, message, ...rest) {\n        this.logger && this.logger.log(level, message, ...rest);\n        return this;\n    }\n\n    /**\n     * Helper method to log an exception\n     * @param {*} level\n     * @param {*} error\n     * @param {*} summary\n     * @returns {ServiceContainer}\n     */\n    logException(level, error, summary) {\n        this.log(\n            level,\n            (summary ? summary + \"\\n\" : \"\") + error.message,\n            _.pick(error, [\"name\", \"status\", \"code\", \"info\", \"stack\", \"request\"])\n        );\n        return this;\n    }\n\n    /**\n     * Replace the default logger set on creation of the app.\n     * @param {Logger} logger\n     * @memberof ServiceContainer\n     */\n    replaceLogger(logger) {\n        if (logger) {\n            assert: !this._loggerBackup;\n\n            this._loggerBackup = this.logger;\n            this._externalLoggerBackup = this._externalLogger;\n\n            this.logger = logger;\n            this._externalLogger = true;\n\n            this.log(\"verbose\", \"A new app logger attached.\");\n        } else {\n            this.logger = this._loggerBackup;\n            this._externalLogger = this._externalLoggerBackup;\n\n            delete this._loggerBackup;\n            delete this._externalLoggerBackup;\n\n            this.log(\"verbose\", \"The current app logger is dettached.\");\n        }\n    }\n\n    _getConfigVariables() {\n        const processInfo = {\n            env: process.env,\n            arch: process.arch,\n            argv: process.argv,\n            cwd: process.cwd(),\n            pid: process.pid,\n            platform: process.platform,\n        };\n\n        return {\n            app: this,\n            log: winston,\n            env: this.env,\n            process: processInfo\n        };\n    }\n\n    _getFeatureFallbackPath() {\n        return [\n            path.resolve(__dirname, Literal.FEATURES_PATH),\n            this.options.featuresPath\n                ? this.toAbsolutePath(this.options.featuresPath)\n                : this.toAbsolutePath(Literal.FEATURES_PATH),\n        ];\n    }\n\n    async emitAsync_(event) {\n        let asyncHandlers = [];\n        this.emit(event, asyncHandlers);\n        if (asyncHandlers.length > 0) {\n            await Promise.all(asyncHandlers);\n        }\n    }\n\n    /**\n     * Load features\n     * @private\n     * @returns {bool}\n     */\n    async _loadFeatures_() {\n        // run config stage separately first\n        let configStageFeatures = [];\n\n        // load features\n        _.forOwn(this.config, (featureOptions, name) => {\n            if (this.options.allowedFeatures && this.options.allowedFeatures.indexOf(name) === -1) {\n                //skip disabled features\n                return;\n            }\n\n            let feature;\n            try {\n                feature = this._loadFeature(name);\n            } catch (err) {\n                //ignore the first trial                \n            }\n\n            if (feature && feature.type === Feature.CONF) {\n                configStageFeatures.push([name, feature.load_, featureOptions]);\n                delete this.config[name];\n            }\n        });\n\n        if (configStageFeatures.length > 0) {\n            //configuration features will be overrided by newly loaded config\n            configStageFeatures.forEach(([name]) => {\n                delete this.config[name];\n            });\n\n            await this._loadFeatureGroup_(configStageFeatures, Feature.CONF);\n\n            //reload all features if any type of configuration feature exists\n            return this._loadFeatures_();\n        }\n\n        let featureGroups = {\n            [Feature.INIT]: [],\n            [Feature.SERVICE]: [],\n            [Feature.PLUGIN]: [],\n            [Feature.READY]: [],\n        };\n\n        // load features\n        _.forOwn(this.config, (featureOptions, name) => {\n            if (this.options.allowedFeatures && this.options.allowedFeatures.indexOf(name) === -1) {\n                //skip disabled features\n                return;\n            }\n\n            let feature = this._loadFeature(name);\n\n            if (!(feature.type in featureGroups)) {\n                throw new Error(`Invalid feature type. Feature: ${name}, type: ${feature.type}`);\n            }\n\n            featureGroups[feature.type].push([name, feature.load_, featureOptions]);\n        });\n\n        return eachAsync_(featureGroups, (group, level) => this._loadFeatureGroup_(group, level));\n    }\n\n    async _loadFeatureGroup_(featureGroup, groupLevel) {\n        await this.emitAsync_(\"before:\" + groupLevel);\n        this.log(\"verbose\", `Loading \"${groupLevel}\" feature group ...`);\n\n        await eachAsync_(featureGroup, async ([name, load_, options]) => {\n            await this.emitAsync_(\"before:load:\" + name);\n            this.log(\"verbose\", `Loading feature \"${name}\" ...`);\n\n            await load_(this, options, name);\n            this.features[name].loaded = true;\n\n            this.log(\"verbose\", `Feature \"${name}\" loaded. [OK]`);\n\n            await this.emitAsync_(\"after:load:\" + name);\n        });\n        this.log(\"verbose\", `Finished loading \"${groupLevel}\" feature group. [OK]`);\n\n        await this.emitAsync_(\"after:\" + groupLevel);\n    }\n\n    /**\n     * Load a feature object by name.\n     * @private\n     * @param {string} feature\n     * @returns {object}\n     */\n    _loadFeature(feature) {\n        let featureObject = this.features[feature];\n        if (featureObject) return featureObject;\n\n        let featurePath;\n\n        if (this._featureRegistry.hasOwnProperty(feature)) {\n            //load by registry entry\n            let loadOption = this._featureRegistry[feature];\n\n            if (Array.isArray(loadOption)) {\n                if (loadOption.length === 0) {\n                    throw new Error(`Invalid registry value for feature \"${feature}\".`);\n                }\n\n                featurePath = loadOption[0];\n                featureObject = this.tryRequire(featurePath);\n\n                if (loadOption.length > 1) {\n                    //one module may contains more than one feature\n                    featureObject = _.get(featureObject, loadOption[1]);\n                }\n            } else {\n                featurePath = loadOption;\n                featureObject = this.tryRequire(featurePath);\n            }\n        } else {\n            //load by fallback paths\n            let searchingPath = this._featureRegistry[\"*\"];\n\n            //reverse fallback stack\n            let found = _.findLast(searchingPath, (p) => {\n                featurePath = path.join(p, feature + \".js\");\n                return fs.existsSync(featurePath);\n            });\n\n            if (!found) {\n                throw new Error(`Don't know where to load feature \"${feature}\".`);\n            }\n\n            featureObject = require(featurePath);\n        }\n\n        if (!Feature.validate(featureObject)) {\n            throw new Error(`Invalid feature object loaded from \"${featurePath}\".`);\n        }\n\n        this.features[feature] = featureObject;\n        return featureObject;\n    }\n}\n\nmodule.exports = ServiceContainer;\n"],"file":"ServiceContainer.js"}