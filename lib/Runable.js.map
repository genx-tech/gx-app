{"version":3,"sources":["../src/Runable.js"],"names":["_","sleep_","eachAsync_","require","winston","winstonFlight","Logger","Runable","T","_getOnUncaughtException","exitOnError","err","waitForLogging","setTimeout","process","exit","log","clearTimeout","logError","_onWarning","warning","message","_onExit","code","started","stop_","catch","constructor","name","options","logger","format","combine","colorize","simple","exitOnUncaught","omit","start_","_initialize","on","libModules","lib","removeListener","_uninitialize","getLib","libName","Error","libModule","requireFromLib","relativePath","registerLib","resetLogger","_injectLogger","_pwd","cwd","workingPath","chdir","_injectErrorHandlers","detach","_externalLogger","close","loggerOpt","cloneDeep","transports","createLogger","_onUncaughtException","ignoreUncaught","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst { _, sleep_, eachAsync_ } = require('@genx/july');\n\nconst winston = require('winston');\nconst winstonFlight = require('winstonflight');\nconst Logger = require('winston/lib/winston/logger');\n\n/**\n * Runable app mixin. \n * @param {object} T - Base class.     \n * @returns {Runable} A runable app class.\n * @constructs Runable(T)\n */\nconst Runable = T => class extends T {\n    _getOnUncaughtException = exitOnError => err => {\n        if (exitOnError) {\n            //wait 1 second for flushing the last log\n            let waitForLogging = setTimeout(() => {\n                process.exit(1);\n            }, 1000);\n\n            this.log('error', err, () => {\n                clearTimeout(waitForLogging);\n                process.exit(1);\n            });\n        } else {\n            this.logError(err);\n        }\n    };        \n\n    _onWarning = warning => {\n        this.log('warn', warning.message);   \n    };\n\n    _onExit = code => {\n        if (this.started) {\n            this.stop_().catch(this.logError);\n        }           \n    };\n\n    /**                 \n     * @param {string} name - The name of the application.     \n     * @param {object} [options] - Application options     \n     * @property {object} [options.logger] - Logger options    \n     * @property {object} [options.ignoreUncaught=false] - Whether to skip the handling of uncaught exception\n     * @property {object} [options.exitOnUncaught=true] - Whether to exit process on uncaught exception thrown\n     * @constructs Runable\n     */\n    constructor(name, options) {\n        super(name, {\n            logger: {\n                \"useMetaKey\": \"metadata\",\n                \"level\": \"info\",\n                \"transports\": [\n                    {\n                        \"type\": \"console\",\n                        \"options\": {                            \n                            \"format\": winston.format.combine(winston.format.colorize(), winston.format.simple())\n                        }\n                    }\n                ],\n                ...(options && options.logger)\n            },\n            exitOnUncaught: true,\n            ..._.omit(options, ['logger'])\n        });        \n    }\n\n    /**\n     * Start the app     \n     * @returns {Promise}\n     * @memberof Runable\n     */\n    async start_() {        \n        this._initialize();\n\n        process.on('exit', this._onExit);\n        \n        return super.start_();\n    }\n\n    /**\n     * Stop the app\n     * @returns {Promise}\n     * @memberof Runable\n     */\n    async stop_() {\n        if (this.started) {            \n            if (this.libModules) {\n                await eachAsync_(this.libModules, lib => lib.stop_());\n                delete this.libModules;\n            }\n        }\n\n        process.removeListener('exit', this._onExit);\n\n        await super.stop_();\n\n        await sleep_(0);\n\n        this._uninitialize();\n    }\n\n    /**\n     * Get the lib module\n     * @param {string} libName \n     */\n    getLib(libName) {\n        if (!this.libModules) {\n            throw new Error('\"libModules\" feature is required to access lib among modules.');\n        }\n\n        let libModule = this.libModules[libName];\n        \n        if (!libModule) {\n            throw new Error(`Lib module [${libName}] not found.`);\n        }\n\n        return libModule;\n    }\n\n    /**\n     * Require a module from the source path of a library module\n     * @param {*} relativePath \n     */\n    requireFromLib(libName, relativePath) {\n        let libModule = this.getLib(libName);\n        return libModule.require(relativePath);\n    }\n\n    /**\n     * Register a loaded lib module\n     * @param {LibModule} lib \n     */\n    registerLib(lib) {\n        if (!this.libModules) {\n            this.libModules = {};\n        }\n\n        this.libModules[lib.name] = lib;\n    }\n\n    /**\n     * Reset logger. \n     * Use it only if the options.logger config is changed in runtime\n     */\n    resetLogger() {\n        this._injectLogger(true /** detach */);\n        this._injectLogger();\n    }\n\n    _initialize() {\n        this._pwd = process.cwd();\n        if (this.workingPath !== this._pwd) {                   \n            process.chdir(this.workingPath);\n        }      \n\n        this._injectLogger();\n        this._injectErrorHandlers(); \n    }\n\n    _uninitialize() {\n        const detach = true;\n        this._injectErrorHandlers(detach);       \n        this._injectLogger(detach);         \n\n        process.chdir(this._pwd);\n        delete this._pwd;\n    }\n\n    _injectLogger(detach) {\n        if (detach) {\n            this.log('verbose', 'Logger is detaching ...');\n\n            if (!this._externalLogger) {\n                this.logger.close();\n            }\n\n            delete this._externalLogger;\n            delete this.logger;\n            return;\n        }\n\n        if (this.options.logger instanceof Logger) {\n            this.logger = this.options.logger;\n            this._externalLogger = true;\n        } else {        \n            const loggerOpt = _.cloneDeep(this.options.logger)\n\n            if (loggerOpt.transports) {                \n                loggerOpt.transports = winstonFlight(winston, loggerOpt.transports);\n            }\n\n            this.logger = winston.createLogger(loggerOpt);   \n        }\n        \n        this.log('verbose', 'Logger injected.');            \n    }\n\n    _injectErrorHandlers(detach) {\n        if (detach) {            \n            process.removeListener('warning', this._onWarning);\n            if (this._onUncaughtException) {\n                process.removeListener('uncaughtException', this._onUncaughtException);\n                delete this._onUncaughtException;\n            }\n            this.log('verbose', 'Process-wide error handlers detached.');\n            return;\n        }\n\n        if (!this.options.ignoreUncaught) {\n            this._onUncaughtException = this._getOnUncaughtException(this.options.exitOnUncaught);\n            process.on('uncaughtException', this._onUncaughtException);     \n        }\n        \n        process.on('warning', this._onWarning);\n        this.log('verbose', 'Process-wide error handlers injected.');            \n    }\n};\n\nmodule.exports = Runable;"],"file":"Runable.js"}