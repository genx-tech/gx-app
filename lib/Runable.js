"use strict";

require("source-map-support/register");

const Util = require('rk-utils');

const {
  _,
  Promise
} = Util;

const winston = require('winston');

const winstonFlight = require('winstonflight');

const Logger = require('winston/lib/winston/logger');

const Runable = T => {
  var _temp;

  return _temp = class extends T {
    constructor(name, options) {
      super(name, {
        logger: {
          "useMetaKey": "metadata",
          "level": "info",
          "transports": [{
            "type": "console",
            "options": {
              "format": winston.format.combine(winston.format.colorize(), winston.format.simple())
            }
          }],
          ...(options && options.logger)
        },
        ..._.omit(options, ['logger'])
      });

      this._onUncaughtException = err => {
        let waitForLogging = setTimeout(() => {
          process.exit(1);
        }, 1000);
        this.log('error', err, () => {
          clearTimeout(waitForLogging);
          process.exit(1);
        });
      };

      this._onWarning = warning => {
        this.log('warn', warning.message);
      };

      this._onExit = code => {
        if (this.started) {
          this.stop_().catch(this.logError);
        }
      };
    }

    async start_() {
      this._initialize();

      process.on('exit', this._onExit);
      return super.start_();
    }

    async stop_() {
      process.removeListener('exit', this._onExit);
      await super.stop_();
      return new Promise((resolve, reject) => {
        setTimeout(() => {
          this._uninitialize();

          resolve(this);
        }, 0);
      });
    }

    replaceLogger(logger) {
      if (logger) {
        if (!!this._loggerBackup) {
          throw new Error("Assertion failed: !this._loggerBackup");
        }

        this._loggerBackup = this.logger;
        this._externalLoggerBackup = this._externalLogger;
        this.logger = logger;
        this._externalLogger = true;
        this.log('verbose', 'A new app logger attached.');
      } else {
        if (!this._loggerBackup) {
          throw new Error("Assertion failed: this._loggerBackup");
        }

        this.logger = this._loggerBackup;
        this._externalLogger = this._externalLoggerBackup;
        delete this._loggerBackup;
        delete this._externalLoggerBackup;
        this.log('verbose', 'The current app logger is dettached.');
      }
    }

    _initialize() {
      this._pwd = process.cwd();

      if (this.workingPath !== this._pwd) {
        process.chdir(this.workingPath);
      }

      this._injectLogger();

      this._injectErrorHandlers();
    }

    _uninitialize() {
      const detach = true;

      this._injectErrorHandlers(detach);

      this._injectLogger(detach);

      process.chdir(this._pwd);
      delete this._pwd;
    }

    _injectLogger(detach) {
      if (detach) {
        this.log('verbose', 'Logger is detaching ...');

        if (!this._externalLogger) {
          this.logger.close();
        }

        delete this._externalLogger;
        delete this.logger;
        return;
      }

      let loggerOpt = this.options.logger;

      if (loggerOpt instanceof Logger) {
        this.logger = loggerOpt;
        this._externalLogger = true;
      } else {
        if (loggerOpt.transports) {
          loggerOpt.transports = winstonFlight(winston, loggerOpt.transports);
        }

        this.logger = winston.createLogger(loggerOpt);
      }

      this.log('verbose', 'Logger injected.');
    }

    _injectErrorHandlers(detach) {
      if (detach) {
        this.log('verbose', 'Process-wide error handlers are detaching ...');
        process.removeListener('warning', this._onWarning);
        process.removeListener('uncaughtException', this._onUncaughtException);
        return;
      }

      process.on('uncaughtException', this._onUncaughtException);
      process.on('warning', this._onWarning);
      this.log('verbose', 'Process-wide error handlers injected.');
    }

  }, _temp;
};

module.exports = Runable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9SdW5hYmxlLmpzIl0sIm5hbWVzIjpbIlV0aWwiLCJyZXF1aXJlIiwiXyIsIlByb21pc2UiLCJ3aW5zdG9uIiwid2luc3RvbkZsaWdodCIsIkxvZ2dlciIsIlJ1bmFibGUiLCJUIiwiY29uc3RydWN0b3IiLCJuYW1lIiwib3B0aW9ucyIsImxvZ2dlciIsImZvcm1hdCIsImNvbWJpbmUiLCJjb2xvcml6ZSIsInNpbXBsZSIsIm9taXQiLCJfb25VbmNhdWdodEV4Y2VwdGlvbiIsImVyciIsIndhaXRGb3JMb2dnaW5nIiwic2V0VGltZW91dCIsInByb2Nlc3MiLCJleGl0IiwibG9nIiwiY2xlYXJUaW1lb3V0IiwiX29uV2FybmluZyIsIndhcm5pbmciLCJtZXNzYWdlIiwiX29uRXhpdCIsImNvZGUiLCJzdGFydGVkIiwic3RvcF8iLCJjYXRjaCIsImxvZ0Vycm9yIiwic3RhcnRfIiwiX2luaXRpYWxpemUiLCJvbiIsInJlbW92ZUxpc3RlbmVyIiwicmVzb2x2ZSIsInJlamVjdCIsIl91bmluaXRpYWxpemUiLCJyZXBsYWNlTG9nZ2VyIiwiX2xvZ2dlckJhY2t1cCIsIl9leHRlcm5hbExvZ2dlckJhY2t1cCIsIl9leHRlcm5hbExvZ2dlciIsIl9wd2QiLCJjd2QiLCJ3b3JraW5nUGF0aCIsImNoZGlyIiwiX2luamVjdExvZ2dlciIsIl9pbmplY3RFcnJvckhhbmRsZXJzIiwiZGV0YWNoIiwiY2xvc2UiLCJsb2dnZXJPcHQiLCJ0cmFuc3BvcnRzIiwiY3JlYXRlTG9nZ2VyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxVQUFELENBQXBCOztBQUNBLE1BQU07QUFBRUMsRUFBQUEsQ0FBRjtBQUFLQyxFQUFBQTtBQUFMLElBQWlCSCxJQUF2Qjs7QUFFQSxNQUFNSSxPQUFPLEdBQUdILE9BQU8sQ0FBQyxTQUFELENBQXZCOztBQUNBLE1BQU1JLGFBQWEsR0FBR0osT0FBTyxDQUFDLGVBQUQsQ0FBN0I7O0FBQ0EsTUFBTUssTUFBTSxHQUFHTCxPQUFPLENBQUMsNEJBQUQsQ0FBdEI7O0FBUUEsTUFBTU0sT0FBTyxHQUFHQyxDQUFDO0FBQUE7O0FBQUEsaUJBQUksY0FBY0EsQ0FBZCxDQUFnQjtBQTRCakNDLElBQUFBLFdBQVcsQ0FBQ0MsSUFBRCxFQUFPQyxPQUFQLEVBQWdCO0FBQ3ZCLFlBQU1ELElBQU4sRUFBWTtBQUNSRSxRQUFBQSxNQUFNLEVBQUU7QUFDSix3QkFBYyxVQURWO0FBRUosbUJBQVMsTUFGTDtBQUdKLHdCQUFjLENBQ1Y7QUFDSSxvQkFBUSxTQURaO0FBRUksdUJBQVc7QUFDUCx3QkFBVVIsT0FBTyxDQUFDUyxNQUFSLENBQWVDLE9BQWYsQ0FBdUJWLE9BQU8sQ0FBQ1MsTUFBUixDQUFlRSxRQUFmLEVBQXZCLEVBQWtEWCxPQUFPLENBQUNTLE1BQVIsQ0FBZUcsTUFBZixFQUFsRDtBQURIO0FBRmYsV0FEVSxDQUhWO0FBV0osY0FBSUwsT0FBTyxJQUFJQSxPQUFPLENBQUNDLE1BQXZCO0FBWEksU0FEQTtBQWNSLFdBQUdWLENBQUMsQ0FBQ2UsSUFBRixDQUFPTixPQUFQLEVBQWdCLENBQUMsUUFBRCxDQUFoQjtBQWRLLE9BQVo7O0FBRHVCLFdBM0IzQk8sb0JBMkIyQixHQTNCSkMsR0FBRyxJQUFJO0FBQzFCLFlBQUlDLGNBQWMsR0FBR0MsVUFBVSxDQUFDLE1BQU07QUFDbENDLFVBQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUFhLENBQWI7QUFDSCxTQUY4QixFQUU1QixJQUY0QixDQUEvQjtBQUlBLGFBQUtDLEdBQUwsQ0FBUyxPQUFULEVBQWtCTCxHQUFsQixFQUF1QixNQUFNO0FBQ3pCTSxVQUFBQSxZQUFZLENBQUNMLGNBQUQsQ0FBWjtBQUNBRSxVQUFBQSxPQUFPLENBQUNDLElBQVIsQ0FBYSxDQUFiO0FBQ0gsU0FIRDtBQUlILE9Ba0IwQjs7QUFBQSxXQWhCM0JHLFVBZ0IyQixHQWhCZEMsT0FBTyxJQUFJO0FBQ3BCLGFBQUtILEdBQUwsQ0FBUyxNQUFULEVBQWlCRyxPQUFPLENBQUNDLE9BQXpCO0FBQ0gsT0FjMEI7O0FBQUEsV0FaM0JDLE9BWTJCLEdBWmpCQyxJQUFJLElBQUk7QUFDZCxZQUFJLEtBQUtDLE9BQVQsRUFBa0I7QUFDZCxlQUFLQyxLQUFMLEdBQWFDLEtBQWIsQ0FBbUIsS0FBS0MsUUFBeEI7QUFDSDtBQUNKLE9BUTBCO0FBaUIxQjs7QUFPRCxVQUFNQyxNQUFOLEdBQWU7QUFDWCxXQUFLQyxXQUFMOztBQUVBZCxNQUFBQSxPQUFPLENBQUNlLEVBQVIsQ0FBVyxNQUFYLEVBQW1CLEtBQUtSLE9BQXhCO0FBRUEsYUFBTyxNQUFNTSxNQUFOLEVBQVA7QUFDSDs7QUFPRCxVQUFNSCxLQUFOLEdBQWM7QUFDVlYsTUFBQUEsT0FBTyxDQUFDZ0IsY0FBUixDQUF1QixNQUF2QixFQUErQixLQUFLVCxPQUFwQztBQUVBLFlBQU0sTUFBTUcsS0FBTixFQUFOO0FBRUEsYUFBTyxJQUFJN0IsT0FBSixDQUFZLENBQUNvQyxPQUFELEVBQVVDLE1BQVYsS0FBcUI7QUFFcENuQixRQUFBQSxVQUFVLENBQUMsTUFBTTtBQUNiLGVBQUtvQixhQUFMOztBQUVBRixVQUFBQSxPQUFPLENBQUMsSUFBRCxDQUFQO0FBQ0gsU0FKUyxFQUlQLENBSk8sQ0FBVjtBQUtILE9BUE0sQ0FBUDtBQVFIOztBQU9ERyxJQUFBQSxhQUFhLENBQUM5QixNQUFELEVBQVM7QUFDbEIsVUFBSUEsTUFBSixFQUFZO0FBQUEsYUFDQSxDQUFDLEtBQUsrQixhQUROO0FBQUE7QUFBQTs7QUFHUixhQUFLQSxhQUFMLEdBQXFCLEtBQUsvQixNQUExQjtBQUNBLGFBQUtnQyxxQkFBTCxHQUE2QixLQUFLQyxlQUFsQztBQUVBLGFBQUtqQyxNQUFMLEdBQWNBLE1BQWQ7QUFDQSxhQUFLaUMsZUFBTCxHQUF1QixJQUF2QjtBQUVBLGFBQUtyQixHQUFMLENBQVMsU0FBVCxFQUFvQiw0QkFBcEI7QUFDSCxPQVZELE1BVU87QUFBQSxhQUVLLEtBQUttQixhQUZWO0FBQUE7QUFBQTs7QUFJSCxhQUFLL0IsTUFBTCxHQUFjLEtBQUsrQixhQUFuQjtBQUNBLGFBQUtFLGVBQUwsR0FBdUIsS0FBS0QscUJBQTVCO0FBRUEsZUFBTyxLQUFLRCxhQUFaO0FBQ0EsZUFBTyxLQUFLQyxxQkFBWjtBQUVBLGFBQUtwQixHQUFMLENBQVMsU0FBVCxFQUFvQixzQ0FBcEI7QUFDSDtBQUNKOztBQUVEWSxJQUFBQSxXQUFXLEdBQUc7QUFDVixXQUFLVSxJQUFMLEdBQVl4QixPQUFPLENBQUN5QixHQUFSLEVBQVo7O0FBQ0EsVUFBSSxLQUFLQyxXQUFMLEtBQXFCLEtBQUtGLElBQTlCLEVBQW9DO0FBQ2hDeEIsUUFBQUEsT0FBTyxDQUFDMkIsS0FBUixDQUFjLEtBQUtELFdBQW5CO0FBQ0g7O0FBRUQsV0FBS0UsYUFBTDs7QUFDQSxXQUFLQyxvQkFBTDtBQUNIOztBQUVEVixJQUFBQSxhQUFhLEdBQUc7QUFDWixZQUFNVyxNQUFNLEdBQUcsSUFBZjs7QUFDQSxXQUFLRCxvQkFBTCxDQUEwQkMsTUFBMUI7O0FBQ0EsV0FBS0YsYUFBTCxDQUFtQkUsTUFBbkI7O0FBRUE5QixNQUFBQSxPQUFPLENBQUMyQixLQUFSLENBQWMsS0FBS0gsSUFBbkI7QUFDQSxhQUFPLEtBQUtBLElBQVo7QUFDSDs7QUFFREksSUFBQUEsYUFBYSxDQUFDRSxNQUFELEVBQVM7QUFDbEIsVUFBSUEsTUFBSixFQUFZO0FBQ1IsYUFBSzVCLEdBQUwsQ0FBUyxTQUFULEVBQW9CLHlCQUFwQjs7QUFFQSxZQUFJLENBQUMsS0FBS3FCLGVBQVYsRUFBMkI7QUFDdkIsZUFBS2pDLE1BQUwsQ0FBWXlDLEtBQVo7QUFDSDs7QUFFRCxlQUFPLEtBQUtSLGVBQVo7QUFDQSxlQUFPLEtBQUtqQyxNQUFaO0FBQ0E7QUFDSDs7QUFFRCxVQUFJMEMsU0FBUyxHQUFHLEtBQUszQyxPQUFMLENBQWFDLE1BQTdCOztBQUVBLFVBQUkwQyxTQUFTLFlBQVloRCxNQUF6QixFQUFpQztBQUM3QixhQUFLTSxNQUFMLEdBQWMwQyxTQUFkO0FBQ0EsYUFBS1QsZUFBTCxHQUF1QixJQUF2QjtBQUNILE9BSEQsTUFHTztBQUNILFlBQUlTLFNBQVMsQ0FBQ0MsVUFBZCxFQUEwQjtBQUN0QkQsVUFBQUEsU0FBUyxDQUFDQyxVQUFWLEdBQXVCbEQsYUFBYSxDQUFDRCxPQUFELEVBQVVrRCxTQUFTLENBQUNDLFVBQXBCLENBQXBDO0FBQ0g7O0FBRUQsYUFBSzNDLE1BQUwsR0FBY1IsT0FBTyxDQUFDb0QsWUFBUixDQUFxQkYsU0FBckIsQ0FBZDtBQUNIOztBQUVELFdBQUs5QixHQUFMLENBQVMsU0FBVCxFQUFvQixrQkFBcEI7QUFDSDs7QUFFRDJCLElBQUFBLG9CQUFvQixDQUFDQyxNQUFELEVBQVM7QUFDekIsVUFBSUEsTUFBSixFQUFZO0FBQ1IsYUFBSzVCLEdBQUwsQ0FBUyxTQUFULEVBQW9CLCtDQUFwQjtBQUNBRixRQUFBQSxPQUFPLENBQUNnQixjQUFSLENBQXVCLFNBQXZCLEVBQWtDLEtBQUtaLFVBQXZDO0FBQ0FKLFFBQUFBLE9BQU8sQ0FBQ2dCLGNBQVIsQ0FBdUIsbUJBQXZCLEVBQTRDLEtBQUtwQixvQkFBakQ7QUFDQTtBQUNIOztBQUVESSxNQUFBQSxPQUFPLENBQUNlLEVBQVIsQ0FBVyxtQkFBWCxFQUFnQyxLQUFLbkIsb0JBQXJDO0FBQ0FJLE1BQUFBLE9BQU8sQ0FBQ2UsRUFBUixDQUFXLFNBQVgsRUFBc0IsS0FBS1gsVUFBM0I7QUFDQSxXQUFLRixHQUFMLENBQVMsU0FBVCxFQUFvQix1Q0FBcEI7QUFDSDs7QUF6S2dDLEdBQXBCO0FBQUEsQ0FBakI7O0FBNEtBaUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCbkQsT0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgVXRpbCA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCB7IF8sIFByb21pc2UgfSA9IFV0aWw7XG5cbmNvbnN0IHdpbnN0b24gPSByZXF1aXJlKCd3aW5zdG9uJyk7XG5jb25zdCB3aW5zdG9uRmxpZ2h0ID0gcmVxdWlyZSgnd2luc3RvbmZsaWdodCcpO1xuY29uc3QgTG9nZ2VyID0gcmVxdWlyZSgnd2luc3Rvbi9saWIvd2luc3Rvbi9sb2dnZXInKTtcblxuLyoqXG4gKiBSdW5hYmxlIGFwcCBtaXhpbi4gXG4gKiBAcGFyYW0ge29iamVjdH0gVCAtIEJhc2UgY2xhc3MuICAgICBcbiAqIEByZXR1cm5zIHtSdW5hYmxlfSBBIHJ1bmFibGUgYXBwIGNsYXNzLlxuICogQGNvbnN0cnVjdHMgUnVuYWJsZShUKVxuICovXG5jb25zdCBSdW5hYmxlID0gVCA9PiBjbGFzcyBleHRlbmRzIFQge1xuICAgIF9vblVuY2F1Z2h0RXhjZXB0aW9uID0gZXJyID0+IHtcbiAgICAgICAgbGV0IHdhaXRGb3JMb2dnaW5nID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgICAgIH0sIDEwMDApO1xuXG4gICAgICAgIHRoaXMubG9nKCdlcnJvcicsIGVyciwgKCkgPT4ge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHdhaXRGb3JMb2dnaW5nKTtcbiAgICAgICAgICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgICAgICAgfSk7XG4gICAgfTsgICAgICAgIFxuXG4gICAgX29uV2FybmluZyA9IHdhcm5pbmcgPT4ge1xuICAgICAgICB0aGlzLmxvZygnd2FybicsIHdhcm5pbmcubWVzc2FnZSk7ICAgXG4gICAgfTtcblxuICAgIF9vbkV4aXQgPSBjb2RlID0+IHtcbiAgICAgICAgaWYgKHRoaXMuc3RhcnRlZCkge1xuICAgICAgICAgICAgdGhpcy5zdG9wXygpLmNhdGNoKHRoaXMubG9nRXJyb3IpO1xuICAgICAgICB9ICAgICAgICAgICBcbiAgICB9O1xuXG4gICAgLyoqICAgICAgICAgICAgICAgICBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBhcHBsaWNhdGlvbi4gICAgIFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gLSBBcHBsaWNhdGlvbiBvcHRpb25zICAgICBcbiAgICAgKiBAcHJvcGVydHkge29iamVjdH0gW29wdGlvbnMubG9nZ2VyXSAtIExvZ2dlciBvcHRpb25zICAgIFxuICAgICAqIEBjb25zdHJ1Y3RzIFJ1bmFibGVcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG5hbWUsIHtcbiAgICAgICAgICAgIGxvZ2dlcjoge1xuICAgICAgICAgICAgICAgIFwidXNlTWV0YUtleVwiOiBcIm1ldGFkYXRhXCIsXG4gICAgICAgICAgICAgICAgXCJsZXZlbFwiOiBcImluZm9cIixcbiAgICAgICAgICAgICAgICBcInRyYW5zcG9ydHNcIjogW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJjb25zb2xlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIm9wdGlvbnNcIjogeyAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImZvcm1hdFwiOiB3aW5zdG9uLmZvcm1hdC5jb21iaW5lKHdpbnN0b24uZm9ybWF0LmNvbG9yaXplKCksIHdpbnN0b24uZm9ybWF0LnNpbXBsZSgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAuLi4ob3B0aW9ucyAmJiBvcHRpb25zLmxvZ2dlcilcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAuLi5fLm9taXQob3B0aW9ucywgWydsb2dnZXInXSlcbiAgICAgICAgfSk7ICAgICAgICBcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdGFydCB0aGUgYXBwICAgICBcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICAgKiBAbWVtYmVyb2YgUnVuYWJsZVxuICAgICAqL1xuICAgIGFzeW5jIHN0YXJ0XygpIHsgICAgICAgIFxuICAgICAgICB0aGlzLl9pbml0aWFsaXplKCk7XG5cbiAgICAgICAgcHJvY2Vzcy5vbignZXhpdCcsIHRoaXMuX29uRXhpdCk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gc3VwZXIuc3RhcnRfKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RvcCB0aGUgYXBwXG4gICAgICogQHJldHVybnMge1Byb21pc2V9XG4gICAgICogQG1lbWJlcm9mIFJ1bmFibGVcbiAgICAgKi9cbiAgICBhc3luYyBzdG9wXygpIHtcbiAgICAgICAgcHJvY2Vzcy5yZW1vdmVMaXN0ZW5lcignZXhpdCcsIHRoaXMuX29uRXhpdCk7XG5cbiAgICAgICAgYXdhaXQgc3VwZXIuc3RvcF8oKTtcblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgLy9kZWZlcnJlZCBleGVjdXRpb25cbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX3VuaW5pdGlhbGl6ZSgpO1xuXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh0aGlzKTtcbiAgICAgICAgICAgIH0sIDApO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBsYWNlIHRoZSBkZWZhdWx0IGxvZ2dlciBzZXQgb24gY3JlYXRpb24gb2YgdGhlIGFwcC5cbiAgICAgKiBAcGFyYW0ge0xvZ2dlcn0gbG9nZ2VyIFxuICAgICAqIEBtZW1iZXJvZiBSdW5hYmxlXG4gICAgICovXG4gICAgcmVwbGFjZUxvZ2dlcihsb2dnZXIpIHtcbiAgICAgICAgaWYgKGxvZ2dlcikge1xuICAgICAgICAgICAgYXNzZXJ0OiAhdGhpcy5fbG9nZ2VyQmFja3VwO1xuXG4gICAgICAgICAgICB0aGlzLl9sb2dnZXJCYWNrdXAgPSB0aGlzLmxvZ2dlcjtcbiAgICAgICAgICAgIHRoaXMuX2V4dGVybmFsTG9nZ2VyQmFja3VwID0gdGhpcy5fZXh0ZXJuYWxMb2dnZXI7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyO1xuICAgICAgICAgICAgdGhpcy5fZXh0ZXJuYWxMb2dnZXIgPSB0cnVlO1xuXG4gICAgICAgICAgICB0aGlzLmxvZygndmVyYm9zZScsICdBIG5ldyBhcHAgbG9nZ2VyIGF0dGFjaGVkLicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy9yZXBsYWNlIGJhY2tcbiAgICAgICAgICAgIGFzc2VydDogdGhpcy5fbG9nZ2VyQmFja3VwO1xuXG4gICAgICAgICAgICB0aGlzLmxvZ2dlciA9IHRoaXMuX2xvZ2dlckJhY2t1cDtcbiAgICAgICAgICAgIHRoaXMuX2V4dGVybmFsTG9nZ2VyID0gdGhpcy5fZXh0ZXJuYWxMb2dnZXJCYWNrdXA7XG5cbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9sb2dnZXJCYWNrdXA7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fZXh0ZXJuYWxMb2dnZXJCYWNrdXA7XG5cbiAgICAgICAgICAgIHRoaXMubG9nKCd2ZXJib3NlJywgJ1RoZSBjdXJyZW50IGFwcCBsb2dnZXIgaXMgZGV0dGFjaGVkLicpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2luaXRpYWxpemUoKSB7XG4gICAgICAgIHRoaXMuX3B3ZCA9IHByb2Nlc3MuY3dkKCk7XG4gICAgICAgIGlmICh0aGlzLndvcmtpbmdQYXRoICE9PSB0aGlzLl9wd2QpIHsgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBwcm9jZXNzLmNoZGlyKHRoaXMud29ya2luZ1BhdGgpO1xuICAgICAgICB9ICAgICAgXG5cbiAgICAgICAgdGhpcy5faW5qZWN0TG9nZ2VyKCk7XG4gICAgICAgIHRoaXMuX2luamVjdEVycm9ySGFuZGxlcnMoKTsgXG4gICAgfVxuXG4gICAgX3VuaW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgY29uc3QgZGV0YWNoID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5faW5qZWN0RXJyb3JIYW5kbGVycyhkZXRhY2gpOyAgICAgICBcbiAgICAgICAgdGhpcy5faW5qZWN0TG9nZ2VyKGRldGFjaCk7ICAgICAgICAgXG5cbiAgICAgICAgcHJvY2Vzcy5jaGRpcih0aGlzLl9wd2QpO1xuICAgICAgICBkZWxldGUgdGhpcy5fcHdkO1xuICAgIH1cblxuICAgIF9pbmplY3RMb2dnZXIoZGV0YWNoKSB7XG4gICAgICAgIGlmIChkZXRhY2gpIHtcbiAgICAgICAgICAgIHRoaXMubG9nKCd2ZXJib3NlJywgJ0xvZ2dlciBpcyBkZXRhY2hpbmcgLi4uJyk7XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5fZXh0ZXJuYWxMb2dnZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fZXh0ZXJuYWxMb2dnZXI7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5sb2dnZXI7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbG9nZ2VyT3B0ID0gdGhpcy5vcHRpb25zLmxvZ2dlcjtcblxuICAgICAgICBpZiAobG9nZ2VyT3B0IGluc3RhbmNlb2YgTG9nZ2VyKSB7XG4gICAgICAgICAgICB0aGlzLmxvZ2dlciA9IGxvZ2dlck9wdDtcbiAgICAgICAgICAgIHRoaXMuX2V4dGVybmFsTG9nZ2VyID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChsb2dnZXJPcHQudHJhbnNwb3J0cykge1xuICAgICAgICAgICAgICAgIGxvZ2dlck9wdC50cmFuc3BvcnRzID0gd2luc3RvbkZsaWdodCh3aW5zdG9uLCBsb2dnZXJPcHQudHJhbnNwb3J0cyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMubG9nZ2VyID0gd2luc3Rvbi5jcmVhdGVMb2dnZXIobG9nZ2VyT3B0KTsgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5sb2coJ3ZlcmJvc2UnLCAnTG9nZ2VyIGluamVjdGVkLicpOyAgICAgICAgICAgIFxuICAgIH1cblxuICAgIF9pbmplY3RFcnJvckhhbmRsZXJzKGRldGFjaCkge1xuICAgICAgICBpZiAoZGV0YWNoKSB7XG4gICAgICAgICAgICB0aGlzLmxvZygndmVyYm9zZScsICdQcm9jZXNzLXdpZGUgZXJyb3IgaGFuZGxlcnMgYXJlIGRldGFjaGluZyAuLi4nKTtcbiAgICAgICAgICAgIHByb2Nlc3MucmVtb3ZlTGlzdGVuZXIoJ3dhcm5pbmcnLCB0aGlzLl9vbldhcm5pbmcpO1xuICAgICAgICAgICAgcHJvY2Vzcy5yZW1vdmVMaXN0ZW5lcigndW5jYXVnaHRFeGNlcHRpb24nLCB0aGlzLl9vblVuY2F1Z2h0RXhjZXB0aW9uKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb2Nlc3Mub24oJ3VuY2F1Z2h0RXhjZXB0aW9uJywgdGhpcy5fb25VbmNhdWdodEV4Y2VwdGlvbik7IFxuICAgICAgICBwcm9jZXNzLm9uKCd3YXJuaW5nJywgdGhpcy5fb25XYXJuaW5nKTtcbiAgICAgICAgdGhpcy5sb2coJ3ZlcmJvc2UnLCAnUHJvY2Vzcy13aWRlIGVycm9yIGhhbmRsZXJzIGluamVjdGVkLicpOyAgICAgICAgICAgIFxuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUnVuYWJsZTsiXX0=