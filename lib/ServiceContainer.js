"use strict";

require("source-map-support/register");

const Util = require('rk-utils');

const ConfigLoader = require('rk-config');

const JsonConfigProvider = require('rk-config/lib/JsonConfigProvider');

const {
  _,
  fs,
  Promise
} = Util;

const path = require('path');

const EventEmitter = require('events');

const winston = require('winston');

const Feature = require('./enum/Feature');

const Literal = require('./enum/Literal');

class ServiceContainer extends EventEmitter {
  constructor(name, options) {
    super();

    this.logError = (error, message) => {
      return this.logger && this.logger.logError(error, message);
    };

    this.name = name;
    this.options = Object.assign({}, options);
    this.env = this.options.env || process.env.NODE_ENV || "development";
    this.workingPath = this.options.workingPath ? path.resolve(this.options.workingPath) : process.cwd();
    this.configPath = this.toAbsolutePath(this.options.configPath || Literal.DEFAULT_CONFIG_PATH);
    this.configName = this.options.configName || Literal.APP_CFG_NAME;
  }

  async start_() {
    this._featureRegistry = {
      '*': this._getFeatureFallbackPath()
    };
    this.features = {};
    this.services = {};

    if (this.options.loadConfigFromOptions) {
      this.config = this.options.config;
    } else {
      this.configLoader = this.options.disableEnvAwareConfig ? new ConfigLoader(new JsonConfigProvider(path.join(this.configPath, this.configName + '.json')), this) : ConfigLoader.createEnvAwareJsonLoader(this.configPath, this.configName, this.env, this);
      await this.loadConfig_();
    }

    this.emit('configLoaded');

    if (_.isEmpty(this.config)) {
      throw Error('Empty configuration. Nothing to do! Config path: ' + this.configPath);
    }

    await this._loadFeatures_();
    this.emit('ready');
    this.started = true;
    return this;
  }

  async stop_() {
    await this.emitAsync_('stopping');
    this.started = false;
    delete this.services;
    delete this.features;
    delete this._featureRegistry;
    delete this.config;
    delete this.configLoader;
  }

  async loadConfig_() {
    let configVariables = this._getConfigVariables();

    this.config = await this.configLoader.load_(configVariables);
    return this;
  }

  toAbsolutePath(...args) {
    if (args.length === 0) {
      return this.workingPath;
    }

    return path.resolve(this.workingPath, ...args);
  }

  registerService(name, serviceObject, override) {
    if (name in this.services && !override) {
      throw new Error('Service "' + name + '" already registered!');
    }

    this.services[name] = serviceObject;
    this.log('verbose', `Service "${name}" registered.`);
    return this;
  }

  hasService(name) {
    return name in this.services;
  }

  getService(name) {
    return this.services[name];
  }

  enabled(feature) {
    return this.features.hasOwnProperty(feature);
  }

  addFeatureRegistry(registry) {
    if (registry.hasOwnProperty('*')) {
      Util.putIntoBucket(this._featureRegistry, '*', registry['*']);
    }

    Object.assign(this._featureRegistry, _.omit(registry, ['*']));
  }

  log(level, message, ...rest) {
    this.logger && this.logger.log(level, message, ...rest);
    return this;
  }

  _getConfigVariables() {
    return {
      'app': this,
      'log': winston,
      'env': this.env
    };
  }

  _getFeatureFallbackPath() {
    return [path.resolve(__dirname, Literal.FEATURES_PATH), this.toAbsolutePath(Literal.FEATURES_PATH)];
  }

  async emitAsync_(event) {
    let asyncHandlers = [];
    this.emit(event, asyncHandlers);

    if (asyncHandlers.length > 0) {
      await Promise.all(asyncHandlers);
    }
  }

  async _loadFeatures_() {
    let configStageFeatures = [];

    _.forOwn(this.config, (featureOptions, name) => {
      if (this.options.allowedFeatures && this.options.allowedFeatures.indexOf(name) === -1) {
        return;
      }

      let feature;

      try {
        feature = this._loadFeature(name);
      } catch (err) {
        console.error(err);
      }

      if (feature && feature.type === Feature.CONF) {
        configStageFeatures.push([name, feature.load_, featureOptions]);
        delete this.config[name];
      }
    });

    if (configStageFeatures.length > 0) {
      configStageFeatures.forEach(([name]) => {
        delete this.config[name];
      });
      await this._loadFeatureGroup_(configStageFeatures, Feature.CONF);
      return this._loadFeatures_();
    }

    let featureGroups = {
      [Feature.INIT]: [],
      [Feature.SERVICE]: [],
      [Feature.PLUGIN]: [],
      [Feature.READY]: []
    };

    _.forOwn(this.config, (featureOptions, name) => {
      if (this.options.allowedFeatures && this.options.allowedFeatures.indexOf(name) === -1) {
        return;
      }

      let feature = this._loadFeature(name);

      if (!(feature.type in featureGroups)) {
        throw new Error(`Invalid feature type. Feature: ${name}, type: ${feature.type}`);
      }

      featureGroups[feature.type].push([name, feature.load_, featureOptions]);
    });

    return Util.eachAsync_(featureGroups, (group, level) => this._loadFeatureGroup_(group, level));
  }

  async _loadFeatureGroup_(featureGroup, groupLevel) {
    await this.emitAsync_('before:' + groupLevel);
    this.log('verbose', `Loading "${groupLevel}" feature group ...`);
    await Util.eachAsync_(featureGroup, async ([name, load_, options]) => {
      await this.emitAsync_('before:load:' + name);
      this.log('verbose', `Loading feature "${name}" ...`);
      await load_(this, options);
      this.features[name].loaded = true;
      this.log('verbose', `Feature "${name}" loaded. [OK]`);
      await this.emitAsync_('after:load:' + name);
    });
    this.log('verbose', `Finished loading "${groupLevel}" feature group. [OK]`);
    await this.emitAsync_('after:' + groupLevel);
  }

  _loadFeature(feature) {
    let featureObject = this.features[feature];
    if (featureObject) return featureObject;
    let featurePath;

    if (this._featureRegistry.hasOwnProperty(feature)) {
      let loadOption = this._featureRegistry[feature];

      if (Array.isArray(loadOption)) {
        if (loadOption.length === 0) {
          throw new Error(`Invalid registry value for feature "${feature}".`);
        }

        featurePath = loadOption[0];
        featureObject = require(featurePath);

        if (loadOption.length > 1) {
          featureObject = Util.getValueByPath(featureObject, loadOption[1]);
        }
      } else {
        featurePath = loadOption;
        featureObject = require(featurePath);
      }
    } else {
      let searchingPath = this._featureRegistry['*'];

      let found = _.findLast(searchingPath, p => {
        featurePath = path.join(p, feature + '.js');
        return fs.existsSync(featurePath);
      });

      if (!found) {
        throw new Error(`Don't know where to load feature "${feature}".`);
      }

      featureObject = require(featurePath);
    }

    if (!Feature.validate(featureObject)) {
      throw new Error(`Invalid feature object loaded from "${featurePath}".`);
    }

    this.features[feature] = featureObject;
    return featureObject;
  }

}

module.exports = ServiceContainer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9TZXJ2aWNlQ29udGFpbmVyLmpzIl0sIm5hbWVzIjpbIlV0aWwiLCJyZXF1aXJlIiwiQ29uZmlnTG9hZGVyIiwiSnNvbkNvbmZpZ1Byb3ZpZGVyIiwiXyIsImZzIiwiUHJvbWlzZSIsInBhdGgiLCJFdmVudEVtaXR0ZXIiLCJ3aW5zdG9uIiwiRmVhdHVyZSIsIkxpdGVyYWwiLCJTZXJ2aWNlQ29udGFpbmVyIiwiY29uc3RydWN0b3IiLCJuYW1lIiwib3B0aW9ucyIsImxvZ0Vycm9yIiwiZXJyb3IiLCJtZXNzYWdlIiwibG9nZ2VyIiwiT2JqZWN0IiwiYXNzaWduIiwiZW52IiwicHJvY2VzcyIsIk5PREVfRU5WIiwid29ya2luZ1BhdGgiLCJyZXNvbHZlIiwiY3dkIiwiY29uZmlnUGF0aCIsInRvQWJzb2x1dGVQYXRoIiwiREVGQVVMVF9DT05GSUdfUEFUSCIsImNvbmZpZ05hbWUiLCJBUFBfQ0ZHX05BTUUiLCJzdGFydF8iLCJfZmVhdHVyZVJlZ2lzdHJ5IiwiX2dldEZlYXR1cmVGYWxsYmFja1BhdGgiLCJmZWF0dXJlcyIsInNlcnZpY2VzIiwibG9hZENvbmZpZ0Zyb21PcHRpb25zIiwiY29uZmlnIiwiY29uZmlnTG9hZGVyIiwiZGlzYWJsZUVudkF3YXJlQ29uZmlnIiwiam9pbiIsImNyZWF0ZUVudkF3YXJlSnNvbkxvYWRlciIsImxvYWRDb25maWdfIiwiZW1pdCIsImlzRW1wdHkiLCJFcnJvciIsIl9sb2FkRmVhdHVyZXNfIiwic3RhcnRlZCIsInN0b3BfIiwiZW1pdEFzeW5jXyIsImNvbmZpZ1ZhcmlhYmxlcyIsIl9nZXRDb25maWdWYXJpYWJsZXMiLCJsb2FkXyIsImFyZ3MiLCJsZW5ndGgiLCJyZWdpc3RlclNlcnZpY2UiLCJzZXJ2aWNlT2JqZWN0Iiwib3ZlcnJpZGUiLCJsb2ciLCJoYXNTZXJ2aWNlIiwiZ2V0U2VydmljZSIsImVuYWJsZWQiLCJmZWF0dXJlIiwiaGFzT3duUHJvcGVydHkiLCJhZGRGZWF0dXJlUmVnaXN0cnkiLCJyZWdpc3RyeSIsInB1dEludG9CdWNrZXQiLCJvbWl0IiwibGV2ZWwiLCJyZXN0IiwiX19kaXJuYW1lIiwiRkVBVFVSRVNfUEFUSCIsImV2ZW50IiwiYXN5bmNIYW5kbGVycyIsImFsbCIsImNvbmZpZ1N0YWdlRmVhdHVyZXMiLCJmb3JPd24iLCJmZWF0dXJlT3B0aW9ucyIsImFsbG93ZWRGZWF0dXJlcyIsImluZGV4T2YiLCJfbG9hZEZlYXR1cmUiLCJlcnIiLCJjb25zb2xlIiwidHlwZSIsIkNPTkYiLCJwdXNoIiwiZm9yRWFjaCIsIl9sb2FkRmVhdHVyZUdyb3VwXyIsImZlYXR1cmVHcm91cHMiLCJJTklUIiwiU0VSVklDRSIsIlBMVUdJTiIsIlJFQURZIiwiZWFjaEFzeW5jXyIsImdyb3VwIiwiZmVhdHVyZUdyb3VwIiwiZ3JvdXBMZXZlbCIsImxvYWRlZCIsImZlYXR1cmVPYmplY3QiLCJmZWF0dXJlUGF0aCIsImxvYWRPcHRpb24iLCJBcnJheSIsImlzQXJyYXkiLCJnZXRWYWx1ZUJ5UGF0aCIsInNlYXJjaGluZ1BhdGgiLCJmb3VuZCIsImZpbmRMYXN0IiwicCIsImV4aXN0c1N5bmMiLCJ2YWxpZGF0ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsVUFBRCxDQUFwQjs7QUFDQSxNQUFNQyxZQUFZLEdBQUdELE9BQU8sQ0FBQyxXQUFELENBQTVCOztBQUNBLE1BQU1FLGtCQUFrQixHQUFHRixPQUFPLENBQUMsa0NBQUQsQ0FBbEM7O0FBQ0EsTUFBTTtBQUFFRyxFQUFBQSxDQUFGO0FBQUtDLEVBQUFBLEVBQUw7QUFBU0MsRUFBQUE7QUFBVCxJQUFxQk4sSUFBM0I7O0FBQ0EsTUFBTU8sSUFBSSxHQUFHTixPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNTyxZQUFZLEdBQUdQLE9BQU8sQ0FBQyxRQUFELENBQTVCOztBQUNBLE1BQU1RLE9BQU8sR0FBR1IsT0FBTyxDQUFDLFNBQUQsQ0FBdkI7O0FBRUEsTUFBTVMsT0FBTyxHQUFHVCxPQUFPLENBQUMsZ0JBQUQsQ0FBdkI7O0FBQ0EsTUFBTVUsT0FBTyxHQUFHVixPQUFPLENBQUMsZ0JBQUQsQ0FBdkI7O0FBT0EsTUFBTVcsZ0JBQU4sU0FBK0JKLFlBQS9CLENBQTRDO0FBZXhDSyxFQUFBQSxXQUFXLENBQUNDLElBQUQsRUFBT0MsT0FBUCxFQUFnQjtBQUN2Qjs7QUFEdUIsU0FkM0JDLFFBYzJCLEdBZGhCLENBQUNDLEtBQUQsRUFBUUMsT0FBUixLQUFvQjtBQUMzQixhQUFPLEtBQUtDLE1BQUwsSUFBZSxLQUFLQSxNQUFMLENBQVlILFFBQVosQ0FBcUJDLEtBQXJCLEVBQTRCQyxPQUE1QixDQUF0QjtBQUNILEtBWTBCOztBQU92QixTQUFLSixJQUFMLEdBQVlBLElBQVo7QUFNQSxTQUFLQyxPQUFMLEdBQWVLLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjLEVBQWQsRUFFWk4sT0FGWSxDQUFmO0FBUUEsU0FBS08sR0FBTCxHQUFXLEtBQUtQLE9BQUwsQ0FBYU8sR0FBYixJQUFvQkMsT0FBTyxDQUFDRCxHQUFSLENBQVlFLFFBQWhDLElBQTRDLGFBQXZEO0FBTUEsU0FBS0MsV0FBTCxHQUFtQixLQUFLVixPQUFMLENBQWFVLFdBQWIsR0FBMkJsQixJQUFJLENBQUNtQixPQUFMLENBQWEsS0FBS1gsT0FBTCxDQUFhVSxXQUExQixDQUEzQixHQUFvRUYsT0FBTyxDQUFDSSxHQUFSLEVBQXZGO0FBTUEsU0FBS0MsVUFBTCxHQUFrQixLQUFLQyxjQUFMLENBQW9CLEtBQUtkLE9BQUwsQ0FBYWEsVUFBYixJQUEyQmpCLE9BQU8sQ0FBQ21CLG1CQUF2RCxDQUFsQjtBQU1BLFNBQUtDLFVBQUwsR0FBa0IsS0FBS2hCLE9BQUwsQ0FBYWdCLFVBQWIsSUFBMkJwQixPQUFPLENBQUNxQixZQUFyRDtBQUNIOztBQVFELFFBQU1DLE1BQU4sR0FBZTtBQUNYLFNBQUtDLGdCQUFMLEdBQXdCO0FBRXBCLFdBQUssS0FBS0MsdUJBQUw7QUFGZSxLQUF4QjtBQVFBLFNBQUtDLFFBQUwsR0FBZ0IsRUFBaEI7QUFLQSxTQUFLQyxRQUFMLEdBQWdCLEVBQWhCOztBQUVBLFFBQUksS0FBS3RCLE9BQUwsQ0FBYXVCLHFCQUFqQixFQUF3QztBQUNwQyxXQUFLQyxNQUFMLEdBQWMsS0FBS3hCLE9BQUwsQ0FBYXdCLE1BQTNCO0FBQ0gsS0FGRCxNQUVPO0FBS0gsV0FBS0MsWUFBTCxHQUFvQixLQUFLekIsT0FBTCxDQUFhMEIscUJBQWIsR0FDaEIsSUFBSXZDLFlBQUosQ0FBaUIsSUFBSUMsa0JBQUosQ0FBdUJJLElBQUksQ0FBQ21DLElBQUwsQ0FBVSxLQUFLZCxVQUFmLEVBQTJCLEtBQUtHLFVBQUwsR0FBa0IsT0FBN0MsQ0FBdkIsQ0FBakIsRUFBZ0csSUFBaEcsQ0FEZ0IsR0FFaEI3QixZQUFZLENBQUN5Qyx3QkFBYixDQUFzQyxLQUFLZixVQUEzQyxFQUF1RCxLQUFLRyxVQUE1RCxFQUF3RSxLQUFLVCxHQUE3RSxFQUFrRixJQUFsRixDQUZKO0FBSUEsWUFBTSxLQUFLc0IsV0FBTCxFQUFOO0FBQ0g7O0FBTUQsU0FBS0MsSUFBTCxDQUFVLGNBQVY7O0FBRUEsUUFBSXpDLENBQUMsQ0FBQzBDLE9BQUYsQ0FBVSxLQUFLUCxNQUFmLENBQUosRUFBNEI7QUFDeEIsWUFBTVEsS0FBSyxDQUFDLHNEQUFzRCxLQUFLbkIsVUFBNUQsQ0FBWDtBQUNIOztBQUVELFVBQU0sS0FBS29CLGNBQUwsRUFBTjtBQU1BLFNBQUtILElBQUwsQ0FBVSxPQUFWO0FBTUEsU0FBS0ksT0FBTCxHQUFlLElBQWY7QUFFQSxXQUFPLElBQVA7QUFDSDs7QUFPRCxRQUFNQyxLQUFOLEdBQWM7QUFLVixVQUFNLEtBQUtDLFVBQUwsQ0FBZ0IsVUFBaEIsQ0FBTjtBQUVBLFNBQUtGLE9BQUwsR0FBZSxLQUFmO0FBRUEsV0FBTyxLQUFLWixRQUFaO0FBQ0EsV0FBTyxLQUFLRCxRQUFaO0FBQ0EsV0FBTyxLQUFLRixnQkFBWjtBQUVBLFdBQU8sS0FBS0ssTUFBWjtBQUNBLFdBQU8sS0FBS0MsWUFBWjtBQUNIOztBQUtELFFBQU1JLFdBQU4sR0FBb0I7QUFDaEIsUUFBSVEsZUFBZSxHQUFHLEtBQUtDLG1CQUFMLEVBQXRCOztBQU1BLFNBQUtkLE1BQUwsR0FBYyxNQUFNLEtBQUtDLFlBQUwsQ0FBa0JjLEtBQWxCLENBQXdCRixlQUF4QixDQUFwQjtBQUVBLFdBQU8sSUFBUDtBQUNIOztBQU9EdkIsRUFBQUEsY0FBYyxDQUFDLEdBQUcwQixJQUFKLEVBQVU7QUFDcEIsUUFBSUEsSUFBSSxDQUFDQyxNQUFMLEtBQWdCLENBQXBCLEVBQXVCO0FBQ25CLGFBQU8sS0FBSy9CLFdBQVo7QUFDSDs7QUFFRCxXQUFPbEIsSUFBSSxDQUFDbUIsT0FBTCxDQUFhLEtBQUtELFdBQWxCLEVBQStCLEdBQUc4QixJQUFsQyxDQUFQO0FBQ0g7O0FBUURFLEVBQUFBLGVBQWUsQ0FBQzNDLElBQUQsRUFBTzRDLGFBQVAsRUFBc0JDLFFBQXRCLEVBQWdDO0FBQzNDLFFBQUk3QyxJQUFJLElBQUksS0FBS3VCLFFBQWIsSUFBeUIsQ0FBQ3NCLFFBQTlCLEVBQXdDO0FBQ3BDLFlBQU0sSUFBSVosS0FBSixDQUFVLGNBQWFqQyxJQUFiLEdBQW1CLHVCQUE3QixDQUFOO0FBQ0g7O0FBRUQsU0FBS3VCLFFBQUwsQ0FBY3ZCLElBQWQsSUFBc0I0QyxhQUF0QjtBQUNBLFNBQUtFLEdBQUwsQ0FBUyxTQUFULEVBQXFCLFlBQVc5QyxJQUFLLGVBQXJDO0FBQ0EsV0FBTyxJQUFQO0FBQ0g7O0FBT0QrQyxFQUFBQSxVQUFVLENBQUMvQyxJQUFELEVBQU87QUFDYixXQUFPQSxJQUFJLElBQUksS0FBS3VCLFFBQXBCO0FBQ0g7O0FBT0R5QixFQUFBQSxVQUFVLENBQUNoRCxJQUFELEVBQU87QUFDYixXQUFPLEtBQUt1QixRQUFMLENBQWN2QixJQUFkLENBQVA7QUFDSDs7QUFPRGlELEVBQUFBLE9BQU8sQ0FBQ0MsT0FBRCxFQUFVO0FBQ2IsV0FBTyxLQUFLNUIsUUFBTCxDQUFjNkIsY0FBZCxDQUE2QkQsT0FBN0IsQ0FBUDtBQUNIOztBQU1ERSxFQUFBQSxrQkFBa0IsQ0FBQ0MsUUFBRCxFQUFXO0FBRXpCLFFBQUlBLFFBQVEsQ0FBQ0YsY0FBVCxDQUF3QixHQUF4QixDQUFKLEVBQWtDO0FBQzlCakUsTUFBQUEsSUFBSSxDQUFDb0UsYUFBTCxDQUFtQixLQUFLbEMsZ0JBQXhCLEVBQTBDLEdBQTFDLEVBQStDaUMsUUFBUSxDQUFDLEdBQUQsQ0FBdkQ7QUFDSDs7QUFFRC9DLElBQUFBLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjLEtBQUthLGdCQUFuQixFQUFxQzlCLENBQUMsQ0FBQ2lFLElBQUYsQ0FBT0YsUUFBUCxFQUFpQixDQUFDLEdBQUQsQ0FBakIsQ0FBckM7QUFDSDs7QUFTRFAsRUFBQUEsR0FBRyxDQUFDVSxLQUFELEVBQVFwRCxPQUFSLEVBQWlCLEdBQUdxRCxJQUFwQixFQUEwQjtBQUN6QixTQUFLcEQsTUFBTCxJQUFlLEtBQUtBLE1BQUwsQ0FBWXlDLEdBQVosQ0FBZ0JVLEtBQWhCLEVBQXVCcEQsT0FBdkIsRUFBZ0MsR0FBR3FELElBQW5DLENBQWY7QUFDQSxXQUFPLElBQVA7QUFDSDs7QUFFRGxCLEVBQUFBLG1CQUFtQixHQUFHO0FBQ2xCLFdBQU87QUFDSCxhQUFPLElBREo7QUFFSCxhQUFPNUMsT0FGSjtBQUdILGFBQU8sS0FBS2E7QUFIVCxLQUFQO0FBS0g7O0FBRURhLEVBQUFBLHVCQUF1QixHQUFHO0FBQ3RCLFdBQU8sQ0FBRTVCLElBQUksQ0FBQ21CLE9BQUwsQ0FBYThDLFNBQWIsRUFBd0I3RCxPQUFPLENBQUM4RCxhQUFoQyxDQUFGLEVBQWtELEtBQUs1QyxjQUFMLENBQW9CbEIsT0FBTyxDQUFDOEQsYUFBNUIsQ0FBbEQsQ0FBUDtBQUNIOztBQUVELFFBQU10QixVQUFOLENBQWlCdUIsS0FBakIsRUFBd0I7QUFDcEIsUUFBSUMsYUFBYSxHQUFHLEVBQXBCO0FBQ0EsU0FBSzlCLElBQUwsQ0FBVTZCLEtBQVYsRUFBaUJDLGFBQWpCOztBQUNBLFFBQUlBLGFBQWEsQ0FBQ25CLE1BQWQsR0FBdUIsQ0FBM0IsRUFBOEI7QUFDMUIsWUFBTWxELE9BQU8sQ0FBQ3NFLEdBQVIsQ0FBWUQsYUFBWixDQUFOO0FBQ0g7QUFDSjs7QUFPRCxRQUFNM0IsY0FBTixHQUF1QjtBQUVuQixRQUFJNkIsbUJBQW1CLEdBQUcsRUFBMUI7O0FBR0F6RSxJQUFBQSxDQUFDLENBQUMwRSxNQUFGLENBQVMsS0FBS3ZDLE1BQWQsRUFBc0IsQ0FBQ3dDLGNBQUQsRUFBaUJqRSxJQUFqQixLQUEwQjtBQUM1QyxVQUFJLEtBQUtDLE9BQUwsQ0FBYWlFLGVBQWIsSUFDQSxLQUFLakUsT0FBTCxDQUFhaUUsZUFBYixDQUE2QkMsT0FBN0IsQ0FBcUNuRSxJQUFyQyxNQUErQyxDQUFDLENBRHBELEVBQ3VEO0FBRW5EO0FBQ0g7O0FBRUQsVUFBSWtELE9BQUo7O0FBQ0EsVUFBSTtBQUNBQSxRQUFBQSxPQUFPLEdBQUcsS0FBS2tCLFlBQUwsQ0FBa0JwRSxJQUFsQixDQUFWO0FBQ0gsT0FGRCxDQUVFLE9BQU9xRSxHQUFQLEVBQVk7QUFDVkMsUUFBQUEsT0FBTyxDQUFDbkUsS0FBUixDQUFja0UsR0FBZDtBQUNIOztBQUVELFVBQUluQixPQUFPLElBQUlBLE9BQU8sQ0FBQ3FCLElBQVIsS0FBaUIzRSxPQUFPLENBQUM0RSxJQUF4QyxFQUE4QztBQUMxQ1QsUUFBQUEsbUJBQW1CLENBQUNVLElBQXBCLENBQXlCLENBQUV6RSxJQUFGLEVBQVFrRCxPQUFPLENBQUNWLEtBQWhCLEVBQXVCeUIsY0FBdkIsQ0FBekI7QUFDQSxlQUFPLEtBQUt4QyxNQUFMLENBQVl6QixJQUFaLENBQVA7QUFDSDtBQUNKLEtBbEJEOztBQW9CQSxRQUFJK0QsbUJBQW1CLENBQUNyQixNQUFwQixHQUE2QixDQUFqQyxFQUFvQztBQUVoQ3FCLE1BQUFBLG1CQUFtQixDQUFDVyxPQUFwQixDQUE0QixDQUFDLENBQUUxRSxJQUFGLENBQUQsS0FBYztBQUFFLGVBQU8sS0FBS3lCLE1BQUwsQ0FBWXpCLElBQVosQ0FBUDtBQUEyQixPQUF2RTtBQUVBLFlBQU0sS0FBSzJFLGtCQUFMLENBQXdCWixtQkFBeEIsRUFBNkNuRSxPQUFPLENBQUM0RSxJQUFyRCxDQUFOO0FBR0EsYUFBTyxLQUFLdEMsY0FBTCxFQUFQO0FBQ0g7O0FBRUQsUUFBSTBDLGFBQWEsR0FBRztBQUNoQixPQUFDaEYsT0FBTyxDQUFDaUYsSUFBVCxHQUFnQixFQURBO0FBRWhCLE9BQUNqRixPQUFPLENBQUNrRixPQUFULEdBQW1CLEVBRkg7QUFHaEIsT0FBQ2xGLE9BQU8sQ0FBQ21GLE1BQVQsR0FBa0IsRUFIRjtBQUloQixPQUFDbkYsT0FBTyxDQUFDb0YsS0FBVCxHQUFpQjtBQUpELEtBQXBCOztBQVFBMUYsSUFBQUEsQ0FBQyxDQUFDMEUsTUFBRixDQUFTLEtBQUt2QyxNQUFkLEVBQXNCLENBQUN3QyxjQUFELEVBQWlCakUsSUFBakIsS0FBMEI7QUFDNUMsVUFBSSxLQUFLQyxPQUFMLENBQWFpRSxlQUFiLElBQ0EsS0FBS2pFLE9BQUwsQ0FBYWlFLGVBQWIsQ0FBNkJDLE9BQTdCLENBQXFDbkUsSUFBckMsTUFBK0MsQ0FBQyxDQURwRCxFQUN1RDtBQUVuRDtBQUNIOztBQUVELFVBQUlrRCxPQUFPLEdBQUcsS0FBS2tCLFlBQUwsQ0FBa0JwRSxJQUFsQixDQUFkOztBQUVBLFVBQUksRUFBRWtELE9BQU8sQ0FBQ3FCLElBQVIsSUFBZ0JLLGFBQWxCLENBQUosRUFBc0M7QUFDbEMsY0FBTSxJQUFJM0MsS0FBSixDQUFXLGtDQUFpQ2pDLElBQUssV0FBVWtELE9BQU8sQ0FBQ3FCLElBQUssRUFBeEUsQ0FBTjtBQUNIOztBQUVESyxNQUFBQSxhQUFhLENBQUMxQixPQUFPLENBQUNxQixJQUFULENBQWIsQ0FBNEJFLElBQTVCLENBQWlDLENBQUV6RSxJQUFGLEVBQVFrRCxPQUFPLENBQUNWLEtBQWhCLEVBQXVCeUIsY0FBdkIsQ0FBakM7QUFDSCxLQWREOztBQWdCQSxXQUFPL0UsSUFBSSxDQUFDK0YsVUFBTCxDQUFnQkwsYUFBaEIsRUFBK0IsQ0FBQ00sS0FBRCxFQUFRMUIsS0FBUixLQUFrQixLQUFLbUIsa0JBQUwsQ0FBd0JPLEtBQXhCLEVBQStCMUIsS0FBL0IsQ0FBakQsQ0FBUDtBQUNIOztBQUVELFFBQU1tQixrQkFBTixDQUF5QlEsWUFBekIsRUFBdUNDLFVBQXZDLEVBQW1EO0FBQy9DLFVBQU0sS0FBSy9DLFVBQUwsQ0FBZ0IsWUFBWStDLFVBQTVCLENBQU47QUFDQSxTQUFLdEMsR0FBTCxDQUFTLFNBQVQsRUFBcUIsWUFBV3NDLFVBQVcscUJBQTNDO0FBRUEsVUFBTWxHLElBQUksQ0FBQytGLFVBQUwsQ0FBZ0JFLFlBQWhCLEVBQThCLE9BQU8sQ0FBRW5GLElBQUYsRUFBUXdDLEtBQVIsRUFBZXZDLE9BQWYsQ0FBUCxLQUFvQztBQUNwRSxZQUFNLEtBQUtvQyxVQUFMLENBQWdCLGlCQUFpQnJDLElBQWpDLENBQU47QUFDQSxXQUFLOEMsR0FBTCxDQUFTLFNBQVQsRUFBcUIsb0JBQW1COUMsSUFBSyxPQUE3QztBQUVBLFlBQU13QyxLQUFLLENBQUMsSUFBRCxFQUFPdkMsT0FBUCxDQUFYO0FBQ0EsV0FBS3FCLFFBQUwsQ0FBY3RCLElBQWQsRUFBb0JxRixNQUFwQixHQUE2QixJQUE3QjtBQUVBLFdBQUt2QyxHQUFMLENBQVMsU0FBVCxFQUFxQixZQUFXOUMsSUFBSyxnQkFBckM7QUFFQSxZQUFNLEtBQUtxQyxVQUFMLENBQWdCLGdCQUFnQnJDLElBQWhDLENBQU47QUFDSCxLQVZLLENBQU47QUFXQSxTQUFLOEMsR0FBTCxDQUFTLFNBQVQsRUFBcUIscUJBQW9Cc0MsVUFBVyx1QkFBcEQ7QUFFQSxVQUFNLEtBQUsvQyxVQUFMLENBQWdCLFdBQVcrQyxVQUEzQixDQUFOO0FBQ0g7O0FBUURoQixFQUFBQSxZQUFZLENBQUNsQixPQUFELEVBQVU7QUFDbEIsUUFBSW9DLGFBQWEsR0FBRyxLQUFLaEUsUUFBTCxDQUFjNEIsT0FBZCxDQUFwQjtBQUNBLFFBQUlvQyxhQUFKLEVBQW1CLE9BQU9BLGFBQVA7QUFFbkIsUUFBSUMsV0FBSjs7QUFFQSxRQUFJLEtBQUtuRSxnQkFBTCxDQUFzQitCLGNBQXRCLENBQXFDRCxPQUFyQyxDQUFKLEVBQW1EO0FBRS9DLFVBQUlzQyxVQUFVLEdBQUcsS0FBS3BFLGdCQUFMLENBQXNCOEIsT0FBdEIsQ0FBakI7O0FBRUEsVUFBSXVDLEtBQUssQ0FBQ0MsT0FBTixDQUFjRixVQUFkLENBQUosRUFBK0I7QUFDM0IsWUFBSUEsVUFBVSxDQUFDOUMsTUFBWCxLQUFzQixDQUExQixFQUE2QjtBQUN6QixnQkFBTSxJQUFJVCxLQUFKLENBQVcsdUNBQXNDaUIsT0FBUSxJQUF6RCxDQUFOO0FBQ0g7O0FBRURxQyxRQUFBQSxXQUFXLEdBQUdDLFVBQVUsQ0FBQyxDQUFELENBQXhCO0FBQ0FGLFFBQUFBLGFBQWEsR0FBR25HLE9BQU8sQ0FBQ29HLFdBQUQsQ0FBdkI7O0FBRUEsWUFBSUMsVUFBVSxDQUFDOUMsTUFBWCxHQUFvQixDQUF4QixFQUEyQjtBQUV2QjRDLFVBQUFBLGFBQWEsR0FBR3BHLElBQUksQ0FBQ3lHLGNBQUwsQ0FBb0JMLGFBQXBCLEVBQW1DRSxVQUFVLENBQUMsQ0FBRCxDQUE3QyxDQUFoQjtBQUNIO0FBQ0osT0FaRCxNQVlPO0FBQ0hELFFBQUFBLFdBQVcsR0FBR0MsVUFBZDtBQUNBRixRQUFBQSxhQUFhLEdBQUduRyxPQUFPLENBQUNvRyxXQUFELENBQXZCO0FBQ0g7QUFDSixLQXBCRCxNQW9CTztBQUVILFVBQUlLLGFBQWEsR0FBRyxLQUFLeEUsZ0JBQUwsQ0FBc0IsR0FBdEIsQ0FBcEI7O0FBR0EsVUFBSXlFLEtBQUssR0FBR3ZHLENBQUMsQ0FBQ3dHLFFBQUYsQ0FBV0YsYUFBWCxFQUEwQkcsQ0FBQyxJQUFJO0FBQ3ZDUixRQUFBQSxXQUFXLEdBQUc5RixJQUFJLENBQUNtQyxJQUFMLENBQVVtRSxDQUFWLEVBQWE3QyxPQUFPLEdBQUcsS0FBdkIsQ0FBZDtBQUNBLGVBQU8zRCxFQUFFLENBQUN5RyxVQUFILENBQWNULFdBQWQsQ0FBUDtBQUNILE9BSFcsQ0FBWjs7QUFLQSxVQUFJLENBQUNNLEtBQUwsRUFBWTtBQUNSLGNBQU0sSUFBSTVELEtBQUosQ0FBVyxxQ0FBb0NpQixPQUFRLElBQXZELENBQU47QUFDSDs7QUFFRG9DLE1BQUFBLGFBQWEsR0FBR25HLE9BQU8sQ0FBQ29HLFdBQUQsQ0FBdkI7QUFDSDs7QUFFRCxRQUFJLENBQUMzRixPQUFPLENBQUNxRyxRQUFSLENBQWlCWCxhQUFqQixDQUFMLEVBQXNDO0FBQ2xDLFlBQU0sSUFBSXJELEtBQUosQ0FBVyx1Q0FBc0NzRCxXQUFZLElBQTdELENBQU47QUFDSDs7QUFFRCxTQUFLakUsUUFBTCxDQUFjNEIsT0FBZCxJQUF5Qm9DLGFBQXpCO0FBQ0EsV0FBT0EsYUFBUDtBQUNIOztBQWhadUM7O0FBbVo1Q1ksTUFBTSxDQUFDQyxPQUFQLEdBQWlCckcsZ0JBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IFV0aWwgPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgQ29uZmlnTG9hZGVyID0gcmVxdWlyZSgncmstY29uZmlnJyk7XG5jb25zdCBKc29uQ29uZmlnUHJvdmlkZXIgPSByZXF1aXJlKCdyay1jb25maWcvbGliL0pzb25Db25maWdQcm92aWRlcicpO1xuY29uc3QgeyBfLCBmcywgUHJvbWlzZSB9ID0gVXRpbDtcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKTtcbmNvbnN0IHdpbnN0b24gPSByZXF1aXJlKCd3aW5zdG9uJyk7XG5cbmNvbnN0IEZlYXR1cmUgPSByZXF1aXJlKCcuL2VudW0vRmVhdHVyZScpO1xuY29uc3QgTGl0ZXJhbCA9IHJlcXVpcmUoJy4vZW51bS9MaXRlcmFsJyk7XG5cbi8qKlxuICogU2VydmljZSBjb250YWluZXIgY2xhc3MuXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIEV2ZW50RW1pdHRlciAgICAgXG4gKi9cbmNsYXNzIFNlcnZpY2VDb250YWluZXIgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICAgIGxvZ0Vycm9yID0gKGVycm9yLCBtZXNzYWdlKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvZ2dlciAmJiB0aGlzLmxvZ2dlci5sb2dFcnJvcihlcnJvciwgbWVzc2FnZSk7XG4gICAgfVxuXG4gICAgLyoqICAgICBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBjb250YWluZXIgaW5zdGFuY2UuICAgICBcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIC0gQ29udGFpbmVyIG9wdGlvbnMgICAgICAgICAgXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtvcHRpb25zLmVudl0gLSBFbnZpcm9ubWVudCwgZGVmYXVsdCB0byBwcm9jZXNzLmVudi5OT0RFX0VOVlxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbb3B0aW9ucy53b3JraW5nUGF0aF0gLSBBcHAncyB3b3JraW5nIHBhdGgsIGRlZmF1bHQgdG8gcHJvY2Vzcy5jd2QoKVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbb3B0aW9ucy5jb25maWdQYXRoXSAtIEFwcCdzIGNvbmZpZyBwYXRoLCBkZWZhdWx0IHRvIFwiY29uZlwiIHVuZGVyIHdvcmtpbmdQYXRoXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtvcHRpb25zLmNvbmZpZ05hbWVdIC0gQXBwJ3MgY29uZmlnIGJhc2VuYW1lLCBkZWZhdWx0IHRvIFwiYXBwXCJcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW29wdGlvbnMuZGlzYWJsZUVudkF3YXJlQ29uZmlnPWZhbHNlXSAtIERvbid0IHVzZSBlbnZpcm9ubWVudC1hd2FyZSBjb25maWdcbiAgICAgKiBAcHJvcGVydHkge2FycmF5fSBbb3B0aW9ucy5hbGxvd2VkRmVhdHVyZXNdIC0gQSBsaXN0IG9mIGVuYWJsZWQgZmVhdHVyZSBuYW1lc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG5hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogTmFtZSBvZiB0aGUgYXBwXG4gICAgICAgICAqIEBtZW1iZXIge29iamVjdH0gICAgICAgICBcbiAgICAgICAgICoqL1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lOyAgICAgICAgICAgICAgICBcblxuICAgICAgICAvKipcbiAgICAgICAgICogQXBwIG9wdGlvbnNcbiAgICAgICAgICogQG1lbWJlciB7b2JqZWN0fSAgICAgICAgIFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICAgICAgICAvLy4uLiBkZWZhdWx0IG9wdGlvbnMgICAgICAgICAgICBcbiAgICAgICAgfSwgb3B0aW9ucyk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVudmlyb25tZW50IGZsYWdcbiAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfSAgICAgICAgXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmVudiA9IHRoaXMub3B0aW9ucy5lbnYgfHwgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgfHwgXCJkZXZlbG9wbWVudFwiO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXb3JraW5nIGRpcmVjdG9yeSBvZiB0aGlzIGNsaSBhcHBcbiAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfSAgICAgICAgIFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy53b3JraW5nUGF0aCA9IHRoaXMub3B0aW9ucy53b3JraW5nUGF0aCA/IHBhdGgucmVzb2x2ZSh0aGlzLm9wdGlvbnMud29ya2luZ1BhdGgpIDogcHJvY2Vzcy5jd2QoKTsgICAgIFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbmZpZyBwYXRoXG4gICAgICAgICAqIEBtZW1iZXIge3N0cmluZ30gICAgICAgICBcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY29uZmlnUGF0aCA9IHRoaXMudG9BYnNvbHV0ZVBhdGgodGhpcy5vcHRpb25zLmNvbmZpZ1BhdGggfHwgTGl0ZXJhbC5ERUZBVUxUX0NPTkZJR19QQVRIKTsgICAgICBcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25maWcgYmFzZW5hbWVcbiAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfSAgICAgICAgIFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jb25maWdOYW1lID0gdGhpcy5vcHRpb25zLmNvbmZpZ05hbWUgfHwgTGl0ZXJhbC5BUFBfQ0ZHX05BTUU7ICAgICAgICBcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdGFydCB0aGUgY29udGFpbmVyLlxuICAgICAqIEBmaXJlcyBTZXJ2aWNlQ29udGFpbmVyI2NvbmZpZ0xvYWRlZFxuICAgICAqIEBmaXJlcyBTZXJ2aWNlQ29udGFpbmVyI3JlYWR5XG4gICAgICogQHJldHVybnMge1Byb21pc2UuPFNlcnZpY2VDb250YWluZXI+fVxuICAgICAqL1xuICAgIGFzeW5jIHN0YXJ0XygpIHsgICAgICAgICAgICBcbiAgICAgICAgdGhpcy5fZmVhdHVyZVJlZ2lzdHJ5ID0ge1xuICAgICAgICAgICAgLy9maXJzdGx5IGxvb2sgdXAgXCJmZWF0dXJlc1wiIHVuZGVyIGN1cnJlbnQgd29ya2luZyBwYXRoLCBhbmQgdGhlbiB0cnkgdGhlIGJ1aWx0aW4gZmVhdHVyZXMgcGF0aFxuICAgICAgICAgICAgJyonOiB0aGlzLl9nZXRGZWF0dXJlRmFsbGJhY2tQYXRoKClcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIExvYWRlZCBmZWF0dXJlcywgbmFtZSA9PiBmZWF0dXJlIG9iamVjdFxuICAgICAgICAgKiBAbWVtYmVyIHtvYmplY3R9ICAgICAgICAgXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmZlYXR1cmVzID0ge307XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBMb2FkZWQgc2VydmljZXNcbiAgICAgICAgICogQG1lbWJlciB7b2JqZWN0fSAgICAgICAgIFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zZXJ2aWNlcyA9IHt9OyAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMubG9hZENvbmZpZ0Zyb21PcHRpb25zKSB7XG4gICAgICAgICAgICB0aGlzLmNvbmZpZyA9IHRoaXMub3B0aW9ucy5jb25maWc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENvbmZpZ3VyYXRpb24gbG9hZGVyIGluc3RhbmNlXG4gICAgICAgICAgICAgKiBAbWVtYmVyIHtDb25maWdMb2FkZXJ9ICAgICAgICAgXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMuY29uZmlnTG9hZGVyID0gdGhpcy5vcHRpb25zLmRpc2FibGVFbnZBd2FyZUNvbmZpZyA/IFxuICAgICAgICAgICAgICAgIG5ldyBDb25maWdMb2FkZXIobmV3IEpzb25Db25maWdQcm92aWRlcihwYXRoLmpvaW4odGhpcy5jb25maWdQYXRoLCB0aGlzLmNvbmZpZ05hbWUgKyAnLmpzb24nKSksIHRoaXMpIDogXG4gICAgICAgICAgICAgICAgQ29uZmlnTG9hZGVyLmNyZWF0ZUVudkF3YXJlSnNvbkxvYWRlcih0aGlzLmNvbmZpZ1BhdGgsIHRoaXMuY29uZmlnTmFtZSwgdGhpcy5lbnYsIHRoaXMpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmxvYWRDb25maWdfKCk7ICAgICBcbiAgICAgICAgfSAgIFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25maWcgbG9hZGVkIGV2ZW50LlxuICAgICAgICAgKiBAZXZlbnQgU2VydmljZUNvbnRhaW5lciNjb25maWdMb2FkZWRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZW1pdCgnY29uZmlnTG9hZGVkJyk7XG5cbiAgICAgICAgaWYgKF8uaXNFbXB0eSh0aGlzLmNvbmZpZykpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdFbXB0eSBjb25maWd1cmF0aW9uLiBOb3RoaW5nIHRvIGRvISBDb25maWcgcGF0aDogJyArIHRoaXMuY29uZmlnUGF0aCk7XG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCB0aGlzLl9sb2FkRmVhdHVyZXNfKCk7IFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBcHAgcmVhZHlcbiAgICAgICAgICogQGV2ZW50IFNlcnZpY2VDb250YWluZXIjcmVhZHlcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZW1pdCgncmVhZHknKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRmxhZyBzaG93aW5nIHRoZSBhcHAgaXMgc3RhcnRlZCBvciBub3QuXG4gICAgICAgICAqIEBtZW1iZXIge2Jvb2x9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RvcCB0aGUgY29udGFpbmVyXG4gICAgICogQGZpcmVzIFNlcnZpY2VDb250YWluZXIjc3RvcHBpbmdcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZS48U2VydmljZUNvbnRhaW5lcj59XG4gICAgICovXG4gICAgYXN5bmMgc3RvcF8oKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBcHAgc3RvcHBpbmdcbiAgICAgICAgICogQGV2ZW50IFNlcnZpY2VDb250YWluZXIjc3RvcHBpbmdcbiAgICAgICAgICovXG4gICAgICAgIGF3YWl0IHRoaXMuZW1pdEFzeW5jXygnc3RvcHBpbmcnKTtcblxuICAgICAgICB0aGlzLnN0YXJ0ZWQgPSBmYWxzZTtcblxuICAgICAgICBkZWxldGUgdGhpcy5zZXJ2aWNlcztcbiAgICAgICAgZGVsZXRlIHRoaXMuZmVhdHVyZXM7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9mZWF0dXJlUmVnaXN0cnk7XG5cbiAgICAgICAgZGVsZXRlIHRoaXMuY29uZmlnO1xuICAgICAgICBkZWxldGUgdGhpcy5jb25maWdMb2FkZXI7ICBcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7U2VydmljZUNvbnRhaW5lcn1cbiAgICAgKi9cbiAgICBhc3luYyBsb2FkQ29uZmlnXygpIHtcbiAgICAgICAgbGV0IGNvbmZpZ1ZhcmlhYmxlcyA9IHRoaXMuX2dldENvbmZpZ1ZhcmlhYmxlcygpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBcHAgY29uZmlndXJhdGlvblxuICAgICAgICAgKiBAbWVtYmVyIHtvYmplY3R9ICAgICAgICAgXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNvbmZpZyA9IGF3YWl0IHRoaXMuY29uZmlnTG9hZGVyLmxvYWRfKGNvbmZpZ1ZhcmlhYmxlcyk7ICAgXG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJhbnNsYXRlIGEgcmVsYXRpdmUgcGF0aCBvZiB0aGlzIGFwcCBtb2R1bGUgdG8gYW4gYWJzb2x1dGUgcGF0aCAgICAgXG4gICAgICogQHBhcmFtIHthcnJheX0gYXJncyAtIEFycmF5IG9mIHBhdGggcGFydHNcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRvQWJzb2x1dGVQYXRoKC4uLmFyZ3MpIHtcbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy53b3JraW5nUGF0aDtcbiAgICAgICAgfSAgICAgICBcblxuICAgICAgICByZXR1cm4gcGF0aC5yZXNvbHZlKHRoaXMud29ya2luZ1BhdGgsIC4uLmFyZ3MpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIGEgc2VydmljZSAgICAgXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gc2VydmljZU9iamVjdFxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gb3ZlcnJpZGVcbiAgICAgKi9cbiAgICByZWdpc3RlclNlcnZpY2UobmFtZSwgc2VydmljZU9iamVjdCwgb3ZlcnJpZGUpIHtcbiAgICAgICAgaWYgKG5hbWUgaW4gdGhpcy5zZXJ2aWNlcyAmJiAhb3ZlcnJpZGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU2VydmljZSBcIicrIG5hbWUgKydcIiBhbHJlYWR5IHJlZ2lzdGVyZWQhJyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNlcnZpY2VzW25hbWVdID0gc2VydmljZU9iamVjdDtcbiAgICAgICAgdGhpcy5sb2coJ3ZlcmJvc2UnLCBgU2VydmljZSBcIiR7bmFtZX1cIiByZWdpc3RlcmVkLmApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayB3aGV0aGVyIGEgc2VydmljZSBleGlzdHNcbiAgICAgKiBAcGFyYW0geyp9IG5hbWUgXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgaGFzU2VydmljZShuYW1lKSB7XG4gICAgICAgIHJldHVybiBuYW1lIGluIHRoaXMuc2VydmljZXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGEgc2VydmljZSBmcm9tIG1vZHVsZSBoaWVyYXJjaHkgICAgIFxuICAgICAqIEBwYXJhbSBuYW1lXG4gICAgICogQHJldHVybnMge29iamVjdH1cbiAgICAgKi9cbiAgICBnZXRTZXJ2aWNlKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VydmljZXNbbmFtZV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgd2hldGhlciBhIGZlYXR1cmUgaXMgZW5hYmxlZCBpbiB0aGUgYXBwLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmZWF0dXJlIFxuICAgICAqIEByZXR1cm5zIHtib29sfVxuICAgICAqL1xuICAgIGVuYWJsZWQoZmVhdHVyZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5mZWF0dXJlcy5oYXNPd25Qcm9wZXJ0eShmZWF0dXJlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgbW9yZSBvciBvdmVyaWRlIGN1cnJlbnQgZmVhdHVyZSByZWdpc3RyeVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSByZWdpc3RyeSBcbiAgICAgKi9cbiAgICBhZGRGZWF0dXJlUmVnaXN0cnkocmVnaXN0cnkpIHtcbiAgICAgICAgLy8gKiBpcyB1c2VkIGFzIHRoZSBmYWxsYmFjayBsb2NhdGlvbiB0byBmaW5kIGEgZmVhdHVyZVxuICAgICAgICBpZiAocmVnaXN0cnkuaGFzT3duUHJvcGVydHkoJyonKSkge1xuICAgICAgICAgICAgVXRpbC5wdXRJbnRvQnVja2V0KHRoaXMuX2ZlYXR1cmVSZWdpc3RyeSwgJyonLCByZWdpc3RyeVsnKiddKTtcbiAgICAgICAgfVxuXG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5fZmVhdHVyZVJlZ2lzdHJ5LCBfLm9taXQocmVnaXN0cnksIFsnKiddKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVmYXVsdCBsb2cgbWV0aG9kLCBtYXkgYmUgb3ZlcnJpZGUgYnkgbG9nZ2VycyBmZWF0dXJlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IC0gTG9nIGxldmVsXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IC0gTG9nIG1lc3NhZ2VcbiAgICAgKiBAcGFyYW0gey4uLm9iamVjdH0gLSBFeHRyYSBtZXRhIGRhdGFcbiAgICAgKiBAcmV0dXJucyB7U2VydmljZUNvbnRhaW5lcn1cbiAgICAgKi9cbiAgICBsb2cobGV2ZWwsIG1lc3NhZ2UsIC4uLnJlc3QpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIgJiYgdGhpcy5sb2dnZXIubG9nKGxldmVsLCBtZXNzYWdlLCAuLi5yZXN0KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgX2dldENvbmZpZ1ZhcmlhYmxlcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdhcHAnOiB0aGlzLCAgICAgICAgICAgIFxuICAgICAgICAgICAgJ2xvZyc6IHdpbnN0b24sXG4gICAgICAgICAgICAnZW52JzogdGhpcy5lbnZcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBfZ2V0RmVhdHVyZUZhbGxiYWNrUGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIFsgcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgTGl0ZXJhbC5GRUFUVVJFU19QQVRIKSwgdGhpcy50b0Fic29sdXRlUGF0aChMaXRlcmFsLkZFQVRVUkVTX1BBVEgpIF07XG4gICAgfVxuXG4gICAgYXN5bmMgZW1pdEFzeW5jXyhldmVudCkge1xuICAgICAgICBsZXQgYXN5bmNIYW5kbGVycyA9IFtdO1xuICAgICAgICB0aGlzLmVtaXQoZXZlbnQsIGFzeW5jSGFuZGxlcnMpO1xuICAgICAgICBpZiAoYXN5bmNIYW5kbGVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChhc3luY0hhbmRsZXJzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBMb2FkIGZlYXR1cmVzXG4gICAgICogQHByaXZhdGUgICAgIFxuICAgICAqIEByZXR1cm5zIHtib29sfVxuICAgICAqL1xuICAgIGFzeW5jIF9sb2FkRmVhdHVyZXNfKCkgeyAgICAgICBcbiAgICAgICAgLy8gcnVuIGNvbmZpZyBzdGFnZSBzZXBhcmF0ZWx5IGZpcnN0XG4gICAgICAgIGxldCBjb25maWdTdGFnZUZlYXR1cmVzID0gW107ICAgICAgICBcblxuICAgICAgICAvLyBsb2FkIGZlYXR1cmVzXG4gICAgICAgIF8uZm9yT3duKHRoaXMuY29uZmlnLCAoZmVhdHVyZU9wdGlvbnMsIG5hbWUpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYWxsb3dlZEZlYXR1cmVzICYmXG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmFsbG93ZWRGZWF0dXJlcy5pbmRleE9mKG5hbWUpID09PSAtMSkge1xuICAgICAgICAgICAgICAgIC8vc2tpcCBkaXNhYmxlZCBmZWF0dXJlc1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGZlYXR1cmU7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZlYXR1cmUgPSB0aGlzLl9sb2FkRmVhdHVyZShuYW1lKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7ICAgICBcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7ICAgICAgICAgICBcbiAgICAgICAgICAgIH0gICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGZlYXR1cmUgJiYgZmVhdHVyZS50eXBlID09PSBGZWF0dXJlLkNPTkYpIHsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29uZmlnU3RhZ2VGZWF0dXJlcy5wdXNoKFsgbmFtZSwgZmVhdHVyZS5sb2FkXywgZmVhdHVyZU9wdGlvbnMgXSk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuY29uZmlnW25hbWVdO1xuICAgICAgICAgICAgfSAgICBcbiAgICAgICAgfSk7ICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGlmIChjb25maWdTdGFnZUZlYXR1cmVzLmxlbmd0aCA+IDApIHsgICAgICBcbiAgICAgICAgICAgIC8vY29uZmlndXJhdGlvbiBmZWF0dXJlcyB3aWxsIGJlIG92ZXJyaWRlZCBieSBuZXdseSBsb2FkZWQgY29uZmlnXG4gICAgICAgICAgICBjb25maWdTdGFnZUZlYXR1cmVzLmZvckVhY2goKFsgbmFtZSBdKSA9PiB7IGRlbGV0ZSB0aGlzLmNvbmZpZ1tuYW1lXTsgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX2xvYWRGZWF0dXJlR3JvdXBfKGNvbmZpZ1N0YWdlRmVhdHVyZXMsIEZlYXR1cmUuQ09ORik7XG5cbiAgICAgICAgICAgIC8vcmVsb2FkIGFsbCBmZWF0dXJlcyBpZiBhbnkgdHlwZSBvZiBjb25maWd1cmF0aW9uIGZlYXR1cmUgZXhpc3RzICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9hZEZlYXR1cmVzXygpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGZlYXR1cmVHcm91cHMgPSB7ICAgICAgICAgICAgXG4gICAgICAgICAgICBbRmVhdHVyZS5JTklUXTogW10sICAgICAgICAgICAgXG4gICAgICAgICAgICBbRmVhdHVyZS5TRVJWSUNFXTogW10sICAgICAgICAgICAgXG4gICAgICAgICAgICBbRmVhdHVyZS5QTFVHSU5dOiBbXSxcbiAgICAgICAgICAgIFtGZWF0dXJlLlJFQURZXTogW11cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBsb2FkIGZlYXR1cmVzXG4gICAgICAgIF8uZm9yT3duKHRoaXMuY29uZmlnLCAoZmVhdHVyZU9wdGlvbnMsIG5hbWUpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYWxsb3dlZEZlYXR1cmVzICYmXG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmFsbG93ZWRGZWF0dXJlcy5pbmRleE9mKG5hbWUpID09PSAtMSkge1xuICAgICAgICAgICAgICAgIC8vc2tpcCBkaXNhYmxlZCBmZWF0dXJlc1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGZlYXR1cmUgPSB0aGlzLl9sb2FkRmVhdHVyZShuYW1lKTtcblxuICAgICAgICAgICAgaWYgKCEoZmVhdHVyZS50eXBlIGluIGZlYXR1cmVHcm91cHMpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGZlYXR1cmUgdHlwZS4gRmVhdHVyZTogJHtuYW1lfSwgdHlwZTogJHtmZWF0dXJlLnR5cGV9YCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZlYXR1cmVHcm91cHNbZmVhdHVyZS50eXBlXS5wdXNoKFsgbmFtZSwgZmVhdHVyZS5sb2FkXywgZmVhdHVyZU9wdGlvbnMgXSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBVdGlsLmVhY2hBc3luY18oZmVhdHVyZUdyb3VwcywgKGdyb3VwLCBsZXZlbCkgPT4gdGhpcy5fbG9hZEZlYXR1cmVHcm91cF8oZ3JvdXAsIGxldmVsKSk7XG4gICAgfVxuXG4gICAgYXN5bmMgX2xvYWRGZWF0dXJlR3JvdXBfKGZlYXR1cmVHcm91cCwgZ3JvdXBMZXZlbCkgeyAgICAgICAgXG4gICAgICAgIGF3YWl0IHRoaXMuZW1pdEFzeW5jXygnYmVmb3JlOicgKyBncm91cExldmVsKTtcbiAgICAgICAgdGhpcy5sb2coJ3ZlcmJvc2UnLCBgTG9hZGluZyBcIiR7Z3JvdXBMZXZlbH1cIiBmZWF0dXJlIGdyb3VwIC4uLmApO1xuXG4gICAgICAgIGF3YWl0IFV0aWwuZWFjaEFzeW5jXyhmZWF0dXJlR3JvdXAsIGFzeW5jIChbIG5hbWUsIGxvYWRfLCBvcHRpb25zIF0pID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmVtaXRBc3luY18oJ2JlZm9yZTpsb2FkOicgKyBuYW1lKTtcbiAgICAgICAgICAgIHRoaXMubG9nKCd2ZXJib3NlJywgYExvYWRpbmcgZmVhdHVyZSBcIiR7bmFtZX1cIiAuLi5gKTtcblxuICAgICAgICAgICAgYXdhaXQgbG9hZF8odGhpcywgb3B0aW9ucyk7ICAgXG4gICAgICAgICAgICB0aGlzLmZlYXR1cmVzW25hbWVdLmxvYWRlZCA9IHRydWU7ICAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLmxvZygndmVyYm9zZScsIGBGZWF0dXJlIFwiJHtuYW1lfVwiIGxvYWRlZC4gW09LXWApO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmVtaXRBc3luY18oJ2FmdGVyOmxvYWQ6JyArIG5hbWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5sb2coJ3ZlcmJvc2UnLCBgRmluaXNoZWQgbG9hZGluZyBcIiR7Z3JvdXBMZXZlbH1cIiBmZWF0dXJlIGdyb3VwLiBbT0tdYCk7XG5cbiAgICAgICAgYXdhaXQgdGhpcy5lbWl0QXN5bmNfKCdhZnRlcjonICsgZ3JvdXBMZXZlbCk7XG4gICAgfSAgICBcblxuICAgIC8qKlxuICAgICAqIExvYWQgYSBmZWF0dXJlIG9iamVjdCBieSBuYW1lLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGZlYXR1cmUgXG4gICAgICogQHJldHVybnMge29iamVjdH0gICAgIFxuICAgICAqL1xuICAgIF9sb2FkRmVhdHVyZShmZWF0dXJlKSB7XG4gICAgICAgIGxldCBmZWF0dXJlT2JqZWN0ID0gdGhpcy5mZWF0dXJlc1tmZWF0dXJlXTtcbiAgICAgICAgaWYgKGZlYXR1cmVPYmplY3QpIHJldHVybiBmZWF0dXJlT2JqZWN0O1xuXG4gICAgICAgIGxldCBmZWF0dXJlUGF0aDtcblxuICAgICAgICBpZiAodGhpcy5fZmVhdHVyZVJlZ2lzdHJ5Lmhhc093blByb3BlcnR5KGZlYXR1cmUpKSB7ICAgICAgICAgIFxuICAgICAgICAgICAgLy9sb2FkIGJ5IHJlZ2lzdHJ5IGVudHJ5XG4gICAgICAgICAgICBsZXQgbG9hZE9wdGlvbiA9IHRoaXMuX2ZlYXR1cmVSZWdpc3RyeVtmZWF0dXJlXTsgICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobG9hZE9wdGlvbikpIHtcbiAgICAgICAgICAgICAgICBpZiAobG9hZE9wdGlvbi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHJlZ2lzdHJ5IHZhbHVlIGZvciBmZWF0dXJlIFwiJHtmZWF0dXJlfVwiLmApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZlYXR1cmVQYXRoID0gbG9hZE9wdGlvblswXTtcbiAgICAgICAgICAgICAgICBmZWF0dXJlT2JqZWN0ID0gcmVxdWlyZShmZWF0dXJlUGF0aCk7XG5cbiAgICAgICAgICAgICAgICBpZiAobG9hZE9wdGlvbi5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vb25lIG1vZHVsZSBtYXkgY29udGFpbnMgbW9yZSB0aGFuIG9uZSBmZWF0dXJlXG4gICAgICAgICAgICAgICAgICAgIGZlYXR1cmVPYmplY3QgPSBVdGlsLmdldFZhbHVlQnlQYXRoKGZlYXR1cmVPYmplY3QsIGxvYWRPcHRpb25bMV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZmVhdHVyZVBhdGggPSBsb2FkT3B0aW9uO1xuICAgICAgICAgICAgICAgIGZlYXR1cmVPYmplY3QgPSByZXF1aXJlKGZlYXR1cmVQYXRoKTtcbiAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy9sb2FkIGJ5IGZhbGxiYWNrIHBhdGhzXG4gICAgICAgICAgICBsZXQgc2VhcmNoaW5nUGF0aCA9IHRoaXMuX2ZlYXR1cmVSZWdpc3RyeVsnKiddO1xuICAgIFxuICAgICAgICAgICAgLy9yZXZlcnNlIGZhbGxiYWNrIHN0YWNrXG4gICAgICAgICAgICBsZXQgZm91bmQgPSBfLmZpbmRMYXN0KHNlYXJjaGluZ1BhdGgsIHAgPT4ge1xuICAgICAgICAgICAgICAgIGZlYXR1cmVQYXRoID0gcGF0aC5qb2luKHAsIGZlYXR1cmUgKyAnLmpzJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZzLmV4aXN0c1N5bmMoZmVhdHVyZVBhdGgpO1xuICAgICAgICAgICAgfSk7ICAgICAgICBcblxuICAgICAgICAgICAgaWYgKCFmb3VuZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRG9uJ3Qga25vdyB3aGVyZSB0byBsb2FkIGZlYXR1cmUgXCIke2ZlYXR1cmV9XCIuYCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZlYXR1cmVPYmplY3QgPSByZXF1aXJlKGZlYXR1cmVQYXRoKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKCFGZWF0dXJlLnZhbGlkYXRlKGZlYXR1cmVPYmplY3QpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgZmVhdHVyZSBvYmplY3QgbG9hZGVkIGZyb20gXCIke2ZlYXR1cmVQYXRofVwiLmApO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5mZWF0dXJlc1tmZWF0dXJlXSA9IGZlYXR1cmVPYmplY3Q7XG4gICAgICAgIHJldHVybiBmZWF0dXJlT2JqZWN0O1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTZXJ2aWNlQ29udGFpbmVyOyJdfQ==