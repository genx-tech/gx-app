"use strict";

require("source-map-support/register");

const Util = require('rk-utils');

const ConfigLoader = require('rk-config');

const JsonConfigProvider = require('rk-config/lib/JsonConfigProvider');

const {
  _,
  fs,
  Promise
} = Util;

const path = require('path');

const EventEmitter = require('events');

const winston = require('winston');

const Feature = require('./enum/Feature');

const Literal = require('./enum/Literal');

class ServiceContainer extends EventEmitter {
  constructor(name, options) {
    super();

    this.logError = error => {
      return this.log('error', error.message, _.pick(error, ['name', 'status', 'code', 'extraInfo', 'stack']));
    };

    this.name = name;
    this.options = Object.assign({}, options);
    this.env = this.options.env || process.env.NODE_ENV || "development";
    this.workingPath = this.options.workingPath ? path.resolve(this.options.workingPath) : process.cwd();
    this.configPath = this.toAbsolutePath(this.options.configPath || Literal.DEFAULT_CONFIG_PATH);
    this.configName = this.options.configName || Literal.APP_CFG_NAME;
  }

  async start_() {
    this._featureRegistry = {
      '*': this._getFeatureFallbackPath()
    };
    this.features = {};
    this.services = {};

    if (this.options.loadConfigFromOptions) {
      this.config = this.options.config;
    } else {
      this.configLoader = this.options.disableEnvAwareConfig ? new ConfigLoader(new JsonConfigProvider(path.join(this.configPath, this.configName + '.json')), this) : ConfigLoader.createEnvAwareJsonLoader(this.configPath, this.configName, this.env, this);
      await this.loadConfig_();
    }

    this.emit('configLoaded');

    if (_.isEmpty(this.config)) {
      throw Error('Empty configuration. Nothing to do! Config path: ' + this.configPath);
    }

    await this._loadFeatures_();
    this.emit('ready');
    this.started = true;
    return this;
  }

  async stop_() {
    await this.emitAsync_('stopping');
    this.started = false;
    delete this.services;
    delete this.features;
    delete this._featureRegistry;
    delete this.config;
    delete this.configLoader;
  }

  async loadConfig_() {
    let configVariables = this._getConfigVariables();

    this.config = await this.configLoader.load_(configVariables);
    return this;
  }

  toAbsolutePath(...args) {
    if (args.length === 0) {
      return this.workingPath;
    }

    return path.resolve(this.workingPath, ...args);
  }

  registerService(name, serviceObject, override) {
    if (name in this.services && !override) {
      throw new Error('Service "' + name + '" already registered!');
    }

    this.services[name] = serviceObject;
    this.log('verbose', `Service "${name}" registered.`);
    return this;
  }

  hasService(name) {
    return name in this.services;
  }

  getService(name) {
    return this.services[name];
  }

  enabled(feature) {
    return this.features.hasOwnProperty(feature);
  }

  addFeatureRegistry(registry) {
    if (registry.hasOwnProperty('*')) {
      Util.putIntoBucket(this._featureRegistry, '*', registry['*']);
    }

    Object.assign(this._featureRegistry, _.omit(registry, ['*']));
  }

  log(level, message, ...rest) {
    this.logger && this.logger.log(level, message, ...rest);
    return this;
  }

  _getConfigVariables() {
    return {
      'app': this,
      'log': winston,
      'env': this.env
    };
  }

  _getFeatureFallbackPath() {
    return [path.resolve(__dirname, Literal.FEATURES_PATH), this.toAbsolutePath(Literal.FEATURES_PATH)];
  }

  async emitAsync_(event) {
    let asyncHandlers = [];
    this.emit(event, asyncHandlers);

    if (asyncHandlers.length > 0) {
      await Promise.all(asyncHandlers);
    }
  }

  async _loadFeatures_() {
    let configStageFeatures = [];

    _.forOwn(this.config, (featureOptions, name) => {
      if (this.options.allowedFeatures && this.options.allowedFeatures.indexOf(name) === -1) {
        return;
      }

      let feature;

      try {
        feature = this._loadFeature(name);
      } catch (err) {
        console.error(err);
      }

      if (feature && feature.type === Feature.CONF) {
        configStageFeatures.push([name, feature.load_, featureOptions]);
        delete this.config[name];
      }
    });

    if (configStageFeatures.length > 0) {
      configStageFeatures.forEach(([name]) => {
        delete this.config[name];
      });
      await this._loadFeatureGroup_(configStageFeatures, Feature.CONF);
      return this._loadFeatures_();
    }

    let featureGroups = {
      [Feature.INIT]: [],
      [Feature.SERVICE]: [],
      [Feature.PLUGIN]: [],
      [Feature.READY]: []
    };

    _.forOwn(this.config, (featureOptions, name) => {
      if (this.options.allowedFeatures && this.options.allowedFeatures.indexOf(name) === -1) {
        return;
      }

      let feature = this._loadFeature(name);

      if (!(feature.type in featureGroups)) {
        throw new Error(`Invalid feature type. Feature: ${name}, type: ${feature.type}`);
      }

      featureGroups[feature.type].push([name, feature.load_, featureOptions]);
    });

    return Util.eachAsync_(featureGroups, (group, level) => this._loadFeatureGroup_(group, level));
  }

  async _loadFeatureGroup_(featureGroup, groupLevel) {
    await this.emitAsync_('before:' + groupLevel);
    this.log('verbose', `Loading "${groupLevel}" feature group ...`);
    await Util.eachAsync_(featureGroup, async ([name, load_, options]) => {
      await this.emitAsync_('before:load:' + name);
      this.log('verbose', `Loading feature "${name}" ...`);
      await load_(this, options);
      this.features[name].loaded = true;
      this.log('verbose', `Feature "${name}" loaded. [OK]`);
      await this.emitAsync_('after:load:' + name);
    });
    this.log('verbose', `Finished loading "${groupLevel}" feature group. [OK]`);
    await this.emitAsync_('after:' + groupLevel);
  }

  _loadFeature(feature) {
    let featureObject = this.features[feature];
    if (featureObject) return featureObject;
    let featurePath;

    if (this._featureRegistry.hasOwnProperty(feature)) {
      let loadOption = this._featureRegistry[feature];

      if (Array.isArray(loadOption)) {
        if (loadOption.length === 0) {
          throw new Error(`Invalid registry value for feature "${feature}".`);
        }

        featurePath = loadOption[0];
        featureObject = require(featurePath);

        if (loadOption.length > 1) {
          featureObject = Util.getValueByPath(featureObject, loadOption[1]);
        }
      } else {
        featurePath = loadOption;
        featureObject = require(featurePath);
      }
    } else {
      let searchingPath = this._featureRegistry['*'];

      let found = _.findLast(searchingPath, p => {
        featurePath = path.join(p, feature + '.js');
        return fs.existsSync(featurePath);
      });

      if (!found) {
        throw new Error(`Don't know where to load feature "${feature}".`);
      }

      featureObject = require(featurePath);
    }

    if (!Feature.validate(featureObject)) {
      throw new Error(`Invalid feature object loaded from "${featurePath}".`);
    }

    this.features[feature] = featureObject;
    return featureObject;
  }

}

module.exports = ServiceContainer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9TZXJ2aWNlQ29udGFpbmVyLmpzIl0sIm5hbWVzIjpbIlV0aWwiLCJyZXF1aXJlIiwiQ29uZmlnTG9hZGVyIiwiSnNvbkNvbmZpZ1Byb3ZpZGVyIiwiXyIsImZzIiwiUHJvbWlzZSIsInBhdGgiLCJFdmVudEVtaXR0ZXIiLCJ3aW5zdG9uIiwiRmVhdHVyZSIsIkxpdGVyYWwiLCJTZXJ2aWNlQ29udGFpbmVyIiwiY29uc3RydWN0b3IiLCJuYW1lIiwib3B0aW9ucyIsImxvZ0Vycm9yIiwiZXJyb3IiLCJsb2ciLCJtZXNzYWdlIiwicGljayIsIk9iamVjdCIsImFzc2lnbiIsImVudiIsInByb2Nlc3MiLCJOT0RFX0VOViIsIndvcmtpbmdQYXRoIiwicmVzb2x2ZSIsImN3ZCIsImNvbmZpZ1BhdGgiLCJ0b0Fic29sdXRlUGF0aCIsIkRFRkFVTFRfQ09ORklHX1BBVEgiLCJjb25maWdOYW1lIiwiQVBQX0NGR19OQU1FIiwic3RhcnRfIiwiX2ZlYXR1cmVSZWdpc3RyeSIsIl9nZXRGZWF0dXJlRmFsbGJhY2tQYXRoIiwiZmVhdHVyZXMiLCJzZXJ2aWNlcyIsImxvYWRDb25maWdGcm9tT3B0aW9ucyIsImNvbmZpZyIsImNvbmZpZ0xvYWRlciIsImRpc2FibGVFbnZBd2FyZUNvbmZpZyIsImpvaW4iLCJjcmVhdGVFbnZBd2FyZUpzb25Mb2FkZXIiLCJsb2FkQ29uZmlnXyIsImVtaXQiLCJpc0VtcHR5IiwiRXJyb3IiLCJfbG9hZEZlYXR1cmVzXyIsInN0YXJ0ZWQiLCJzdG9wXyIsImVtaXRBc3luY18iLCJjb25maWdWYXJpYWJsZXMiLCJfZ2V0Q29uZmlnVmFyaWFibGVzIiwibG9hZF8iLCJhcmdzIiwibGVuZ3RoIiwicmVnaXN0ZXJTZXJ2aWNlIiwic2VydmljZU9iamVjdCIsIm92ZXJyaWRlIiwiaGFzU2VydmljZSIsImdldFNlcnZpY2UiLCJlbmFibGVkIiwiZmVhdHVyZSIsImhhc093blByb3BlcnR5IiwiYWRkRmVhdHVyZVJlZ2lzdHJ5IiwicmVnaXN0cnkiLCJwdXRJbnRvQnVja2V0Iiwib21pdCIsImxldmVsIiwicmVzdCIsImxvZ2dlciIsIl9fZGlybmFtZSIsIkZFQVRVUkVTX1BBVEgiLCJldmVudCIsImFzeW5jSGFuZGxlcnMiLCJhbGwiLCJjb25maWdTdGFnZUZlYXR1cmVzIiwiZm9yT3duIiwiZmVhdHVyZU9wdGlvbnMiLCJhbGxvd2VkRmVhdHVyZXMiLCJpbmRleE9mIiwiX2xvYWRGZWF0dXJlIiwiZXJyIiwiY29uc29sZSIsInR5cGUiLCJDT05GIiwicHVzaCIsImZvckVhY2giLCJfbG9hZEZlYXR1cmVHcm91cF8iLCJmZWF0dXJlR3JvdXBzIiwiSU5JVCIsIlNFUlZJQ0UiLCJQTFVHSU4iLCJSRUFEWSIsImVhY2hBc3luY18iLCJncm91cCIsImZlYXR1cmVHcm91cCIsImdyb3VwTGV2ZWwiLCJsb2FkZWQiLCJmZWF0dXJlT2JqZWN0IiwiZmVhdHVyZVBhdGgiLCJsb2FkT3B0aW9uIiwiQXJyYXkiLCJpc0FycmF5IiwiZ2V0VmFsdWVCeVBhdGgiLCJzZWFyY2hpbmdQYXRoIiwiZm91bmQiLCJmaW5kTGFzdCIsInAiLCJleGlzdHNTeW5jIiwidmFsaWRhdGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLFVBQUQsQ0FBcEI7O0FBQ0EsTUFBTUMsWUFBWSxHQUFHRCxPQUFPLENBQUMsV0FBRCxDQUE1Qjs7QUFDQSxNQUFNRSxrQkFBa0IsR0FBR0YsT0FBTyxDQUFDLGtDQUFELENBQWxDOztBQUNBLE1BQU07QUFBRUcsRUFBQUEsQ0FBRjtBQUFLQyxFQUFBQSxFQUFMO0FBQVNDLEVBQUFBO0FBQVQsSUFBcUJOLElBQTNCOztBQUNBLE1BQU1PLElBQUksR0FBR04sT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsTUFBTU8sWUFBWSxHQUFHUCxPQUFPLENBQUMsUUFBRCxDQUE1Qjs7QUFDQSxNQUFNUSxPQUFPLEdBQUdSLE9BQU8sQ0FBQyxTQUFELENBQXZC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Q00sS0FBTCxFQUFZO0FBQ1IsY0FBTSxJQUFJNUQsS0FBSixDQUFXLHFDQUFvQ2dCLE9BQVEsSUFBdkQsQ0FBTjtBQUNIOztBQUVEcUMsTUFBQUEsYUFBYSxHQUFHcEcsT0FBTyxDQUFDcUcsV0FBRCxDQUF2QjtBQUNIOztBQUVELFFBQUksQ0FBQzVGLE9BQU8sQ0FBQ3NHLFFBQVIsQ0FBaUJYLGFBQWpCLENBQUwsRUFBc0M7QUFDbEMsWUFBTSxJQUFJckQsS0FBSixDQUFXLHVDQUFzQ3NELFdBQVksSUFBN0QsQ0FBTjtBQUNIOztBQUVELFNBQUtqRSxRQUFMLENBQWMyQixPQUFkLElBQXlCcUMsYUFBekI7QUFDQSxXQUFPQSxhQUFQO0FBQ0g7O0FBaFp1Qzs7QUFtWjVDWSxNQUFNLENBQUNDLE9BQVAsR0FBaUJ0RyxnQkFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgVXRpbCA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCBDb25maWdMb2FkZXIgPSByZXF1aXJlKCdyay1jb25maWcnKTtcbmNvbnN0IEpzb25Db25maWdQcm92aWRlciA9IHJlcXVpcmUoJ3JrLWNvbmZpZy9saWIvSnNvbkNvbmZpZ1Byb3ZpZGVyJyk7XG5jb25zdCB7IF8sIGZzLCBQcm9taXNlIH0gPSBVdGlsO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpO1xuY29uc3Qgd2luc3RvbiA9IHJlcXVpcmUoJ3dpbnN0b24nKTtcblxuY29uc3QgRmVhdHVyZSA9IHJlcXVpcmUoJy4vZW51bS9GZWF0dXJlJyk7XG5jb25zdCBMaXRlcmFsID0gcmVxdWlyZSgnLi9lbnVtL0xpdGVyYWwnKTtcblxuLyoqXG4gKiBTZXJ2aWNlIGNvbnRhaW5lciBjbGFzcy5cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgRXZlbnRFbWl0dGVyICAgICBcbiAqL1xuY2xhc3MgU2VydmljZUNvbnRhaW5lciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gICAgbG9nRXJyb3IgPSAoZXJyb3IpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9nKCdlcnJvcicsIGVycm9yLm1lc3NhZ2UsIF8ucGljayhlcnJvciwgWyAnbmFtZScsICdzdGF0dXMnLCAnY29kZScsICdleHRyYUluZm8nLCAnc3RhY2snIF0pKTtcbiAgICB9XG5cbiAgICAvKiogICAgIFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGNvbnRhaW5lciBpbnN0YW5jZS4gICAgIFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gLSBDb250YWluZXIgb3B0aW9ucyAgICAgICAgICBcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW29wdGlvbnMuZW52XSAtIEVudmlyb25tZW50LCBkZWZhdWx0IHRvIHByb2Nlc3MuZW52Lk5PREVfRU5WXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtvcHRpb25zLndvcmtpbmdQYXRoXSAtIEFwcCdzIHdvcmtpbmcgcGF0aCwgZGVmYXVsdCB0byBwcm9jZXNzLmN3ZCgpXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtvcHRpb25zLmNvbmZpZ1BhdGhdIC0gQXBwJ3MgY29uZmlnIHBhdGgsIGRlZmF1bHQgdG8gXCJjb25mXCIgdW5kZXIgd29ya2luZ1BhdGhcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW29wdGlvbnMuY29uZmlnTmFtZV0gLSBBcHAncyBjb25maWcgYmFzZW5hbWUsIGRlZmF1bHQgdG8gXCJhcHBcIlxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbb3B0aW9ucy5kaXNhYmxlRW52QXdhcmVDb25maWc9ZmFsc2VdIC0gRG9uJ3QgdXNlIGVudmlyb25tZW50LWF3YXJlIGNvbmZpZ1xuICAgICAqIEBwcm9wZXJ0eSB7YXJyYXl9IFtvcHRpb25zLmFsbG93ZWRGZWF0dXJlc10gLSBBIGxpc3Qgb2YgZW5hYmxlZCBmZWF0dXJlIG5hbWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobmFtZSwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBOYW1lIG9mIHRoZSBhcHBcbiAgICAgICAgICogQG1lbWJlciB7b2JqZWN0fSAgICAgICAgIFxuICAgICAgICAgKiovXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7ICAgICAgICAgICAgICAgIFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBcHAgb3B0aW9uc1xuICAgICAgICAgKiBAbWVtYmVyIHtvYmplY3R9ICAgICAgICAgXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgICAgIC8vLi4uIGRlZmF1bHQgb3B0aW9ucyAgICAgICAgICAgIFxuICAgICAgICB9LCBvcHRpb25zKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRW52aXJvbm1lbnQgZmxhZ1xuICAgICAgICAgKiBAbWVtYmVyIHtzdHJpbmd9ICAgICAgICBcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZW52ID0gdGhpcy5vcHRpb25zLmVudiB8fCBwcm9jZXNzLmVudi5OT0RFX0VOViB8fCBcImRldmVsb3BtZW50XCI7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdvcmtpbmcgZGlyZWN0b3J5IG9mIHRoaXMgY2xpIGFwcFxuICAgICAgICAgKiBAbWVtYmVyIHtzdHJpbmd9ICAgICAgICAgXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLndvcmtpbmdQYXRoID0gdGhpcy5vcHRpb25zLndvcmtpbmdQYXRoID8gcGF0aC5yZXNvbHZlKHRoaXMub3B0aW9ucy53b3JraW5nUGF0aCkgOiBwcm9jZXNzLmN3ZCgpOyAgICAgXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogQ29uZmlnIHBhdGhcbiAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfSAgICAgICAgIFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jb25maWdQYXRoID0gdGhpcy50b0Fic29sdXRlUGF0aCh0aGlzLm9wdGlvbnMuY29uZmlnUGF0aCB8fCBMaXRlcmFsLkRFRkFVTFRfQ09ORklHX1BBVEgpOyAgICAgIFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbmZpZyBiYXNlbmFtZVxuICAgICAgICAgKiBAbWVtYmVyIHtzdHJpbmd9ICAgICAgICAgXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNvbmZpZ05hbWUgPSB0aGlzLm9wdGlvbnMuY29uZmlnTmFtZSB8fCBMaXRlcmFsLkFQUF9DRkdfTkFNRTsgICAgICAgIFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN0YXJ0IHRoZSBjb250YWluZXIuXG4gICAgICogQGZpcmVzIFNlcnZpY2VDb250YWluZXIjY29uZmlnTG9hZGVkXG4gICAgICogQGZpcmVzIFNlcnZpY2VDb250YWluZXIjcmVhZHlcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZS48U2VydmljZUNvbnRhaW5lcj59XG4gICAgICovXG4gICAgYXN5bmMgc3RhcnRfKCkgeyAgICAgICAgICAgIFxuICAgICAgICB0aGlzLl9mZWF0dXJlUmVnaXN0cnkgPSB7XG4gICAgICAgICAgICAvL2ZpcnN0bHkgbG9vayB1cCBcImZlYXR1cmVzXCIgdW5kZXIgY3VycmVudCB3b3JraW5nIHBhdGgsIGFuZCB0aGVuIHRyeSB0aGUgYnVpbHRpbiBmZWF0dXJlcyBwYXRoXG4gICAgICAgICAgICAnKic6IHRoaXMuX2dldEZlYXR1cmVGYWxsYmFja1BhdGgoKVxuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogTG9hZGVkIGZlYXR1cmVzLCBuYW1lID0+IGZlYXR1cmUgb2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXIge29iamVjdH0gICAgICAgICBcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZmVhdHVyZXMgPSB7fTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIExvYWRlZCBzZXJ2aWNlc1xuICAgICAgICAgKiBAbWVtYmVyIHtvYmplY3R9ICAgICAgICAgXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNlcnZpY2VzID0ge307ICAgICAgIFxuICAgICAgICBcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5sb2FkQ29uZmlnRnJvbU9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMuY29uZmlnID0gdGhpcy5vcHRpb25zLmNvbmZpZztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ29uZmlndXJhdGlvbiBsb2FkZXIgaW5zdGFuY2VcbiAgICAgICAgICAgICAqIEBtZW1iZXIge0NvbmZpZ0xvYWRlcn0gICAgICAgICBcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5jb25maWdMb2FkZXIgPSB0aGlzLm9wdGlvbnMuZGlzYWJsZUVudkF3YXJlQ29uZmlnID8gXG4gICAgICAgICAgICAgICAgbmV3IENvbmZpZ0xvYWRlcihuZXcgSnNvbkNvbmZpZ1Byb3ZpZGVyKHBhdGguam9pbih0aGlzLmNvbmZpZ1BhdGgsIHRoaXMuY29uZmlnTmFtZSArICcuanNvbicpKSwgdGhpcykgOiBcbiAgICAgICAgICAgICAgICBDb25maWdMb2FkZXIuY3JlYXRlRW52QXdhcmVKc29uTG9hZGVyKHRoaXMuY29uZmlnUGF0aCwgdGhpcy5jb25maWdOYW1lLCB0aGlzLmVudiwgdGhpcyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGF3YWl0IHRoaXMubG9hZENvbmZpZ18oKTsgICAgIFxuICAgICAgICB9ICAgXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbmZpZyBsb2FkZWQgZXZlbnQuXG4gICAgICAgICAqIEBldmVudCBTZXJ2aWNlQ29udGFpbmVyI2NvbmZpZ0xvYWRlZFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5lbWl0KCdjb25maWdMb2FkZWQnKTtcblxuICAgICAgICBpZiAoXy5pc0VtcHR5KHRoaXMuY29uZmlnKSkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ0VtcHR5IGNvbmZpZ3VyYXRpb24uIE5vdGhpbmcgdG8gZG8hIENvbmZpZyBwYXRoOiAnICsgdGhpcy5jb25maWdQYXRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IHRoaXMuX2xvYWRGZWF0dXJlc18oKTsgXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFwcCByZWFkeVxuICAgICAgICAgKiBAZXZlbnQgU2VydmljZUNvbnRhaW5lciNyZWFkeVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5lbWl0KCdyZWFkeScpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGbGFnIHNob3dpbmcgdGhlIGFwcCBpcyBzdGFydGVkIG9yIG5vdC5cbiAgICAgICAgICogQG1lbWJlciB7Ym9vbH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3RhcnRlZCA9IHRydWU7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdG9wIHRoZSBjb250YWluZXJcbiAgICAgKiBAZmlyZXMgU2VydmljZUNvbnRhaW5lciNzdG9wcGluZ1xuICAgICAqIEByZXR1cm5zIHtQcm9taXNlLjxTZXJ2aWNlQ29udGFpbmVyPn1cbiAgICAgKi9cbiAgICBhc3luYyBzdG9wXygpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFwcCBzdG9wcGluZ1xuICAgICAgICAgKiBAZXZlbnQgU2VydmljZUNvbnRhaW5lciNzdG9wcGluZ1xuICAgICAgICAgKi9cbiAgICAgICAgYXdhaXQgdGhpcy5lbWl0QXN5bmNfKCdzdG9wcGluZycpO1xuXG4gICAgICAgIHRoaXMuc3RhcnRlZCA9IGZhbHNlO1xuXG4gICAgICAgIGRlbGV0ZSB0aGlzLnNlcnZpY2VzO1xuICAgICAgICBkZWxldGUgdGhpcy5mZWF0dXJlcztcbiAgICAgICAgZGVsZXRlIHRoaXMuX2ZlYXR1cmVSZWdpc3RyeTtcblxuICAgICAgICBkZWxldGUgdGhpcy5jb25maWc7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmNvbmZpZ0xvYWRlcjsgIFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHtTZXJ2aWNlQ29udGFpbmVyfVxuICAgICAqL1xuICAgIGFzeW5jIGxvYWRDb25maWdfKCkge1xuICAgICAgICBsZXQgY29uZmlnVmFyaWFibGVzID0gdGhpcy5fZ2V0Q29uZmlnVmFyaWFibGVzKCk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFwcCBjb25maWd1cmF0aW9uXG4gICAgICAgICAqIEBtZW1iZXIge29iamVjdH0gICAgICAgICBcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY29uZmlnID0gYXdhaXQgdGhpcy5jb25maWdMb2FkZXIubG9hZF8oY29uZmlnVmFyaWFibGVzKTsgICBcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2xhdGUgYSByZWxhdGl2ZSBwYXRoIG9mIHRoaXMgYXBwIG1vZHVsZSB0byBhbiBhYnNvbHV0ZSBwYXRoICAgICBcbiAgICAgKiBAcGFyYW0ge2FycmF5fSBhcmdzIC0gQXJyYXkgb2YgcGF0aCBwYXJ0c1xuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgdG9BYnNvbHV0ZVBhdGgoLi4uYXJncykge1xuICAgICAgICBpZiAoYXJncy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLndvcmtpbmdQYXRoO1xuICAgICAgICB9ICAgICAgIFxuXG4gICAgICAgIHJldHVybiBwYXRoLnJlc29sdmUodGhpcy53b3JraW5nUGF0aCwgLi4uYXJncyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgYSBzZXJ2aWNlICAgICBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBzZXJ2aWNlT2JqZWN0XG4gICAgICogQHBhcmFtIHtib29sZWFufSBvdmVycmlkZVxuICAgICAqL1xuICAgIHJlZ2lzdGVyU2VydmljZShuYW1lLCBzZXJ2aWNlT2JqZWN0LCBvdmVycmlkZSkge1xuICAgICAgICBpZiAobmFtZSBpbiB0aGlzLnNlcnZpY2VzICYmICFvdmVycmlkZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTZXJ2aWNlIFwiJysgbmFtZSArJ1wiIGFscmVhZHkgcmVnaXN0ZXJlZCEnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2VydmljZXNbbmFtZV0gPSBzZXJ2aWNlT2JqZWN0O1xuICAgICAgICB0aGlzLmxvZygndmVyYm9zZScsIGBTZXJ2aWNlIFwiJHtuYW1lfVwiIHJlZ2lzdGVyZWQuYCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrIHdoZXRoZXIgYSBzZXJ2aWNlIGV4aXN0c1xuICAgICAqIEBwYXJhbSB7Kn0gbmFtZSBcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBoYXNTZXJ2aWNlKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIG5hbWUgaW4gdGhpcy5zZXJ2aWNlcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYSBzZXJ2aWNlIGZyb20gbW9kdWxlIGhpZXJhcmNoeSAgICAgXG4gICAgICogQHBhcmFtIG5hbWVcbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fVxuICAgICAqL1xuICAgIGdldFNlcnZpY2UobmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXJ2aWNlc1tuYW1lXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayB3aGV0aGVyIGEgZmVhdHVyZSBpcyBlbmFibGVkIGluIHRoZSBhcHAuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGZlYXR1cmUgXG4gICAgICogQHJldHVybnMge2Jvb2x9XG4gICAgICovXG4gICAgZW5hYmxlZChmZWF0dXJlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZlYXR1cmVzLmhhc093blByb3BlcnR5KGZlYXR1cmUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBtb3JlIG9yIG92ZXJpZGUgY3VycmVudCBmZWF0dXJlIHJlZ2lzdHJ5XG4gICAgICogQHBhcmFtIHtvYmplY3R9IHJlZ2lzdHJ5IFxuICAgICAqL1xuICAgIGFkZEZlYXR1cmVSZWdpc3RyeShyZWdpc3RyeSkge1xuICAgICAgICAvLyAqIGlzIHVzZWQgYXMgdGhlIGZhbGxiYWNrIGxvY2F0aW9uIHRvIGZpbmQgYSBmZWF0dXJlXG4gICAgICAgIGlmIChyZWdpc3RyeS5oYXNPd25Qcm9wZXJ0eSgnKicpKSB7XG4gICAgICAgICAgICBVdGlsLnB1dEludG9CdWNrZXQodGhpcy5fZmVhdHVyZVJlZ2lzdHJ5LCAnKicsIHJlZ2lzdHJ5WycqJ10pO1xuICAgICAgICB9XG5cbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLl9mZWF0dXJlUmVnaXN0cnksIF8ub21pdChyZWdpc3RyeSwgWycqJ10pKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IGxvZyBtZXRob2QsIG1heSBiZSBvdmVycmlkZSBieSBsb2dnZXJzIGZlYXR1cmVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gLSBMb2cgbGV2ZWxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gLSBMb2cgbWVzc2FnZVxuICAgICAqIEBwYXJhbSB7Li4ub2JqZWN0fSAtIEV4dHJhIG1ldGEgZGF0YVxuICAgICAqIEByZXR1cm5zIHtTZXJ2aWNlQ29udGFpbmVyfVxuICAgICAqL1xuICAgIGxvZyhsZXZlbCwgbWVzc2FnZSwgLi4ucmVzdCkge1xuICAgICAgICB0aGlzLmxvZ2dlciAmJiB0aGlzLmxvZ2dlci5sb2cobGV2ZWwsIG1lc3NhZ2UsIC4uLnJlc3QpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBfZ2V0Q29uZmlnVmFyaWFibGVzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2FwcCc6IHRoaXMsICAgICAgICAgICAgXG4gICAgICAgICAgICAnbG9nJzogd2luc3RvbixcbiAgICAgICAgICAgICdlbnYnOiB0aGlzLmVudlxuICAgICAgICB9O1xuICAgIH1cblxuICAgIF9nZXRGZWF0dXJlRmFsbGJhY2tQYXRoKCkge1xuICAgICAgICByZXR1cm4gWyBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCBMaXRlcmFsLkZFQVRVUkVTX1BBVEgpLCB0aGlzLnRvQWJzb2x1dGVQYXRoKExpdGVyYWwuRkVBVFVSRVNfUEFUSCkgXTtcbiAgICB9XG5cbiAgICBhc3luYyBlbWl0QXN5bmNfKGV2ZW50KSB7XG4gICAgICAgIGxldCBhc3luY0hhbmRsZXJzID0gW107XG4gICAgICAgIHRoaXMuZW1pdChldmVudCwgYXN5bmNIYW5kbGVycyk7XG4gICAgICAgIGlmIChhc3luY0hhbmRsZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGF3YWl0IFByb21pc2UuYWxsKGFzeW5jSGFuZGxlcnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIExvYWQgZmVhdHVyZXNcbiAgICAgKiBAcHJpdmF0ZSAgICAgXG4gICAgICogQHJldHVybnMge2Jvb2x9XG4gICAgICovXG4gICAgYXN5bmMgX2xvYWRGZWF0dXJlc18oKSB7ICAgICAgIFxuICAgICAgICAvLyBydW4gY29uZmlnIHN0YWdlIHNlcGFyYXRlbHkgZmlyc3RcbiAgICAgICAgbGV0IGNvbmZpZ1N0YWdlRmVhdHVyZXMgPSBbXTsgICAgICAgIFxuXG4gICAgICAgIC8vIGxvYWQgZmVhdHVyZXNcbiAgICAgICAgXy5mb3JPd24odGhpcy5jb25maWcsIChmZWF0dXJlT3B0aW9ucywgbmFtZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbGxvd2VkRmVhdHVyZXMgJiZcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuYWxsb3dlZEZlYXR1cmVzLmluZGV4T2YobmFtZSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgLy9za2lwIGRpc2FibGVkIGZlYXR1cmVzXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgZmVhdHVyZTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZmVhdHVyZSA9IHRoaXMuX2xvYWRGZWF0dXJlKG5hbWUpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHsgICAgIFxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTsgICAgICAgICAgIFxuICAgICAgICAgICAgfSAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZmVhdHVyZSAmJiBmZWF0dXJlLnR5cGUgPT09IEZlYXR1cmUuQ09ORikgeyAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjb25maWdTdGFnZUZlYXR1cmVzLnB1c2goWyBuYW1lLCBmZWF0dXJlLmxvYWRfLCBmZWF0dXJlT3B0aW9ucyBdKTtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5jb25maWdbbmFtZV07XG4gICAgICAgICAgICB9ICAgIFxuICAgICAgICB9KTsgICAgICAgIFxuICAgICAgICBcbiAgICAgICAgaWYgKGNvbmZpZ1N0YWdlRmVhdHVyZXMubGVuZ3RoID4gMCkgeyAgICAgIFxuICAgICAgICAgICAgLy9jb25maWd1cmF0aW9uIGZlYXR1cmVzIHdpbGwgYmUgb3ZlcnJpZGVkIGJ5IG5ld2x5IGxvYWRlZCBjb25maWdcbiAgICAgICAgICAgIGNvbmZpZ1N0YWdlRmVhdHVyZXMuZm9yRWFjaCgoWyBuYW1lIF0pID0+IHsgZGVsZXRlIHRoaXMuY29uZmlnW25hbWVdOyB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgYXdhaXQgdGhpcy5fbG9hZEZlYXR1cmVHcm91cF8oY29uZmlnU3RhZ2VGZWF0dXJlcywgRmVhdHVyZS5DT05GKTtcblxuICAgICAgICAgICAgLy9yZWxvYWQgYWxsIGZlYXR1cmVzIGlmIGFueSB0eXBlIG9mIGNvbmZpZ3VyYXRpb24gZmVhdHVyZSBleGlzdHMgICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9sb2FkRmVhdHVyZXNfKCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZmVhdHVyZUdyb3VwcyA9IHsgICAgICAgICAgICBcbiAgICAgICAgICAgIFtGZWF0dXJlLklOSVRdOiBbXSwgICAgICAgICAgICBcbiAgICAgICAgICAgIFtGZWF0dXJlLlNFUlZJQ0VdOiBbXSwgICAgICAgICAgICBcbiAgICAgICAgICAgIFtGZWF0dXJlLlBMVUdJTl06IFtdLFxuICAgICAgICAgICAgW0ZlYXR1cmUuUkVBRFldOiBbXVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIGxvYWQgZmVhdHVyZXNcbiAgICAgICAgXy5mb3JPd24odGhpcy5jb25maWcsIChmZWF0dXJlT3B0aW9ucywgbmFtZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbGxvd2VkRmVhdHVyZXMgJiZcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuYWxsb3dlZEZlYXR1cmVzLmluZGV4T2YobmFtZSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgLy9za2lwIGRpc2FibGVkIGZlYXR1cmVzXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgZmVhdHVyZSA9IHRoaXMuX2xvYWRGZWF0dXJlKG5hbWUpO1xuXG4gICAgICAgICAgICBpZiAoIShmZWF0dXJlLnR5cGUgaW4gZmVhdHVyZUdyb3VwcykpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgZmVhdHVyZSB0eXBlLiBGZWF0dXJlOiAke25hbWV9LCB0eXBlOiAke2ZlYXR1cmUudHlwZX1gKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZmVhdHVyZUdyb3Vwc1tmZWF0dXJlLnR5cGVdLnB1c2goWyBuYW1lLCBmZWF0dXJlLmxvYWRfLCBmZWF0dXJlT3B0aW9ucyBdKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIFV0aWwuZWFjaEFzeW5jXyhmZWF0dXJlR3JvdXBzLCAoZ3JvdXAsIGxldmVsKSA9PiB0aGlzLl9sb2FkRmVhdHVyZUdyb3VwXyhncm91cCwgbGV2ZWwpKTtcbiAgICB9XG5cbiAgICBhc3luYyBfbG9hZEZlYXR1cmVHcm91cF8oZmVhdHVyZUdyb3VwLCBncm91cExldmVsKSB7ICAgICAgICBcbiAgICAgICAgYXdhaXQgdGhpcy5lbWl0QXN5bmNfKCdiZWZvcmU6JyArIGdyb3VwTGV2ZWwpO1xuICAgICAgICB0aGlzLmxvZygndmVyYm9zZScsIGBMb2FkaW5nIFwiJHtncm91cExldmVsfVwiIGZlYXR1cmUgZ3JvdXAgLi4uYCk7XG5cbiAgICAgICAgYXdhaXQgVXRpbC5lYWNoQXN5bmNfKGZlYXR1cmVHcm91cCwgYXN5bmMgKFsgbmFtZSwgbG9hZF8sIG9wdGlvbnMgXSkgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZW1pdEFzeW5jXygnYmVmb3JlOmxvYWQ6JyArIG5hbWUpO1xuICAgICAgICAgICAgdGhpcy5sb2coJ3ZlcmJvc2UnLCBgTG9hZGluZyBmZWF0dXJlIFwiJHtuYW1lfVwiIC4uLmApO1xuXG4gICAgICAgICAgICBhd2FpdCBsb2FkXyh0aGlzLCBvcHRpb25zKTsgICBcbiAgICAgICAgICAgIHRoaXMuZmVhdHVyZXNbbmFtZV0ubG9hZGVkID0gdHJ1ZTsgICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMubG9nKCd2ZXJib3NlJywgYEZlYXR1cmUgXCIke25hbWV9XCIgbG9hZGVkLiBbT0tdYCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZW1pdEFzeW5jXygnYWZ0ZXI6bG9hZDonICsgbmFtZSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmxvZygndmVyYm9zZScsIGBGaW5pc2hlZCBsb2FkaW5nIFwiJHtncm91cExldmVsfVwiIGZlYXR1cmUgZ3JvdXAuIFtPS11gKTtcblxuICAgICAgICBhd2FpdCB0aGlzLmVtaXRBc3luY18oJ2FmdGVyOicgKyBncm91cExldmVsKTtcbiAgICB9ICAgIFxuXG4gICAgLyoqXG4gICAgICogTG9hZCBhIGZlYXR1cmUgb2JqZWN0IGJ5IG5hbWUuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZmVhdHVyZSBcbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fSAgICAgXG4gICAgICovXG4gICAgX2xvYWRGZWF0dXJlKGZlYXR1cmUpIHtcbiAgICAgICAgbGV0IGZlYXR1cmVPYmplY3QgPSB0aGlzLmZlYXR1cmVzW2ZlYXR1cmVdO1xuICAgICAgICBpZiAoZmVhdHVyZU9iamVjdCkgcmV0dXJuIGZlYXR1cmVPYmplY3Q7XG5cbiAgICAgICAgbGV0IGZlYXR1cmVQYXRoO1xuXG4gICAgICAgIGlmICh0aGlzLl9mZWF0dXJlUmVnaXN0cnkuaGFzT3duUHJvcGVydHkoZmVhdHVyZSkpIHsgICAgICAgICAgXG4gICAgICAgICAgICAvL2xvYWQgYnkgcmVnaXN0cnkgZW50cnlcbiAgICAgICAgICAgIGxldCBsb2FkT3B0aW9uID0gdGhpcy5fZmVhdHVyZVJlZ2lzdHJ5W2ZlYXR1cmVdOyAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShsb2FkT3B0aW9uKSkge1xuICAgICAgICAgICAgICAgIGlmIChsb2FkT3B0aW9uLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgcmVnaXN0cnkgdmFsdWUgZm9yIGZlYXR1cmUgXCIke2ZlYXR1cmV9XCIuYCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZmVhdHVyZVBhdGggPSBsb2FkT3B0aW9uWzBdO1xuICAgICAgICAgICAgICAgIGZlYXR1cmVPYmplY3QgPSByZXF1aXJlKGZlYXR1cmVQYXRoKTtcblxuICAgICAgICAgICAgICAgIGlmIChsb2FkT3B0aW9uLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9vbmUgbW9kdWxlIG1heSBjb250YWlucyBtb3JlIHRoYW4gb25lIGZlYXR1cmVcbiAgICAgICAgICAgICAgICAgICAgZmVhdHVyZU9iamVjdCA9IFV0aWwuZ2V0VmFsdWVCeVBhdGgoZmVhdHVyZU9iamVjdCwgbG9hZE9wdGlvblsxXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmZWF0dXJlUGF0aCA9IGxvYWRPcHRpb247XG4gICAgICAgICAgICAgICAgZmVhdHVyZU9iamVjdCA9IHJlcXVpcmUoZmVhdHVyZVBhdGgpO1xuICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvL2xvYWQgYnkgZmFsbGJhY2sgcGF0aHNcbiAgICAgICAgICAgIGxldCBzZWFyY2hpbmdQYXRoID0gdGhpcy5fZmVhdHVyZVJlZ2lzdHJ5WycqJ107XG4gICAgXG4gICAgICAgICAgICAvL3JldmVyc2UgZmFsbGJhY2sgc3RhY2tcbiAgICAgICAgICAgIGxldCBmb3VuZCA9IF8uZmluZExhc3Qoc2VhcmNoaW5nUGF0aCwgcCA9PiB7XG4gICAgICAgICAgICAgICAgZmVhdHVyZVBhdGggPSBwYXRoLmpvaW4ocCwgZmVhdHVyZSArICcuanMnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnMuZXhpc3RzU3luYyhmZWF0dXJlUGF0aCk7XG4gICAgICAgICAgICB9KTsgICAgICAgIFxuXG4gICAgICAgICAgICBpZiAoIWZvdW5kKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBEb24ndCBrbm93IHdoZXJlIHRvIGxvYWQgZmVhdHVyZSBcIiR7ZmVhdHVyZX1cIi5gKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZmVhdHVyZU9iamVjdCA9IHJlcXVpcmUoZmVhdHVyZVBhdGgpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoIUZlYXR1cmUudmFsaWRhdGUoZmVhdHVyZU9iamVjdCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBmZWF0dXJlIG9iamVjdCBsb2FkZWQgZnJvbSBcIiR7ZmVhdHVyZVBhdGh9XCIuYCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmZlYXR1cmVzW2ZlYXR1cmVdID0gZmVhdHVyZU9iamVjdDtcbiAgICAgICAgcmV0dXJuIGZlYXR1cmVPYmplY3Q7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNlcnZpY2VDb250YWluZXI7Il19