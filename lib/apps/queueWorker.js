"use strict";

require("source-map-support/register");

const normalWorker = require('./worker');

function startQueueWorker(workingPath, configName, queueService, queueName, worker, initializer) {
  let workerName = queueName + 'Worker';
  let workerId = workerName;
  return normalWorker(workingPath, configName, async app => {
    if (initializer) {
      await initializer(app);
    }

    let messageQueue = app.getService(queueService);
    app.log('info', `Queue worker "${workerId}" is started and waiting for message on queue "${queueName}" ...`);
    await messageQueue.workerConsume_(queueName, (channel, msg) => {
      let info;

      try {
        info = JSON.parse(msg.content.toString());
      } catch (error) {
        app.log('error', 'The incoming message is not a valid JSON string.');
        channel.ack(msg);
        return;
      }

      if (info && info.$mock) {
        app.log('info', 'A mock message received.\nMessage: ' + raw);
        channel.ack(msg);
        return;
      }

      worker(app, info).then(shouldAck => {
        if (shouldAck) {
          channel.ack(msg);
        } else {
          channel.nack(msg);
        }
      }).catch(error => {
        app.log('error', error.message, { ...error.info,
          stack: error.stack
        });

        if (error.needRetry) {
          channel.nack(msg);
        } else {
          channel.ack(msg);
        }
      });
    });
  }, workerId, true);
}

module.exports = startQueueWorker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcHBzL3F1ZXVlV29ya2VyLmpzIl0sIm5hbWVzIjpbIm5vcm1hbFdvcmtlciIsInJlcXVpcmUiLCJzdGFydFF1ZXVlV29ya2VyIiwid29ya2luZ1BhdGgiLCJjb25maWdOYW1lIiwicXVldWVTZXJ2aWNlIiwicXVldWVOYW1lIiwid29ya2VyIiwiaW5pdGlhbGl6ZXIiLCJ3b3JrZXJOYW1lIiwid29ya2VySWQiLCJhcHAiLCJtZXNzYWdlUXVldWUiLCJnZXRTZXJ2aWNlIiwibG9nIiwid29ya2VyQ29uc3VtZV8iLCJjaGFubmVsIiwibXNnIiwiaW5mbyIsIkpTT04iLCJwYXJzZSIsImNvbnRlbnQiLCJ0b1N0cmluZyIsImVycm9yIiwiYWNrIiwiJG1vY2siLCJyYXciLCJ0aGVuIiwic2hvdWxkQWNrIiwibmFjayIsImNhdGNoIiwibWVzc2FnZSIsInN0YWNrIiwibmVlZFJldHJ5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNQSxZQUFZLEdBQUdDLE9BQU8sQ0FBQyxVQUFELENBQTVCOztBQVlBLFNBQVNDLGdCQUFULENBQTBCQyxXQUExQixFQUF1Q0MsVUFBdkMsRUFBbURDLFlBQW5ELEVBQWlFQyxTQUFqRSxFQUE0RUMsTUFBNUUsRUFBb0ZDLFdBQXBGLEVBQWlHO0FBQzdGLE1BQUlDLFVBQVUsR0FBR0gsU0FBUyxHQUFHLFFBQTdCO0FBQ0EsTUFBSUksUUFBUSxHQUFHRCxVQUFmO0FBRUEsU0FBT1QsWUFBWSxDQUFDRyxXQUFELEVBQWNDLFVBQWQsRUFBMEIsTUFBT08sR0FBUCxJQUFlO0FBQ3hELFFBQUlILFdBQUosRUFBaUI7QUFDYixZQUFNQSxXQUFXLENBQUNHLEdBQUQsQ0FBakI7QUFDSDs7QUFFRCxRQUFJQyxZQUFZLEdBQUdELEdBQUcsQ0FBQ0UsVUFBSixDQUFlUixZQUFmLENBQW5CO0FBRUFNLElBQUFBLEdBQUcsQ0FBQ0csR0FBSixDQUFRLE1BQVIsRUFBaUIsaUJBQWdCSixRQUFTLGtEQUFpREosU0FBVSxPQUFyRztBQUVBLFVBQU1NLFlBQVksQ0FBQ0csY0FBYixDQUE0QlQsU0FBNUIsRUFBdUMsQ0FBQ1UsT0FBRCxFQUFVQyxHQUFWLEtBQWtCO0FBQzNELFVBQUlDLElBQUo7O0FBRUEsVUFBSTtBQUNBQSxRQUFBQSxJQUFJLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXSCxHQUFHLENBQUNJLE9BQUosQ0FBWUMsUUFBWixFQUFYLENBQVA7QUFDSCxPQUZELENBRUUsT0FBT0MsS0FBUCxFQUFjO0FBQ1paLFFBQUFBLEdBQUcsQ0FBQ0csR0FBSixDQUFRLE9BQVIsRUFBaUIsa0RBQWpCO0FBQ0FFLFFBQUFBLE9BQU8sQ0FBQ1EsR0FBUixDQUFZUCxHQUFaO0FBQ0E7QUFDSDs7QUFFRCxVQUFJQyxJQUFJLElBQUlBLElBQUksQ0FBQ08sS0FBakIsRUFBd0I7QUFDcEJkLFFBQUFBLEdBQUcsQ0FBQ0csR0FBSixDQUFRLE1BQVIsRUFBZ0Isd0NBQXdDWSxHQUF4RDtBQUNBVixRQUFBQSxPQUFPLENBQUNRLEdBQVIsQ0FBWVAsR0FBWjtBQUNBO0FBQ0g7O0FBRURWLE1BQUFBLE1BQU0sQ0FBQ0ksR0FBRCxFQUFNTyxJQUFOLENBQU4sQ0FBa0JTLElBQWxCLENBQXdCQyxTQUFELElBQWU7QUFDbEMsWUFBSUEsU0FBSixFQUFlO0FBQ1haLFVBQUFBLE9BQU8sQ0FBQ1EsR0FBUixDQUFZUCxHQUFaO0FBQ0gsU0FGRCxNQUVPO0FBQ0hELFVBQUFBLE9BQU8sQ0FBQ2EsSUFBUixDQUFhWixHQUFiO0FBQ0g7QUFDSixPQU5ELEVBTUdhLEtBTkgsQ0FNU1AsS0FBSyxJQUFJO0FBQ2RaLFFBQUFBLEdBQUcsQ0FBQ0csR0FBSixDQUFRLE9BQVIsRUFBaUJTLEtBQUssQ0FBQ1EsT0FBdkIsRUFBZ0MsRUFBRSxHQUFHUixLQUFLLENBQUNMLElBQVg7QUFBaUJjLFVBQUFBLEtBQUssRUFBRVQsS0FBSyxDQUFDUztBQUE5QixTQUFoQzs7QUFFQSxZQUFJVCxLQUFLLENBQUNVLFNBQVYsRUFBcUI7QUFDakJqQixVQUFBQSxPQUFPLENBQUNhLElBQVIsQ0FBYVosR0FBYjtBQUNILFNBRkQsTUFFTztBQUNIRCxVQUFBQSxPQUFPLENBQUNRLEdBQVIsQ0FBWVAsR0FBWjtBQUNIO0FBQ0osT0FkRDtBQWVILEtBaENLLENBQU47QUFrQ0gsR0EzQ2tCLEVBMkNoQlAsUUEzQ2dCLEVBMkNOLElBM0NNLENBQW5CO0FBNENIOztBQUVEd0IsTUFBTSxDQUFDQyxPQUFQLEdBQWlCakMsZ0JBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IG5vcm1hbFdvcmtlciA9IHJlcXVpcmUoJy4vd29ya2VyJyk7XG5cbi8qKlxuICogU3RhcnQgYSBtZXNzYWdlIHF1ZXVlIHdvcmtlci5cbiAqIEBwYXJhbSB7Kn0gd29ya2luZ1BhdGggXG4gKiBAcGFyYW0geyp9IGNvbmZpZ05hbWUgXG4gKiBAcGFyYW0geyp9IHF1ZXVlU2VydmljZSBcbiAqIEBwYXJhbSB7Kn0gcXVldWVOYW1lIFxuICogQHBhcmFtIHsqfSB3b3JrZXIgXG4gKiBAcGFyYW0geyp9IHdvcmtlckluZGV4IFxuICogQHBhcmFtIHsqfSBpbml0aWFsaXplciBcbiAqL1xuZnVuY3Rpb24gc3RhcnRRdWV1ZVdvcmtlcih3b3JraW5nUGF0aCwgY29uZmlnTmFtZSwgcXVldWVTZXJ2aWNlLCBxdWV1ZU5hbWUsIHdvcmtlciwgaW5pdGlhbGl6ZXIpIHtcbiAgICBsZXQgd29ya2VyTmFtZSA9IHF1ZXVlTmFtZSArICdXb3JrZXInO1xuICAgIGxldCB3b3JrZXJJZCA9IHdvcmtlck5hbWU7ICAgIFxuXG4gICAgcmV0dXJuIG5vcm1hbFdvcmtlcih3b3JraW5nUGF0aCwgY29uZmlnTmFtZSwgYXN5bmMgKGFwcCkgPT4ge1xuICAgICAgICBpZiAoaW5pdGlhbGl6ZXIpIHtcbiAgICAgICAgICAgIGF3YWl0IGluaXRpYWxpemVyKGFwcCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbWVzc2FnZVF1ZXVlID0gYXBwLmdldFNlcnZpY2UocXVldWVTZXJ2aWNlKTtcblxuICAgICAgICBhcHAubG9nKCdpbmZvJywgYFF1ZXVlIHdvcmtlciBcIiR7d29ya2VySWR9XCIgaXMgc3RhcnRlZCBhbmQgd2FpdGluZyBmb3IgbWVzc2FnZSBvbiBxdWV1ZSBcIiR7cXVldWVOYW1lfVwiIC4uLmApO1xuXG4gICAgICAgIGF3YWl0IG1lc3NhZ2VRdWV1ZS53b3JrZXJDb25zdW1lXyhxdWV1ZU5hbWUsIChjaGFubmVsLCBtc2cpID0+IHsgICAgICAgICAgICBcbiAgICAgICAgICAgIGxldCBpbmZvO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGluZm8gPSBKU09OLnBhcnNlKG1zZy5jb250ZW50LnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBhcHAubG9nKCdlcnJvcicsICdUaGUgaW5jb21pbmcgbWVzc2FnZSBpcyBub3QgYSB2YWxpZCBKU09OIHN0cmluZy4nKTtcbiAgICAgICAgICAgICAgICBjaGFubmVsLmFjayhtc2cpOyAgXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaW5mbyAmJiBpbmZvLiRtb2NrKSB7XG4gICAgICAgICAgICAgICAgYXBwLmxvZygnaW5mbycsICdBIG1vY2sgbWVzc2FnZSByZWNlaXZlZC5cXG5NZXNzYWdlOiAnICsgcmF3KTtcbiAgICAgICAgICAgICAgICBjaGFubmVsLmFjayhtc2cpOyAgXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB3b3JrZXIoYXBwLCBpbmZvKS50aGVuKChzaG91bGRBY2spID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoc2hvdWxkQWNrKSB7ICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgY2hhbm5lbC5hY2sobXNnKTsgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYW5uZWwubmFjayhtc2cpOyAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgIGFwcC5sb2coJ2Vycm9yJywgZXJyb3IubWVzc2FnZSwgeyAuLi5lcnJvci5pbmZvLCBzdGFjazogZXJyb3Iuc3RhY2sgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IubmVlZFJldHJ5KSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYW5uZWwubmFjayhtc2cpOyAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhbm5lbC5hY2sobXNnKTtcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgfSwgd29ya2VySWQsIHRydWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YXJ0UXVldWVXb3JrZXI7Il19