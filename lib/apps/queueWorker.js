"use strict";

require("source-map-support/register");

const normalWorker = require('./worker');

function startQueueWorker(workingPath, configName, queueService, queueName, worker, workerIndex = 0, ackOnError = false) {
  let workerName = queueName + 'Worker';
  let workerId = workerName + workerIndex.toString();
  return normalWorker(workingPath, configName, async app => {
    let messageQueue = app.getService(queueService);
    app.log('info', `Queue worker "${workerId}" is started and waiting for message on queue "${queueName}" ...`);
    await messageQueue.workerConsume_(queueName, (channel, msg) => {
      let info;

      try {
        info = JSON.parse(msg.content.toString());
      } catch (error) {
        app.log('error', 'The incoming message is not a valid JSON string.');
        channel.ack(msg);
        return;
      }

      if (info && info.$mock) {
        app.log('info', 'A mock message received.\nMessage: ' + raw);
        channel.ack(msg);
        return;
      }

      worker(app, info).then(shouldAck => {
        if (shouldAck) {
          channel.ack(msg);
        } else {
          channel.nack(msg);
        }
      }).catch(error => {
        app.log('error', error.message, { ...error.info,
          stack: error.stack
        });

        if (error.needRetry) {
          channel.nack(msg);
        } else if (ackOnError) {
          channel.ack(msg);
        } else {
          channel.nack(msg);
        }
      });
    });
  }, workerId, true);
}

module.exports = startQueueWorker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcHBzL3F1ZXVlV29ya2VyLmpzIl0sIm5hbWVzIjpbIm5vcm1hbFdvcmtlciIsInJlcXVpcmUiLCJzdGFydFF1ZXVlV29ya2VyIiwid29ya2luZ1BhdGgiLCJjb25maWdOYW1lIiwicXVldWVTZXJ2aWNlIiwicXVldWVOYW1lIiwid29ya2VyIiwid29ya2VySW5kZXgiLCJhY2tPbkVycm9yIiwid29ya2VyTmFtZSIsIndvcmtlcklkIiwidG9TdHJpbmciLCJhcHAiLCJtZXNzYWdlUXVldWUiLCJnZXRTZXJ2aWNlIiwibG9nIiwid29ya2VyQ29uc3VtZV8iLCJjaGFubmVsIiwibXNnIiwiaW5mbyIsIkpTT04iLCJwYXJzZSIsImNvbnRlbnQiLCJlcnJvciIsImFjayIsIiRtb2NrIiwicmF3IiwidGhlbiIsInNob3VsZEFjayIsIm5hY2siLCJjYXRjaCIsIm1lc3NhZ2UiLCJzdGFjayIsIm5lZWRSZXRyeSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTUEsWUFBWSxHQUFHQyxPQUFPLENBQUMsVUFBRCxDQUE1Qjs7QUFZQSxTQUFTQyxnQkFBVCxDQUEwQkMsV0FBMUIsRUFBdUNDLFVBQXZDLEVBQW1EQyxZQUFuRCxFQUFpRUMsU0FBakUsRUFBNEVDLE1BQTVFLEVBQW9GQyxXQUFXLEdBQUcsQ0FBbEcsRUFBcUdDLFVBQVUsR0FBRyxLQUFsSCxFQUF5SDtBQUNySCxNQUFJQyxVQUFVLEdBQUdKLFNBQVMsR0FBRyxRQUE3QjtBQUNBLE1BQUlLLFFBQVEsR0FBR0QsVUFBVSxHQUFHRixXQUFXLENBQUNJLFFBQVosRUFBNUI7QUFFQSxTQUFPWixZQUFZLENBQUNHLFdBQUQsRUFBY0MsVUFBZCxFQUEwQixNQUFPUyxHQUFQLElBQWU7QUFDeEQsUUFBSUMsWUFBWSxHQUFHRCxHQUFHLENBQUNFLFVBQUosQ0FBZVYsWUFBZixDQUFuQjtBQUVBUSxJQUFBQSxHQUFHLENBQUNHLEdBQUosQ0FBUSxNQUFSLEVBQWlCLGlCQUFnQkwsUUFBUyxrREFBaURMLFNBQVUsT0FBckc7QUFFQSxVQUFNUSxZQUFZLENBQUNHLGNBQWIsQ0FBNEJYLFNBQTVCLEVBQXVDLENBQUNZLE9BQUQsRUFBVUMsR0FBVixLQUFrQjtBQUMzRCxVQUFJQyxJQUFKOztBQUVBLFVBQUk7QUFDQUEsUUFBQUEsSUFBSSxHQUFHQyxJQUFJLENBQUNDLEtBQUwsQ0FBV0gsR0FBRyxDQUFDSSxPQUFKLENBQVlYLFFBQVosRUFBWCxDQUFQO0FBQ0gsT0FGRCxDQUVFLE9BQU9ZLEtBQVAsRUFBYztBQUNaWCxRQUFBQSxHQUFHLENBQUNHLEdBQUosQ0FBUSxPQUFSLEVBQWlCLGtEQUFqQjtBQUNBRSxRQUFBQSxPQUFPLENBQUNPLEdBQVIsQ0FBWU4sR0FBWjtBQUNBO0FBQ0g7O0FBRUQsVUFBSUMsSUFBSSxJQUFJQSxJQUFJLENBQUNNLEtBQWpCLEVBQXdCO0FBQ3BCYixRQUFBQSxHQUFHLENBQUNHLEdBQUosQ0FBUSxNQUFSLEVBQWdCLHdDQUF3Q1csR0FBeEQ7QUFDQVQsUUFBQUEsT0FBTyxDQUFDTyxHQUFSLENBQVlOLEdBQVo7QUFDQTtBQUNIOztBQUVEWixNQUFBQSxNQUFNLENBQUNNLEdBQUQsRUFBTU8sSUFBTixDQUFOLENBQWtCUSxJQUFsQixDQUF3QkMsU0FBRCxJQUFlO0FBQ2xDLFlBQUlBLFNBQUosRUFBZTtBQUNYWCxVQUFBQSxPQUFPLENBQUNPLEdBQVIsQ0FBWU4sR0FBWjtBQUNILFNBRkQsTUFFTztBQUNIRCxVQUFBQSxPQUFPLENBQUNZLElBQVIsQ0FBYVgsR0FBYjtBQUNIO0FBQ0osT0FORCxFQU1HWSxLQU5ILENBTVNQLEtBQUssSUFBSTtBQUNkWCxRQUFBQSxHQUFHLENBQUNHLEdBQUosQ0FBUSxPQUFSLEVBQWlCUSxLQUFLLENBQUNRLE9BQXZCLEVBQWdDLEVBQUUsR0FBR1IsS0FBSyxDQUFDSixJQUFYO0FBQWlCYSxVQUFBQSxLQUFLLEVBQUVULEtBQUssQ0FBQ1M7QUFBOUIsU0FBaEM7O0FBRUEsWUFBSVQsS0FBSyxDQUFDVSxTQUFWLEVBQXFCO0FBQ2pCaEIsVUFBQUEsT0FBTyxDQUFDWSxJQUFSLENBQWFYLEdBQWI7QUFDSCxTQUZELE1BRU8sSUFBSVYsVUFBSixFQUFnQjtBQUNuQlMsVUFBQUEsT0FBTyxDQUFDTyxHQUFSLENBQVlOLEdBQVo7QUFDSCxTQUZNLE1BRUE7QUFDSEQsVUFBQUEsT0FBTyxDQUFDWSxJQUFSLENBQWFYLEdBQWI7QUFDSDtBQUNKLE9BaEJEO0FBaUJILEtBbENLLENBQU47QUFvQ0gsR0F6Q2tCLEVBeUNoQlIsUUF6Q2dCLEVBeUNOLElBekNNLENBQW5CO0FBMENIOztBQUVEd0IsTUFBTSxDQUFDQyxPQUFQLEdBQWlCbEMsZ0JBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IG5vcm1hbFdvcmtlciA9IHJlcXVpcmUoJy4vd29ya2VyJyk7XG5cbi8qKlxuICogU3RhcnQgYSBtZXNzYWdlIHF1ZXVlIHdvcmtlci5cbiAqIEBwYXJhbSB7Kn0gd29ya2luZ1BhdGggXG4gKiBAcGFyYW0geyp9IGNvbmZpZ05hbWUgXG4gKiBAcGFyYW0geyp9IHF1ZXVlU2VydmljZSBcbiAqIEBwYXJhbSB7Kn0gcXVldWVOYW1lIFxuICogQHBhcmFtIHsqfSB3b3JrZXIgXG4gKiBAcGFyYW0geyp9IHdvcmtlckluZGV4IFxuICogQHBhcmFtIHsqfSBhY2tPbkVycm9yIFxuICovXG5mdW5jdGlvbiBzdGFydFF1ZXVlV29ya2VyKHdvcmtpbmdQYXRoLCBjb25maWdOYW1lLCBxdWV1ZVNlcnZpY2UsIHF1ZXVlTmFtZSwgd29ya2VyLCB3b3JrZXJJbmRleCA9IDAsIGFja09uRXJyb3IgPSBmYWxzZSkge1xuICAgIGxldCB3b3JrZXJOYW1lID0gcXVldWVOYW1lICsgJ1dvcmtlcic7XG4gICAgbGV0IHdvcmtlcklkID0gd29ya2VyTmFtZSArIHdvcmtlckluZGV4LnRvU3RyaW5nKCk7ICAgIFxuXG4gICAgcmV0dXJuIG5vcm1hbFdvcmtlcih3b3JraW5nUGF0aCwgY29uZmlnTmFtZSwgYXN5bmMgKGFwcCkgPT4ge1xuICAgICAgICBsZXQgbWVzc2FnZVF1ZXVlID0gYXBwLmdldFNlcnZpY2UocXVldWVTZXJ2aWNlKTtcblxuICAgICAgICBhcHAubG9nKCdpbmZvJywgYFF1ZXVlIHdvcmtlciBcIiR7d29ya2VySWR9XCIgaXMgc3RhcnRlZCBhbmQgd2FpdGluZyBmb3IgbWVzc2FnZSBvbiBxdWV1ZSBcIiR7cXVldWVOYW1lfVwiIC4uLmApO1xuXG4gICAgICAgIGF3YWl0IG1lc3NhZ2VRdWV1ZS53b3JrZXJDb25zdW1lXyhxdWV1ZU5hbWUsIChjaGFubmVsLCBtc2cpID0+IHsgICAgICAgICAgICBcbiAgICAgICAgICAgIGxldCBpbmZvO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGluZm8gPSBKU09OLnBhcnNlKG1zZy5jb250ZW50LnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBhcHAubG9nKCdlcnJvcicsICdUaGUgaW5jb21pbmcgbWVzc2FnZSBpcyBub3QgYSB2YWxpZCBKU09OIHN0cmluZy4nKTtcbiAgICAgICAgICAgICAgICBjaGFubmVsLmFjayhtc2cpOyAgXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaW5mbyAmJiBpbmZvLiRtb2NrKSB7XG4gICAgICAgICAgICAgICAgYXBwLmxvZygnaW5mbycsICdBIG1vY2sgbWVzc2FnZSByZWNlaXZlZC5cXG5NZXNzYWdlOiAnICsgcmF3KTtcbiAgICAgICAgICAgICAgICBjaGFubmVsLmFjayhtc2cpOyAgXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB3b3JrZXIoYXBwLCBpbmZvKS50aGVuKChzaG91bGRBY2spID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoc2hvdWxkQWNrKSB7ICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgY2hhbm5lbC5hY2sobXNnKTsgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYW5uZWwubmFjayhtc2cpOyAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgIGFwcC5sb2coJ2Vycm9yJywgZXJyb3IubWVzc2FnZSwgeyAuLi5lcnJvci5pbmZvLCBzdGFjazogZXJyb3Iuc3RhY2sgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IubmVlZFJldHJ5KSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYW5uZWwubmFjayhtc2cpOyAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhY2tPbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYW5uZWwuYWNrKG1zZyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhbm5lbC5uYWNrKG1zZyk7ICBcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgfSwgd29ya2VySWQsIHRydWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YXJ0UXVldWVXb3JrZXI7Il19