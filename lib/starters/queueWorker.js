"use strict";

require("source-map-support/register");

const startWorker = require('./worker');

async function startQueueWorker(worker, queueService, queueName, options) {
  let {
    workerName,
    ...workerOptions
  } = options;

  if (!workerName) {
    workerName = queueName + 'Worker';
  }

  return startWorker(async app => {
    let messageQueue = app.getService(queueService);
    app.log('info', `A queue worker is started and waiting for message on queue "${queueName}" ...`);
    await messageQueue.workerConsume_(queueName, (channel, msg) => {
      let info = msg && msg.content;

      try {
        info = info && JSON.parse(info.toString());
      } catch (error) {
        app.log('error', 'The incoming message is not a valid JSON string.');
        channel.ack(msg);
        return;
      }

      if (info && info.$mock) {
        app.log('info', 'A mock message is received.\nMessage: ' + raw);
        channel.ack(msg);
        return;
      }

      worker(app, info).then(shouldAck => {
        if (shouldAck) {
          channel.ack(msg);
        } else {
          channel.nack(msg);
        }
      }).catch(error => {
        app.log('error', error.message, { ...error.info,
          stack: error.stack
        });

        if (error.needRetry) {
          channel.nack(msg);
        } else {
          channel.ack(msg);
        }
      });
    });
  }, { ...workerOptions,
    workerName,
    dontStop: true
  });
}

module.exports = startQueueWorker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdGFydGVycy9xdWV1ZVdvcmtlci5qcyJdLCJuYW1lcyI6WyJzdGFydFdvcmtlciIsInJlcXVpcmUiLCJzdGFydFF1ZXVlV29ya2VyIiwid29ya2VyIiwicXVldWVTZXJ2aWNlIiwicXVldWVOYW1lIiwib3B0aW9ucyIsIndvcmtlck5hbWUiLCJ3b3JrZXJPcHRpb25zIiwiYXBwIiwibWVzc2FnZVF1ZXVlIiwiZ2V0U2VydmljZSIsImxvZyIsIndvcmtlckNvbnN1bWVfIiwiY2hhbm5lbCIsIm1zZyIsImluZm8iLCJjb250ZW50IiwiSlNPTiIsInBhcnNlIiwidG9TdHJpbmciLCJlcnJvciIsImFjayIsIiRtb2NrIiwicmF3IiwidGhlbiIsInNob3VsZEFjayIsIm5hY2siLCJjYXRjaCIsIm1lc3NhZ2UiLCJzdGFjayIsIm5lZWRSZXRyeSIsImRvbnRTdG9wIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNQSxXQUFXLEdBQUdDLE9BQU8sQ0FBQyxVQUFELENBQTNCOztBQVNBLGVBQWVDLGdCQUFmLENBQWdDQyxNQUFoQyxFQUF3Q0MsWUFBeEMsRUFBc0RDLFNBQXRELEVBQWlFQyxPQUFqRSxFQUEwRTtBQUN0RSxNQUFJO0FBQUVDLElBQUFBLFVBQUY7QUFBYyxPQUFHQztBQUFqQixNQUFtQ0YsT0FBdkM7O0FBRUEsTUFBSSxDQUFDQyxVQUFMLEVBQWlCO0FBQ2JBLElBQUFBLFVBQVUsR0FBR0YsU0FBUyxHQUFHLFFBQXpCO0FBQ0g7O0FBRUQsU0FBT0wsV0FBVyxDQUFDLE1BQU9TLEdBQVAsSUFBZTtBQUM5QixRQUFJQyxZQUFZLEdBQUdELEdBQUcsQ0FBQ0UsVUFBSixDQUFlUCxZQUFmLENBQW5CO0FBRUFLLElBQUFBLEdBQUcsQ0FBQ0csR0FBSixDQUFRLE1BQVIsRUFBaUIsK0RBQThEUCxTQUFVLE9BQXpGO0FBRUEsVUFBTUssWUFBWSxDQUFDRyxjQUFiLENBQTRCUixTQUE1QixFQUF1QyxDQUFDUyxPQUFELEVBQVVDLEdBQVYsS0FBa0I7QUFDM0QsVUFBSUMsSUFBSSxHQUFHRCxHQUFHLElBQUlBLEdBQUcsQ0FBQ0UsT0FBdEI7O0FBRUEsVUFBSTtBQUNBRCxRQUFBQSxJQUFJLEdBQUdBLElBQUksSUFBSUUsSUFBSSxDQUFDQyxLQUFMLENBQVdILElBQUksQ0FBQ0ksUUFBTCxFQUFYLENBQWY7QUFDSCxPQUZELENBRUUsT0FBT0MsS0FBUCxFQUFjO0FBQ1paLFFBQUFBLEdBQUcsQ0FBQ0csR0FBSixDQUFRLE9BQVIsRUFBaUIsa0RBQWpCO0FBQ0FFLFFBQUFBLE9BQU8sQ0FBQ1EsR0FBUixDQUFZUCxHQUFaO0FBQ0E7QUFDSDs7QUFFRCxVQUFJQyxJQUFJLElBQUlBLElBQUksQ0FBQ08sS0FBakIsRUFBd0I7QUFDcEJkLFFBQUFBLEdBQUcsQ0FBQ0csR0FBSixDQUFRLE1BQVIsRUFBZ0IsMkNBQTJDWSxHQUEzRDtBQUNBVixRQUFBQSxPQUFPLENBQUNRLEdBQVIsQ0FBWVAsR0FBWjtBQUNBO0FBQ0g7O0FBRURaLE1BQUFBLE1BQU0sQ0FBQ00sR0FBRCxFQUFNTyxJQUFOLENBQU4sQ0FBa0JTLElBQWxCLENBQXVCQyxTQUFTLElBQUk7QUFDaEMsWUFBSUEsU0FBSixFQUFlO0FBQ1haLFVBQUFBLE9BQU8sQ0FBQ1EsR0FBUixDQUFZUCxHQUFaO0FBQ0gsU0FGRCxNQUVPO0FBQ0hELFVBQUFBLE9BQU8sQ0FBQ2EsSUFBUixDQUFhWixHQUFiO0FBQ0g7QUFDSixPQU5ELEVBTUdhLEtBTkgsQ0FNU1AsS0FBSyxJQUFJO0FBQ2RaLFFBQUFBLEdBQUcsQ0FBQ0csR0FBSixDQUFRLE9BQVIsRUFBaUJTLEtBQUssQ0FBQ1EsT0FBdkIsRUFBZ0MsRUFBRSxHQUFHUixLQUFLLENBQUNMLElBQVg7QUFBaUJjLFVBQUFBLEtBQUssRUFBRVQsS0FBSyxDQUFDUztBQUE5QixTQUFoQzs7QUFFQSxZQUFJVCxLQUFLLENBQUNVLFNBQVYsRUFBcUI7QUFDakJqQixVQUFBQSxPQUFPLENBQUNhLElBQVIsQ0FBYVosR0FBYjtBQUNILFNBRkQsTUFFTztBQUNIRCxVQUFBQSxPQUFPLENBQUNRLEdBQVIsQ0FBWVAsR0FBWjtBQUNIO0FBQ0osT0FkRDtBQWVILEtBaENLLENBQU47QUFrQ0gsR0F2Q2lCLEVBdUNmLEVBQUUsR0FBR1AsYUFBTDtBQUFvQkQsSUFBQUEsVUFBcEI7QUFBZ0N5QixJQUFBQSxRQUFRLEVBQUU7QUFBMUMsR0F2Q2UsQ0FBbEI7QUF3Q0g7O0FBRURDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmhDLGdCQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBzdGFydFdvcmtlciA9IHJlcXVpcmUoJy4vd29ya2VyJyk7XG5cbi8qKlxuICogU3RhcnQgYSBtZXNzYWdlIHF1ZXVlIHdvcmtlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHdvcmtlciAgXG4gKiBAcGFyYW0geyp9IHF1ZXVlU2VydmljZSBcbiAqIEBwYXJhbSB7Kn0gcXVldWVOYW1lICBcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIFxuICovXG5hc3luYyBmdW5jdGlvbiBzdGFydFF1ZXVlV29ya2VyKHdvcmtlciwgcXVldWVTZXJ2aWNlLCBxdWV1ZU5hbWUsIG9wdGlvbnMpIHsgICAgXG4gICAgbGV0IHsgd29ya2VyTmFtZSwgLi4ud29ya2VyT3B0aW9ucyB9ID0gb3B0aW9ucztcblxuICAgIGlmICghd29ya2VyTmFtZSkge1xuICAgICAgICB3b3JrZXJOYW1lID0gcXVldWVOYW1lICsgJ1dvcmtlcic7XG4gICAgfSAgXG5cbiAgICByZXR1cm4gc3RhcnRXb3JrZXIoYXN5bmMgKGFwcCkgPT4ge1xuICAgICAgICBsZXQgbWVzc2FnZVF1ZXVlID0gYXBwLmdldFNlcnZpY2UocXVldWVTZXJ2aWNlKTtcblxuICAgICAgICBhcHAubG9nKCdpbmZvJywgYEEgcXVldWUgd29ya2VyIGlzIHN0YXJ0ZWQgYW5kIHdhaXRpbmcgZm9yIG1lc3NhZ2Ugb24gcXVldWUgXCIke3F1ZXVlTmFtZX1cIiAuLi5gKTtcblxuICAgICAgICBhd2FpdCBtZXNzYWdlUXVldWUud29ya2VyQ29uc3VtZV8ocXVldWVOYW1lLCAoY2hhbm5lbCwgbXNnKSA9PiB7ICAgICAgICAgICAgXG4gICAgICAgICAgICBsZXQgaW5mbyA9IG1zZyAmJiBtc2cuY29udGVudDtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpbmZvID0gaW5mbyAmJiBKU09OLnBhcnNlKGluZm8udG9TdHJpbmcoKSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGFwcC5sb2coJ2Vycm9yJywgJ1RoZSBpbmNvbWluZyBtZXNzYWdlIGlzIG5vdCBhIHZhbGlkIEpTT04gc3RyaW5nLicpO1xuICAgICAgICAgICAgICAgIGNoYW5uZWwuYWNrKG1zZyk7ICBcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpbmZvICYmIGluZm8uJG1vY2spIHtcbiAgICAgICAgICAgICAgICBhcHAubG9nKCdpbmZvJywgJ0EgbW9jayBtZXNzYWdlIGlzIHJlY2VpdmVkLlxcbk1lc3NhZ2U6ICcgKyByYXcpO1xuICAgICAgICAgICAgICAgIGNoYW5uZWwuYWNrKG1zZyk7ICBcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHdvcmtlcihhcHAsIGluZm8pLnRoZW4oc2hvdWxkQWNrID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoc2hvdWxkQWNrKSB7ICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgY2hhbm5lbC5hY2sobXNnKTsgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYW5uZWwubmFjayhtc2cpOyAgXG4gICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgYXBwLmxvZygnZXJyb3InLCBlcnJvci5tZXNzYWdlLCB7IC4uLmVycm9yLmluZm8sIHN0YWNrOiBlcnJvci5zdGFjayB9KTtcblxuICAgICAgICAgICAgICAgIGlmIChlcnJvci5uZWVkUmV0cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhbm5lbC5uYWNrKG1zZyk7ICBcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjaGFubmVsLmFjayhtc2cpO1xuICAgICAgICAgICAgICAgIH0gXG4gICAgICAgICAgICB9KTsgICAgICAgICAgICBcbiAgICAgICAgfSk7XG5cbiAgICB9LCB7IC4uLndvcmtlck9wdGlvbnMsIHdvcmtlck5hbWUsIGRvbnRTdG9wOiB0cnVlIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YXJ0UXVldWVXb3JrZXI7Il19