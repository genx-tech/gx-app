"use strict";

require("source-map-support/register");

const path = require('path');

const Feature = require('../enum/Feature');

const {
  fs,
  runCmdSync
} = require('rk-utils');

const JsonConfigProvider = require('rk-config/lib/JsonConfigProvider');

module.exports = {
  type: Feature.CONF,
  load_: async (app, options) => {
    let devName;

    try {
      devName = runCmdSync('git config --global user.email').trim();
    } catch (e) {
      app.log('warn', e.message || e);
    }

    if (!devName || devName === '') {
      if (options.fallbackName) {
        devName = options.fallbackName;
      } else {
        app.log('warn', 'Unable to read "user.email" of git config and no fallback option is configured.');
        return;
      }
    }

    devName = devName.substr(0, devName.indexOf('@'));
    const devConfigFile = path.join(app.configPath, app.configName + '.' + devName + '.json');

    if (!fs.existsSync(devConfigFile)) {
      app.log('warn', `Developer specific config file "${devConfigFile}" does not exist and will use defaults.`);
      return;
    }

    app.configLoader.provider = new JsonConfigProvider(devConfigFile);
    return app.loadConfig_();
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWF0dXJlcy9kZXZDb25maWdCeUdpdFVzZXIuanMiXSwibmFtZXMiOlsicGF0aCIsInJlcXVpcmUiLCJGZWF0dXJlIiwiZnMiLCJydW5DbWRTeW5jIiwiSnNvbkNvbmZpZ1Byb3ZpZGVyIiwibW9kdWxlIiwiZXhwb3J0cyIsInR5cGUiLCJDT05GIiwibG9hZF8iLCJhcHAiLCJvcHRpb25zIiwiZGV2TmFtZSIsInRyaW0iLCJlIiwibG9nIiwibWVzc2FnZSIsImZhbGxiYWNrTmFtZSIsInN1YnN0ciIsImluZGV4T2YiLCJkZXZDb25maWdGaWxlIiwiam9pbiIsImNvbmZpZ1BhdGgiLCJjb25maWdOYW1lIiwiZXhpc3RzU3luYyIsImNvbmZpZ0xvYWRlciIsInByb3ZpZGVyIiwibG9hZENvbmZpZ18iXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBT0EsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNQyxPQUFPLEdBQUdELE9BQU8sQ0FBQyxpQkFBRCxDQUF2Qjs7QUFDQSxNQUFNO0FBQUVFLEVBQUFBLEVBQUY7QUFBTUMsRUFBQUE7QUFBTixJQUFxQkgsT0FBTyxDQUFDLFVBQUQsQ0FBbEM7O0FBRUEsTUFBTUksa0JBQWtCLEdBQUdKLE9BQU8sQ0FBQyxrQ0FBRCxDQUFsQzs7QUFFQUssTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBTWJDLEVBQUFBLElBQUksRUFBRU4sT0FBTyxDQUFDTyxJQU5EO0FBZWJDLEVBQUFBLEtBQUssRUFBRSxPQUFPQyxHQUFQLEVBQVlDLE9BQVosS0FBd0I7QUFDM0IsUUFBSUMsT0FBSjs7QUFFQSxRQUFJO0FBQ0FBLE1BQUFBLE9BQU8sR0FBR1QsVUFBVSxDQUFDLGdDQUFELENBQVYsQ0FBNkNVLElBQTdDLEVBQVY7QUFDSCxLQUZELENBRUUsT0FBT0MsQ0FBUCxFQUFVO0FBQ1JKLE1BQUFBLEdBQUcsQ0FBQ0ssR0FBSixDQUFRLE1BQVIsRUFBZ0JELENBQUMsQ0FBQ0UsT0FBRixJQUFhRixDQUE3QjtBQUNIOztBQUVELFFBQUksQ0FBQ0YsT0FBRCxJQUFZQSxPQUFPLEtBQUssRUFBNUIsRUFBZ0M7QUFDNUIsVUFBSUQsT0FBTyxDQUFDTSxZQUFaLEVBQTBCO0FBQ3RCTCxRQUFBQSxPQUFPLEdBQUdELE9BQU8sQ0FBQ00sWUFBbEI7QUFDSCxPQUZELE1BRU87QUFDSFAsUUFBQUEsR0FBRyxDQUFDSyxHQUFKLENBQVEsTUFBUixFQUFnQixpRkFBaEI7QUFDQTtBQUNIO0FBQ0o7O0FBRURILElBQUFBLE9BQU8sR0FBR0EsT0FBTyxDQUFDTSxNQUFSLENBQWUsQ0FBZixFQUFrQk4sT0FBTyxDQUFDTyxPQUFSLENBQWdCLEdBQWhCLENBQWxCLENBQVY7QUFFQSxVQUFNQyxhQUFhLEdBQUdyQixJQUFJLENBQUNzQixJQUFMLENBQVVYLEdBQUcsQ0FBQ1ksVUFBZCxFQUEwQlosR0FBRyxDQUFDYSxVQUFKLEdBQWlCLEdBQWpCLEdBQXVCWCxPQUF2QixHQUFpQyxPQUEzRCxDQUF0Qjs7QUFDQSxRQUFJLENBQUNWLEVBQUUsQ0FBQ3NCLFVBQUgsQ0FBY0osYUFBZCxDQUFMLEVBQW1DO0FBQy9CVixNQUFBQSxHQUFHLENBQUNLLEdBQUosQ0FBUSxNQUFSLEVBQWlCLG1DQUFrQ0ssYUFBYyx5Q0FBakU7QUFDQTtBQUNIOztBQUVEVixJQUFBQSxHQUFHLENBQUNlLFlBQUosQ0FBaUJDLFFBQWpCLEdBQTRCLElBQUl0QixrQkFBSixDQUF1QmdCLGFBQXZCLENBQTVCO0FBQ0EsV0FBT1YsR0FBRyxDQUFDaUIsV0FBSixFQUFQO0FBQ0g7QUEzQ1ksQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBFbmFibGUgZGV2ZWxvcGVyIHNwZWNpZmljIGNvbmZpZyBpZGVudGlmaWVkIGJ5IGdpdCB1c2VyIG5hbWUuXG4gKiBAbW9kdWxlIEZlYXR1cmVfRGV2Q29uZmlnQnlHaXRVc2VyXG4gKi9cblxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IEZlYXR1cmUgPSByZXF1aXJlKCcuLi9lbnVtL0ZlYXR1cmUnKTtcbmNvbnN0IHsgZnMsIHJ1bkNtZFN5bmMgfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5cbmNvbnN0IEpzb25Db25maWdQcm92aWRlciA9IHJlcXVpcmUoJ3JrLWNvbmZpZy9saWIvSnNvbkNvbmZpZ1Byb3ZpZGVyJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBmZWF0dXJlIGlzIGxvYWRlZCBhdCBjb25maWd1cmF0aW9uIHN0YWdlXG4gICAgICogQG1lbWJlciB7c3RyaW5nfVxuICAgICAqL1xuICAgIHR5cGU6IEZlYXR1cmUuQ09ORixcblxuICAgIC8qKlxuICAgICAqIExvYWQgdGhlIGZlYXR1cmVcbiAgICAgKiBAcGFyYW0ge0FwcH0gYXBwIC0gVGhlIGNsaSBhcHAgbW9kdWxlIG9iamVjdFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgdGhlIGZlYXR1cmUgICAgIFxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbb3B0aW9ucy5mYWxsYmFja05hbWVdIC0gRmFsbGJhY2sgdXNlcm5hbWUgZm9yIGdpdCB1c2VyIG5vdCBhdmFpbGFibGVcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZS48Kj59XG4gICAgICovXG4gICAgbG9hZF86IGFzeW5jIChhcHAsIG9wdGlvbnMpID0+IHtcbiAgICAgICAgbGV0IGRldk5hbWU7XG4gICAgICAgIFxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZGV2TmFtZSA9IHJ1bkNtZFN5bmMoJ2dpdCBjb25maWcgLS1nbG9iYWwgdXNlci5lbWFpbCcpLnRyaW0oKTsgICAgICAgICAgICBcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgYXBwLmxvZygnd2FybicsIGUubWVzc2FnZSB8fCBlKTtcbiAgICAgICAgfSAgICAgICAgXG5cbiAgICAgICAgaWYgKCFkZXZOYW1lIHx8IGRldk5hbWUgPT09ICcnKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5mYWxsYmFja05hbWUpIHtcbiAgICAgICAgICAgICAgICBkZXZOYW1lID0gb3B0aW9ucy5mYWxsYmFja05hbWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFwcC5sb2coJ3dhcm4nLCAnVW5hYmxlIHRvIHJlYWQgXCJ1c2VyLmVtYWlsXCIgb2YgZ2l0IGNvbmZpZyBhbmQgbm8gZmFsbGJhY2sgb3B0aW9uIGlzIGNvbmZpZ3VyZWQuJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSAgICAgICAgICAgIFxuICAgICAgICB9ICAgICAgICAgICAgXG5cbiAgICAgICAgZGV2TmFtZSA9IGRldk5hbWUuc3Vic3RyKDAsIGRldk5hbWUuaW5kZXhPZignQCcpKTtcblxuICAgICAgICBjb25zdCBkZXZDb25maWdGaWxlID0gcGF0aC5qb2luKGFwcC5jb25maWdQYXRoLCBhcHAuY29uZmlnTmFtZSArICcuJyArIGRldk5hbWUgKyAnLmpzb24nKTtcbiAgICAgICAgaWYgKCFmcy5leGlzdHNTeW5jKGRldkNvbmZpZ0ZpbGUpKSB7XG4gICAgICAgICAgICBhcHAubG9nKCd3YXJuJywgYERldmVsb3BlciBzcGVjaWZpYyBjb25maWcgZmlsZSBcIiR7ZGV2Q29uZmlnRmlsZX1cIiBkb2VzIG5vdCBleGlzdCBhbmQgd2lsbCB1c2UgZGVmYXVsdHMuYCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBhcHAuY29uZmlnTG9hZGVyLnByb3ZpZGVyID0gbmV3IEpzb25Db25maWdQcm92aWRlcihkZXZDb25maWdGaWxlKTtcbiAgICAgICAgcmV0dXJuIGFwcC5sb2FkQ29uZmlnXygpO1xuICAgIH1cbn07Il19