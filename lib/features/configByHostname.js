"use strict";

require("source-map-support/register");

const path = require('path');

const Feature = require('../enum/Feature');

const {
  runCmdSync,
  fs
} = require('rk-utils');

const JsonConfigProvider = require('rk-config/lib/JsonConfigProvider');

module.exports = {
  type: Feature.CONF,
  load_: async (app, options) => {
    let hostName;

    try {
      hostName = runCmdSync('hostname').trim();
    } catch (e) {
      app.log('warn', e.message || e);
    }

    if (hostName === '') {
      if (options.fallbackName) {
        hostName = options.fallbackName;
      } else {
        throw new Error('Unable to read "hostname" from environment.');
      }
    }

    let hostSpecConfigFile = path.join(app.configPath, app.configName + '.' + hostName + '.json');

    if (!fs.existsSync(hostSpecConfigFile)) {
      app.log('warn', `Host specific config file "${hostSpecConfigFile}" does not exist and will use defaults.`);
      return;
    }

    app.configLoader.provider = new JsonConfigProvider(hostSpecConfigFile);
    return app.loadConfig_();
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWF0dXJlcy9jb25maWdCeUhvc3RuYW1lLmpzIl0sIm5hbWVzIjpbInBhdGgiLCJyZXF1aXJlIiwiRmVhdHVyZSIsInJ1bkNtZFN5bmMiLCJmcyIsIkpzb25Db25maWdQcm92aWRlciIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0eXBlIiwiQ09ORiIsImxvYWRfIiwiYXBwIiwib3B0aW9ucyIsImhvc3ROYW1lIiwidHJpbSIsImUiLCJsb2ciLCJtZXNzYWdlIiwiZmFsbGJhY2tOYW1lIiwiRXJyb3IiLCJob3N0U3BlY0NvbmZpZ0ZpbGUiLCJqb2luIiwiY29uZmlnUGF0aCIsImNvbmZpZ05hbWUiLCJleGlzdHNTeW5jIiwiY29uZmlnTG9hZGVyIiwicHJvdmlkZXIiLCJsb2FkQ29uZmlnXyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFPQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU1DLE9BQU8sR0FBR0QsT0FBTyxDQUFDLGlCQUFELENBQXZCOztBQUNBLE1BQU07QUFBRUUsRUFBQUEsVUFBRjtBQUFjQyxFQUFBQTtBQUFkLElBQXFCSCxPQUFPLENBQUMsVUFBRCxDQUFsQzs7QUFDQSxNQUFNSSxrQkFBa0IsR0FBR0osT0FBTyxDQUFDLGtDQUFELENBQWxDOztBQUVBSyxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFNYkMsRUFBQUEsSUFBSSxFQUFFTixPQUFPLENBQUNPLElBTkQ7QUFlYkMsRUFBQUEsS0FBSyxFQUFFLE9BQU9DLEdBQVAsRUFBWUMsT0FBWixLQUF3QjtBQUMzQixRQUFJQyxRQUFKOztBQUVBLFFBQUk7QUFDQUEsTUFBQUEsUUFBUSxHQUFHVixVQUFVLENBQUMsVUFBRCxDQUFWLENBQXVCVyxJQUF2QixFQUFYO0FBQ0gsS0FGRCxDQUVFLE9BQU9DLENBQVAsRUFBVTtBQUNSSixNQUFBQSxHQUFHLENBQUNLLEdBQUosQ0FBUSxNQUFSLEVBQWdCRCxDQUFDLENBQUNFLE9BQUYsSUFBYUYsQ0FBN0I7QUFDSDs7QUFFRCxRQUFJRixRQUFRLEtBQUssRUFBakIsRUFBcUI7QUFDakIsVUFBSUQsT0FBTyxDQUFDTSxZQUFaLEVBQTBCO0FBQ3RCTCxRQUFBQSxRQUFRLEdBQUdELE9BQU8sQ0FBQ00sWUFBbkI7QUFDSCxPQUZELE1BRU87QUFDSCxjQUFNLElBQUlDLEtBQUosQ0FBVSw2Q0FBVixDQUFOO0FBQ0g7QUFDSjs7QUFFRCxRQUFJQyxrQkFBa0IsR0FBR3BCLElBQUksQ0FBQ3FCLElBQUwsQ0FBVVYsR0FBRyxDQUFDVyxVQUFkLEVBQTBCWCxHQUFHLENBQUNZLFVBQUosR0FBaUIsR0FBakIsR0FBdUJWLFFBQXZCLEdBQWtDLE9BQTVELENBQXpCOztBQUNBLFFBQUksQ0FBQ1QsRUFBRSxDQUFDb0IsVUFBSCxDQUFjSixrQkFBZCxDQUFMLEVBQXdDO0FBQ3BDVCxNQUFBQSxHQUFHLENBQUNLLEdBQUosQ0FBUSxNQUFSLEVBQWlCLDhCQUE2Qkksa0JBQW1CLHlDQUFqRTtBQUNBO0FBQ0g7O0FBRURULElBQUFBLEdBQUcsQ0FBQ2MsWUFBSixDQUFpQkMsUUFBakIsR0FBNEIsSUFBSXJCLGtCQUFKLENBQXVCZSxrQkFBdkIsQ0FBNUI7QUFDQSxXQUFPVCxHQUFHLENBQUNnQixXQUFKLEVBQVA7QUFDSDtBQXhDWSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEVuYWJsZSBzZXJ2ZXIgc3BlY2lmaWMgY29uZmlnIGlkZW50aWZpZWQgYnkgaG9zdCBuYW1lLlxuICogQG1vZHVsZSBGZWF0dXJlX0NvbmZpZ0J5SG9zdG5hbWVcbiAqL1xuXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgRmVhdHVyZSA9IHJlcXVpcmUoJy4uL2VudW0vRmVhdHVyZScpO1xuY29uc3QgeyBydW5DbWRTeW5jLCBmcyB9ID0gcmVxdWlyZSgncmstdXRpbHMnKTtcbmNvbnN0IEpzb25Db25maWdQcm92aWRlciA9IHJlcXVpcmUoJ3JrLWNvbmZpZy9saWIvSnNvbkNvbmZpZ1Byb3ZpZGVyJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBmZWF0dXJlIGlzIGxvYWRlZCBhdCBjb25maWd1cmF0aW9uIHN0YWdlXG4gICAgICogQG1lbWJlciB7c3RyaW5nfVxuICAgICAqL1xuICAgIHR5cGU6IEZlYXR1cmUuQ09ORixcblxuICAgIC8qKlxuICAgICAqIExvYWQgdGhlIGZlYXR1cmVcbiAgICAgKiBAcGFyYW0ge0FwcH0gYXBwIC0gVGhlIGNsaSBhcHAgbW9kdWxlIG9iamVjdFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgdGhlIGZlYXR1cmVcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW29wdGlvbnMuZmFsbGJhY2tOYW1lXSAtIEZhbGxiYWNrIG5hbWUgaWYgaG9zdG5hbWUgbm90IGF2YWlsYWJsZVxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlLjwqPn1cbiAgICAgKi9cbiAgICBsb2FkXzogYXN5bmMgKGFwcCwgb3B0aW9ucykgPT4ge1xuICAgICAgICBsZXQgaG9zdE5hbWU7XG4gICAgICAgIFxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaG9zdE5hbWUgPSBydW5DbWRTeW5jKCdob3N0bmFtZScpLnRyaW0oKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgYXBwLmxvZygnd2FybicsIGUubWVzc2FnZSB8fCBlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChob3N0TmFtZSA9PT0gJycpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmZhbGxiYWNrTmFtZSkge1xuICAgICAgICAgICAgICAgIGhvc3ROYW1lID0gb3B0aW9ucy5mYWxsYmFja05hbWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIHJlYWQgXCJob3N0bmFtZVwiIGZyb20gZW52aXJvbm1lbnQuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGxldCBob3N0U3BlY0NvbmZpZ0ZpbGUgPSBwYXRoLmpvaW4oYXBwLmNvbmZpZ1BhdGgsIGFwcC5jb25maWdOYW1lICsgJy4nICsgaG9zdE5hbWUgKyAnLmpzb24nKTtcbiAgICAgICAgaWYgKCFmcy5leGlzdHNTeW5jKGhvc3RTcGVjQ29uZmlnRmlsZSkpIHtcbiAgICAgICAgICAgIGFwcC5sb2coJ3dhcm4nLCBgSG9zdCBzcGVjaWZpYyBjb25maWcgZmlsZSBcIiR7aG9zdFNwZWNDb25maWdGaWxlfVwiIGRvZXMgbm90IGV4aXN0IGFuZCB3aWxsIHVzZSBkZWZhdWx0cy5gKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGFwcC5jb25maWdMb2FkZXIucHJvdmlkZXIgPSBuZXcgSnNvbkNvbmZpZ1Byb3ZpZGVyKGhvc3RTcGVjQ29uZmlnRmlsZSk7XG4gICAgICAgIHJldHVybiBhcHAubG9hZENvbmZpZ18oKTtcbiAgICB9XG59OyJdfQ==