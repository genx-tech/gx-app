"use strict";

require("source-map-support/register");

const path = require('path');

const Feature = require('../enum/Feature');

const {
  cmd,
  fs
} = require('@genx/sys');

const JsonConfigProvider = require('@genx/config/lib/JsonConfigProvider');

module.exports = {
  type: Feature.CONF,
  load_: async (app, options) => {
    let hostName;

    try {
      hostName = cmd.runSync('hostname').trim();
    } catch (e) {
      app.log('warn', e.message || e);
    }

    if (!hostName) {
      throw new Error('Unable to read "hostname" from environment.');
    }

    let hostSpecConfigFile = path.join(app.configPath, app.configName + '.' + hostName + '.json');

    if (!fs.existsSync(hostSpecConfigFile)) {
      if (options.fallbackName) {
        hostName = options.fallbackName;
        let hostSpecConfigFileFb = path.join(app.configPath, app.configName + '.' + hostName + '.json');

        if (!fs.existsSync(hostSpecConfigFileFb)) {
          throw new Error(`The specific config file for host [${hostName}] not found and the fallback config [${hostSpecConfigFileFb}] not found either.`);
        }

        hostSpecConfigFile = hostSpecConfigFileFb;
      } else {
        app.log('warn', `The specific config file for host [${hostName}] not found and no fallback setting. Use defaults.`);
        return;
      }
    }

    app.configLoader.provider = new JsonConfigProvider(hostSpecConfigFile);
    return app.loadConfig_();
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWF0dXJlcy9jb25maWdCeUhvc3RuYW1lLmpzIl0sIm5hbWVzIjpbInBhdGgiLCJyZXF1aXJlIiwiRmVhdHVyZSIsImNtZCIsImZzIiwiSnNvbkNvbmZpZ1Byb3ZpZGVyIiwibW9kdWxlIiwiZXhwb3J0cyIsInR5cGUiLCJDT05GIiwibG9hZF8iLCJhcHAiLCJvcHRpb25zIiwiaG9zdE5hbWUiLCJydW5TeW5jIiwidHJpbSIsImUiLCJsb2ciLCJtZXNzYWdlIiwiRXJyb3IiLCJob3N0U3BlY0NvbmZpZ0ZpbGUiLCJqb2luIiwiY29uZmlnUGF0aCIsImNvbmZpZ05hbWUiLCJleGlzdHNTeW5jIiwiZmFsbGJhY2tOYW1lIiwiaG9zdFNwZWNDb25maWdGaWxlRmIiLCJjb25maWdMb2FkZXIiLCJwcm92aWRlciIsImxvYWRDb25maWdfIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQU9BLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsTUFBTUMsT0FBTyxHQUFHRCxPQUFPLENBQUMsaUJBQUQsQ0FBdkI7O0FBQ0EsTUFBTTtBQUFFRSxFQUFBQSxHQUFGO0FBQU9DLEVBQUFBO0FBQVAsSUFBY0gsT0FBTyxDQUFDLFdBQUQsQ0FBM0I7O0FBQ0EsTUFBTUksa0JBQWtCLEdBQUdKLE9BQU8sQ0FBQyxxQ0FBRCxDQUFsQzs7QUFFQUssTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBTWJDLEVBQUFBLElBQUksRUFBRU4sT0FBTyxDQUFDTyxJQU5EO0FBZWJDLEVBQUFBLEtBQUssRUFBRSxPQUFPQyxHQUFQLEVBQVlDLE9BQVosS0FBd0I7QUFDM0IsUUFBSUMsUUFBSjs7QUFFQSxRQUFJO0FBQ0FBLE1BQUFBLFFBQVEsR0FBR1YsR0FBRyxDQUFDVyxPQUFKLENBQVksVUFBWixFQUF3QkMsSUFBeEIsRUFBWDtBQUNILEtBRkQsQ0FFRSxPQUFPQyxDQUFQLEVBQVU7QUFDUkwsTUFBQUEsR0FBRyxDQUFDTSxHQUFKLENBQVEsTUFBUixFQUFnQkQsQ0FBQyxDQUFDRSxPQUFGLElBQWFGLENBQTdCO0FBQ0g7O0FBRUQsUUFBSSxDQUFDSCxRQUFMLEVBQWU7QUFDWCxZQUFNLElBQUlNLEtBQUosQ0FBVSw2Q0FBVixDQUFOO0FBQ0g7O0FBRUQsUUFBSUMsa0JBQWtCLEdBQUdwQixJQUFJLENBQUNxQixJQUFMLENBQVVWLEdBQUcsQ0FBQ1csVUFBZCxFQUEwQlgsR0FBRyxDQUFDWSxVQUFKLEdBQWlCLEdBQWpCLEdBQXVCVixRQUF2QixHQUFrQyxPQUE1RCxDQUF6Qjs7QUFDQSxRQUFJLENBQUNULEVBQUUsQ0FBQ29CLFVBQUgsQ0FBY0osa0JBQWQsQ0FBTCxFQUF3QztBQUNwQyxVQUFJUixPQUFPLENBQUNhLFlBQVosRUFBMEI7QUFDdEJaLFFBQUFBLFFBQVEsR0FBR0QsT0FBTyxDQUFDYSxZQUFuQjtBQUNBLFlBQUlDLG9CQUFvQixHQUFHMUIsSUFBSSxDQUFDcUIsSUFBTCxDQUFVVixHQUFHLENBQUNXLFVBQWQsRUFBMEJYLEdBQUcsQ0FBQ1ksVUFBSixHQUFpQixHQUFqQixHQUF1QlYsUUFBdkIsR0FBa0MsT0FBNUQsQ0FBM0I7O0FBRUEsWUFBSSxDQUFDVCxFQUFFLENBQUNvQixVQUFILENBQWNFLG9CQUFkLENBQUwsRUFBMEM7QUFDdEMsZ0JBQU0sSUFBSVAsS0FBSixDQUFXLHNDQUFxQ04sUUFBUyx3Q0FBdUNhLG9CQUFxQixxQkFBckgsQ0FBTjtBQUNIOztBQUVETixRQUFBQSxrQkFBa0IsR0FBR00sb0JBQXJCO0FBQ0gsT0FURCxNQVNPO0FBQ0hmLFFBQUFBLEdBQUcsQ0FBQ00sR0FBSixDQUFRLE1BQVIsRUFBaUIsc0NBQXFDSixRQUFTLG9EQUEvRDtBQUNBO0FBQ0g7QUFFSjs7QUFFREYsSUFBQUEsR0FBRyxDQUFDZ0IsWUFBSixDQUFpQkMsUUFBakIsR0FBNEIsSUFBSXZCLGtCQUFKLENBQXVCZSxrQkFBdkIsQ0FBNUI7QUFDQSxXQUFPVCxHQUFHLENBQUNrQixXQUFKLEVBQVA7QUFDSDtBQWhEWSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEVuYWJsZSBzZXJ2ZXIgc3BlY2lmaWMgY29uZmlnIGlkZW50aWZpZWQgYnkgaG9zdCBuYW1lLlxuICogQG1vZHVsZSBGZWF0dXJlX0NvbmZpZ0J5SG9zdG5hbWVcbiAqL1xuXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgRmVhdHVyZSA9IHJlcXVpcmUoJy4uL2VudW0vRmVhdHVyZScpO1xuY29uc3QgeyBjbWQsIGZzIH0gPSByZXF1aXJlKCdAZ2VueC9zeXMnKTtcbmNvbnN0IEpzb25Db25maWdQcm92aWRlciA9IHJlcXVpcmUoJ0BnZW54L2NvbmZpZy9saWIvSnNvbkNvbmZpZ1Byb3ZpZGVyJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBmZWF0dXJlIGlzIGxvYWRlZCBhdCBjb25maWd1cmF0aW9uIHN0YWdlXG4gICAgICogQG1lbWJlciB7c3RyaW5nfVxuICAgICAqL1xuICAgIHR5cGU6IEZlYXR1cmUuQ09ORixcblxuICAgIC8qKlxuICAgICAqIExvYWQgdGhlIGZlYXR1cmVcbiAgICAgKiBAcGFyYW0ge0FwcH0gYXBwIC0gVGhlIGNsaSBhcHAgbW9kdWxlIG9iamVjdFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgdGhlIGZlYXR1cmVcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW29wdGlvbnMuZmFsbGJhY2tOYW1lXSAtIEZhbGxiYWNrIG5hbWUgaWYgaG9zdG5hbWUgbm90IGF2YWlsYWJsZVxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlLjwqPn1cbiAgICAgKi9cbiAgICBsb2FkXzogYXN5bmMgKGFwcCwgb3B0aW9ucykgPT4ge1xuICAgICAgICBsZXQgaG9zdE5hbWU7XG4gICAgICAgIFxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaG9zdE5hbWUgPSBjbWQucnVuU3luYygnaG9zdG5hbWUnKS50cmltKCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGFwcC5sb2coJ3dhcm4nLCBlLm1lc3NhZ2UgfHwgZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWhvc3ROYW1lKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byByZWFkIFwiaG9zdG5hbWVcIiBmcm9tIGVudmlyb25tZW50LicpO1xuICAgICAgICB9ICAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBsZXQgaG9zdFNwZWNDb25maWdGaWxlID0gcGF0aC5qb2luKGFwcC5jb25maWdQYXRoLCBhcHAuY29uZmlnTmFtZSArICcuJyArIGhvc3ROYW1lICsgJy5qc29uJyk7XG4gICAgICAgIGlmICghZnMuZXhpc3RzU3luYyhob3N0U3BlY0NvbmZpZ0ZpbGUpKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5mYWxsYmFja05hbWUpIHtcbiAgICAgICAgICAgICAgICBob3N0TmFtZSA9IG9wdGlvbnMuZmFsbGJhY2tOYW1lO1xuICAgICAgICAgICAgICAgIGxldCBob3N0U3BlY0NvbmZpZ0ZpbGVGYiA9IHBhdGguam9pbihhcHAuY29uZmlnUGF0aCwgYXBwLmNvbmZpZ05hbWUgKyAnLicgKyBob3N0TmFtZSArICcuanNvbicpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFmcy5leGlzdHNTeW5jKGhvc3RTcGVjQ29uZmlnRmlsZUZiKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBzcGVjaWZpYyBjb25maWcgZmlsZSBmb3IgaG9zdCBbJHtob3N0TmFtZX1dIG5vdCBmb3VuZCBhbmQgdGhlIGZhbGxiYWNrIGNvbmZpZyBbJHtob3N0U3BlY0NvbmZpZ0ZpbGVGYn1dIG5vdCBmb3VuZCBlaXRoZXIuYCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaG9zdFNwZWNDb25maWdGaWxlID0gaG9zdFNwZWNDb25maWdGaWxlRmI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFwcC5sb2coJ3dhcm4nLCBgVGhlIHNwZWNpZmljIGNvbmZpZyBmaWxlIGZvciBob3N0IFske2hvc3ROYW1lfV0gbm90IGZvdW5kIGFuZCBubyBmYWxsYmFjayBzZXR0aW5nLiBVc2UgZGVmYXVsdHMuYCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICB9XG5cbiAgICAgICAgYXBwLmNvbmZpZ0xvYWRlci5wcm92aWRlciA9IG5ldyBKc29uQ29uZmlnUHJvdmlkZXIoaG9zdFNwZWNDb25maWdGaWxlKTtcbiAgICAgICAgcmV0dXJuIGFwcC5sb2FkQ29uZmlnXygpO1xuICAgIH1cbn07Il19