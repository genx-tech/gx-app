"use strict";

require("source-map-support/register");

const path = require('path');

const Feature = require('../enum/Feature');

const {
  runCmdSync,
  fs
} = require('rk-utils');

const JsonConfigProvider = require('rk-config/lib/JsonConfigProvider');

module.exports = {
  type: Feature.CONF,
  load_: async (app, options) => {
    let hostName;

    try {
      hostName = runCmdSync('hostname').trim();
    } catch (e) {
      app.log('warn', e.message || e);
    }

    if (!hostName) {
      throw new Error('Unable to read "hostname" from environment.');
    }

    let hostSpecConfigFile = path.join(app.configPath, app.configName + '.' + hostName + '.json');

    if (!fs.existsSync(hostSpecConfigFile)) {
      if (options.fallbackName) {
        hostName = options.fallbackName;
        let hostSpecConfigFileFb = path.join(app.configPath, app.configName + '.' + hostName + '.json');

        if (!fs.existsSync(hostSpecConfigFileFb)) {
          throw new Error(`The specific config file for host [${hostName}] not found and the fallback config [${hostSpecConfigFileFb}] not found either.`);
        }

        hostSpecConfigFile = hostSpecConfigFileFb;
      } else {
        app.log('warn', `The specific config file for host [${hostName}] not found and no fallback setting. Use defaults.`);
        return;
      }
    }

    app.configLoader.provider = new JsonConfigProvider(hostSpecConfigFile);
    return app.loadConfig_();
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWF0dXJlcy9jb25maWdCeUhvc3RuYW1lLmpzIl0sIm5hbWVzIjpbInBhdGgiLCJyZXF1aXJlIiwiRmVhdHVyZSIsInJ1bkNtZFN5bmMiLCJmcyIsIkpzb25Db25maWdQcm92aWRlciIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0eXBlIiwiQ09ORiIsImxvYWRfIiwiYXBwIiwib3B0aW9ucyIsImhvc3ROYW1lIiwidHJpbSIsImUiLCJsb2ciLCJtZXNzYWdlIiwiRXJyb3IiLCJob3N0U3BlY0NvbmZpZ0ZpbGUiLCJqb2luIiwiY29uZmlnUGF0aCIsImNvbmZpZ05hbWUiLCJleGlzdHNTeW5jIiwiZmFsbGJhY2tOYW1lIiwiaG9zdFNwZWNDb25maWdGaWxlRmIiLCJjb25maWdMb2FkZXIiLCJwcm92aWRlciIsImxvYWRDb25maWdfIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQU9BLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsTUFBTUMsT0FBTyxHQUFHRCxPQUFPLENBQUMsaUJBQUQsQ0FBdkI7O0FBQ0EsTUFBTTtBQUFFRSxFQUFBQSxVQUFGO0FBQWNDLEVBQUFBO0FBQWQsSUFBcUJILE9BQU8sQ0FBQyxVQUFELENBQWxDOztBQUNBLE1BQU1JLGtCQUFrQixHQUFHSixPQUFPLENBQUMsa0NBQUQsQ0FBbEM7O0FBRUFLLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQU1iQyxFQUFBQSxJQUFJLEVBQUVOLE9BQU8sQ0FBQ08sSUFORDtBQWViQyxFQUFBQSxLQUFLLEVBQUUsT0FBT0MsR0FBUCxFQUFZQyxPQUFaLEtBQXdCO0FBQzNCLFFBQUlDLFFBQUo7O0FBRUEsUUFBSTtBQUNBQSxNQUFBQSxRQUFRLEdBQUdWLFVBQVUsQ0FBQyxVQUFELENBQVYsQ0FBdUJXLElBQXZCLEVBQVg7QUFDSCxLQUZELENBRUUsT0FBT0MsQ0FBUCxFQUFVO0FBQ1JKLE1BQUFBLEdBQUcsQ0FBQ0ssR0FBSixDQUFRLE1BQVIsRUFBZ0JELENBQUMsQ0FBQ0UsT0FBRixJQUFhRixDQUE3QjtBQUNIOztBQUVELFFBQUksQ0FBQ0YsUUFBTCxFQUFlO0FBQ1gsWUFBTSxJQUFJSyxLQUFKLENBQVUsNkNBQVYsQ0FBTjtBQUNIOztBQUVELFFBQUlDLGtCQUFrQixHQUFHbkIsSUFBSSxDQUFDb0IsSUFBTCxDQUFVVCxHQUFHLENBQUNVLFVBQWQsRUFBMEJWLEdBQUcsQ0FBQ1csVUFBSixHQUFpQixHQUFqQixHQUF1QlQsUUFBdkIsR0FBa0MsT0FBNUQsQ0FBekI7O0FBQ0EsUUFBSSxDQUFDVCxFQUFFLENBQUNtQixVQUFILENBQWNKLGtCQUFkLENBQUwsRUFBd0M7QUFDcEMsVUFBSVAsT0FBTyxDQUFDWSxZQUFaLEVBQTBCO0FBQ3RCWCxRQUFBQSxRQUFRLEdBQUdELE9BQU8sQ0FBQ1ksWUFBbkI7QUFDQSxZQUFJQyxvQkFBb0IsR0FBR3pCLElBQUksQ0FBQ29CLElBQUwsQ0FBVVQsR0FBRyxDQUFDVSxVQUFkLEVBQTBCVixHQUFHLENBQUNXLFVBQUosR0FBaUIsR0FBakIsR0FBdUJULFFBQXZCLEdBQWtDLE9BQTVELENBQTNCOztBQUVBLFlBQUksQ0FBQ1QsRUFBRSxDQUFDbUIsVUFBSCxDQUFjRSxvQkFBZCxDQUFMLEVBQTBDO0FBQ3RDLGdCQUFNLElBQUlQLEtBQUosQ0FBVyxzQ0FBcUNMLFFBQVMsd0NBQXVDWSxvQkFBcUIscUJBQXJILENBQU47QUFDSDs7QUFFRE4sUUFBQUEsa0JBQWtCLEdBQUdNLG9CQUFyQjtBQUNILE9BVEQsTUFTTztBQUNIZCxRQUFBQSxHQUFHLENBQUNLLEdBQUosQ0FBUSxNQUFSLEVBQWlCLHNDQUFxQ0gsUUFBUyxvREFBL0Q7QUFDQTtBQUNIO0FBRUo7O0FBRURGLElBQUFBLEdBQUcsQ0FBQ2UsWUFBSixDQUFpQkMsUUFBakIsR0FBNEIsSUFBSXRCLGtCQUFKLENBQXVCYyxrQkFBdkIsQ0FBNUI7QUFDQSxXQUFPUixHQUFHLENBQUNpQixXQUFKLEVBQVA7QUFDSDtBQWhEWSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEVuYWJsZSBzZXJ2ZXIgc3BlY2lmaWMgY29uZmlnIGlkZW50aWZpZWQgYnkgaG9zdCBuYW1lLlxuICogQG1vZHVsZSBGZWF0dXJlX0NvbmZpZ0J5SG9zdG5hbWVcbiAqL1xuXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgRmVhdHVyZSA9IHJlcXVpcmUoJy4uL2VudW0vRmVhdHVyZScpO1xuY29uc3QgeyBydW5DbWRTeW5jLCBmcyB9ID0gcmVxdWlyZSgncmstdXRpbHMnKTtcbmNvbnN0IEpzb25Db25maWdQcm92aWRlciA9IHJlcXVpcmUoJ3JrLWNvbmZpZy9saWIvSnNvbkNvbmZpZ1Byb3ZpZGVyJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBmZWF0dXJlIGlzIGxvYWRlZCBhdCBjb25maWd1cmF0aW9uIHN0YWdlXG4gICAgICogQG1lbWJlciB7c3RyaW5nfVxuICAgICAqL1xuICAgIHR5cGU6IEZlYXR1cmUuQ09ORixcblxuICAgIC8qKlxuICAgICAqIExvYWQgdGhlIGZlYXR1cmVcbiAgICAgKiBAcGFyYW0ge0FwcH0gYXBwIC0gVGhlIGNsaSBhcHAgbW9kdWxlIG9iamVjdFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgdGhlIGZlYXR1cmVcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW29wdGlvbnMuZmFsbGJhY2tOYW1lXSAtIEZhbGxiYWNrIG5hbWUgaWYgaG9zdG5hbWUgbm90IGF2YWlsYWJsZVxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlLjwqPn1cbiAgICAgKi9cbiAgICBsb2FkXzogYXN5bmMgKGFwcCwgb3B0aW9ucykgPT4ge1xuICAgICAgICBsZXQgaG9zdE5hbWU7XG4gICAgICAgIFxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaG9zdE5hbWUgPSBydW5DbWRTeW5jKCdob3N0bmFtZScpLnRyaW0oKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgYXBwLmxvZygnd2FybicsIGUubWVzc2FnZSB8fCBlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaG9zdE5hbWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIHJlYWQgXCJob3N0bmFtZVwiIGZyb20gZW52aXJvbm1lbnQuJyk7XG4gICAgICAgIH0gICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGxldCBob3N0U3BlY0NvbmZpZ0ZpbGUgPSBwYXRoLmpvaW4oYXBwLmNvbmZpZ1BhdGgsIGFwcC5jb25maWdOYW1lICsgJy4nICsgaG9zdE5hbWUgKyAnLmpzb24nKTtcbiAgICAgICAgaWYgKCFmcy5leGlzdHNTeW5jKGhvc3RTcGVjQ29uZmlnRmlsZSkpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmZhbGxiYWNrTmFtZSkge1xuICAgICAgICAgICAgICAgIGhvc3ROYW1lID0gb3B0aW9ucy5mYWxsYmFja05hbWU7XG4gICAgICAgICAgICAgICAgbGV0IGhvc3RTcGVjQ29uZmlnRmlsZUZiID0gcGF0aC5qb2luKGFwcC5jb25maWdQYXRoLCBhcHAuY29uZmlnTmFtZSArICcuJyArIGhvc3ROYW1lICsgJy5qc29uJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWZzLmV4aXN0c1N5bmMoaG9zdFNwZWNDb25maWdGaWxlRmIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIHNwZWNpZmljIGNvbmZpZyBmaWxlIGZvciBob3N0IFske2hvc3ROYW1lfV0gbm90IGZvdW5kIGFuZCB0aGUgZmFsbGJhY2sgY29uZmlnIFske2hvc3RTcGVjQ29uZmlnRmlsZUZifV0gbm90IGZvdW5kIGVpdGhlci5gKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBob3N0U3BlY0NvbmZpZ0ZpbGUgPSBob3N0U3BlY0NvbmZpZ0ZpbGVGYjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYXBwLmxvZygnd2FybicsIGBUaGUgc3BlY2lmaWMgY29uZmlnIGZpbGUgZm9yIGhvc3QgWyR7aG9zdE5hbWV9XSBub3QgZm91bmQgYW5kIG5vIGZhbGxiYWNrIHNldHRpbmcuIFVzZSBkZWZhdWx0cy5gKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9ICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgIH1cblxuICAgICAgICBhcHAuY29uZmlnTG9hZGVyLnByb3ZpZGVyID0gbmV3IEpzb25Db25maWdQcm92aWRlcihob3N0U3BlY0NvbmZpZ0ZpbGUpO1xuICAgICAgICByZXR1cm4gYXBwLmxvYWRDb25maWdfKCk7XG4gICAgfVxufTsiXX0=