{"version":3,"sources":["../../src/features/settings.js"],"names":["Feature","require","InvalidConfiguration","_","KEY_ENV","KEY_STAGE","Stage","process","env","STAGE_ENV","module","exports","type","INIT","load_","app","settings","result","envSettings","stageSettings","forOwn","value","key","startsWith","envKey","substr","length","isPlainObject","stageKey","Object","assign"],"mappings":"AAAA;;;;AAOA,MAAMA,OAAO,GAAGC,OAAO,CAAC,iBAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAA2BD,OAAO,CAAC,aAAD,CAAxC;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAQF,OAAO,CAAC,YAAD,CAArB;;AAEA,MAAMG,OAAO,GAAG,MAAhB;AACA,MAAMC,SAAS,GAAG,QAAlB;AACA,MAAMC,KAAK,GAAGC,OAAO,CAACC,GAAR,CAAYC,SAA1B;AAEAC,MAAM,CAACC,OAAP,GAAiB;AAMbC,EAAAA,IAAI,EAAEZ,OAAO,CAACa,IAND;AAcbC,EAAAA,KAAK,EAAE,UAAUC,GAAV,EAAeC,QAAf,EAAyB;AAC5B,QAAIC,MAAM,GAAG,EAAb;AACA,QAAIC,WAAJ;AACA,QAAIC,aAAJ;;AAEAhB,IAAAA,CAAC,CAACiB,MAAF,CAASJ,QAAT,EAAmB,CAACK,KAAD,EAAQC,GAAR,KAAgB;AAC/B,UAAIA,GAAG,CAACC,UAAJ,CAAenB,OAAf,CAAJ,EAA6B;AACzB,YAAIoB,MAAM,GAAGF,GAAG,CAACG,MAAJ,CAAWrB,OAAO,CAACsB,MAAnB,CAAb;;AACA,YAAIF,MAAM,KAAKT,GAAG,CAACP,GAAnB,EAAwB;AACpBU,UAAAA,WAAW,GAAGG,KAAd;;AACA,cAAI,CAAClB,CAAC,CAACwB,aAAF,CAAgBN,KAAhB,CAAL,EAA6B;AACzB,kBAAM,IAAInB,oBAAJ,CACF,sBADE,EAEFa,GAFE,EAGD,YAAWO,GAAI,EAHd,CAAN;AAKH;AACJ;AACJ,OAZD,MAYO,IAAIhB,KAAK,IAAIgB,GAAG,CAACC,UAAJ,CAAelB,SAAf,CAAb,EAAwC;AAC3C,YAAIuB,QAAQ,GAAGN,GAAG,CAACG,MAAJ,CAAWrB,OAAO,CAACsB,MAAnB,CAAf;;AACA,YAAIE,QAAQ,KAAKtB,KAAjB,EAAwB;AACpBa,UAAAA,aAAa,GAAGE,KAAhB;;AACA,cAAI,CAAClB,CAAC,CAACwB,aAAF,CAAgBN,KAAhB,CAAL,EAA6B;AACzB,kBAAM,IAAInB,oBAAJ,CACF,wBADE,EAEFa,GAFE,EAGD,YAAWO,GAAI,EAHd,CAAN;AAKH;AACJ;AACJ,OAZM,MAYA;AACHL,QAAAA,MAAM,CAACK,GAAD,CAAN,GAAcD,KAAd;AACH;AACJ,KA5BD;;AA8BAN,IAAAA,GAAG,CAACC,QAAJ,GAAea,MAAM,CAACC,MAAP,CAAcb,MAAd,EAAsBC,WAAtB,EAAmCC,aAAnC,CAAf;AACH;AAlDY,CAAjB","sourcesContent":["\"use strict\";\n\n/**\n * Enable customized settings\n * @module Feature_Settings\n */\n\nconst Feature = require('../enum/Feature');\nconst { InvalidConfiguration } = require('@genx/error');\nconst { _ } = require('@genx/july');\n\nconst KEY_ENV = 'env:';\nconst KEY_STAGE = 'stage:';\nconst Stage = process.env.STAGE_ENV;\n\nmodule.exports = {\n\n    /**\n     * This feature is loaded at init stage\n     * @member {string}\n     */\n    type: Feature.INIT,\n\n    /**\n     * Load the feature\n     * @param {App} app - The cli app module object\n     * @param {object} settings - Customized settings\n     * @returns {Promise.<*>}\n     */\n    load_: function (app, settings) {\n        let result = {}\n        let envSettings;\n        let stageSettings;\n        \n        _.forOwn(settings, (value, key) => {\n            if (key.startsWith(KEY_ENV)) {\n                let envKey = key.substr(KEY_ENV.length);\n                if (envKey === app.env) {\n                    envSettings = value;\n                    if (!_.isPlainObject(value)) {\n                        throw new InvalidConfiguration(\n                            'Invalid env settings',\n                            app,\n                            `settings.${key}`\n                        );\n                    }\n                }\n            } else if (Stage && key.startsWith(KEY_STAGE)) {\n                let stageKey = key.substr(KEY_ENV.length);\n                if (stageKey === Stage) {\n                    stageSettings = value;\n                    if (!_.isPlainObject(value)) {\n                        throw new InvalidConfiguration(\n                            'Invalid stage settings',\n                            app,\n                            `settings.${key}`\n                        );\n                    }\n                }\n            } else {\n                result[key] = value;\n            }\n        });\n\n        app.settings = Object.assign(result, envSettings, stageSettings);\n    }\n};"],"file":"settings.js"}