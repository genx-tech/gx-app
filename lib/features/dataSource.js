"use strict";

require("source-map-support/register");

const {
  _
} = require('@genx/july');

const Feature = require('../enum/Feature');

const {
  InvalidConfiguration
} = require('@genx/error');

module.exports = {
  type: Feature.SERVICE,
  load_: async (app, dataSources) => {
    const {
      Connector
    } = app.tryRequire('@genx/data');
    const loggerProxy = {
      log: (...args) => app.log(...args)
    };

    _.forOwn(dataSources, (dataSource, dbms) => {
      _.forOwn(dataSource, (config, connectorName) => {
        let serviceName = dbms + '.' + connectorName;

        if (!config.connection) {
          throw new InvalidConfiguration(`Missing connection config for data source "${serviceName}".`, app, `dataSource.${dbms}.${connectorName}`);
        }

        let {
          connection: connectionString,
          ...other
        } = config;
        let connectorService = Connector.createConnector(dbms, connectionString, {
          logger: loggerProxy,
          ...other
        });
        app.registerService(serviceName, connectorService);
        app.on('stopping', elegantStoppers => {
          elegantStoppers.push(connectorService.end_());
        });
      });
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWF0dXJlcy9kYXRhU291cmNlLmpzIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwiRmVhdHVyZSIsIkludmFsaWRDb25maWd1cmF0aW9uIiwibW9kdWxlIiwiZXhwb3J0cyIsInR5cGUiLCJTRVJWSUNFIiwibG9hZF8iLCJhcHAiLCJkYXRhU291cmNlcyIsIkNvbm5lY3RvciIsInRyeVJlcXVpcmUiLCJsb2dnZXJQcm94eSIsImxvZyIsImFyZ3MiLCJmb3JPd24iLCJkYXRhU291cmNlIiwiZGJtcyIsImNvbmZpZyIsImNvbm5lY3Rvck5hbWUiLCJzZXJ2aWNlTmFtZSIsImNvbm5lY3Rpb24iLCJjb25uZWN0aW9uU3RyaW5nIiwib3RoZXIiLCJjb25uZWN0b3JTZXJ2aWNlIiwiY3JlYXRlQ29ubmVjdG9yIiwibG9nZ2VyIiwicmVnaXN0ZXJTZXJ2aWNlIiwib24iLCJlbGVnYW50U3RvcHBlcnMiLCJwdXNoIiwiZW5kXyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFPQSxNQUFNO0FBQUVBLEVBQUFBO0FBQUYsSUFBUUMsT0FBTyxDQUFDLFlBQUQsQ0FBckI7O0FBQ0EsTUFBTUMsT0FBTyxHQUFHRCxPQUFPLENBQUMsaUJBQUQsQ0FBdkI7O0FBQ0EsTUFBTTtBQUFFRSxFQUFBQTtBQUFGLElBQTJCRixPQUFPLENBQUMsYUFBRCxDQUF4Qzs7QUFFQUcsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBS2JDLEVBQUFBLElBQUksRUFBRUosT0FBTyxDQUFDSyxPQUxEO0FBYWJDLEVBQUFBLEtBQUssRUFBRSxPQUFPQyxHQUFQLEVBQVlDLFdBQVosS0FBNEI7QUFDL0IsVUFBTTtBQUFFQyxNQUFBQTtBQUFGLFFBQWdCRixHQUFHLENBQUNHLFVBQUosQ0FBZSxZQUFmLENBQXRCO0FBRUEsVUFBTUMsV0FBVyxHQUFHO0FBQ2hCQyxNQUFBQSxHQUFHLEVBQUUsQ0FBQyxHQUFHQyxJQUFKLEtBQWFOLEdBQUcsQ0FBQ0ssR0FBSixDQUFRLEdBQUdDLElBQVg7QUFERixLQUFwQjs7QUFJQWYsSUFBQUEsQ0FBQyxDQUFDZ0IsTUFBRixDQUFTTixXQUFULEVBQXNCLENBQUNPLFVBQUQsRUFBYUMsSUFBYixLQUFzQjtBQUN4Q2xCLE1BQUFBLENBQUMsQ0FBQ2dCLE1BQUYsQ0FBU0MsVUFBVCxFQUFxQixDQUFDRSxNQUFELEVBQVNDLGFBQVQsS0FBMkI7QUFDNUMsWUFBSUMsV0FBVyxHQUFHSCxJQUFJLEdBQUcsR0FBUCxHQUFhRSxhQUEvQjs7QUFFQSxZQUFJLENBQUNELE1BQU0sQ0FBQ0csVUFBWixFQUF3QjtBQUNwQixnQkFBTSxJQUFJbkIsb0JBQUosQ0FDRCw4Q0FBNkNrQixXQUFZLElBRHhELEVBRUZaLEdBRkUsRUFHRCxjQUFhUyxJQUFLLElBQUdFLGFBQWMsRUFIbEMsQ0FBTjtBQUtIOztBQUVELFlBQUk7QUFBRUUsVUFBQUEsVUFBVSxFQUFFQyxnQkFBZDtBQUFnQyxhQUFHQztBQUFuQyxZQUE2Q0wsTUFBakQ7QUFFQSxZQUFJTSxnQkFBZ0IsR0FBR2QsU0FBUyxDQUFDZSxlQUFWLENBQTBCUixJQUExQixFQUFnQ0ssZ0JBQWhDLEVBQWtEO0FBQUVJLFVBQUFBLE1BQU0sRUFBRWQsV0FBVjtBQUF1QixhQUFHVztBQUExQixTQUFsRCxDQUF2QjtBQUNBZixRQUFBQSxHQUFHLENBQUNtQixlQUFKLENBQW9CUCxXQUFwQixFQUFpQ0ksZ0JBQWpDO0FBRUFoQixRQUFBQSxHQUFHLENBQUNvQixFQUFKLENBQU8sVUFBUCxFQUFvQkMsZUFBRCxJQUFxQjtBQUNwQ0EsVUFBQUEsZUFBZSxDQUFDQyxJQUFoQixDQUFxQk4sZ0JBQWdCLENBQUNPLElBQWpCLEVBQXJCO0FBQ0gsU0FGRDtBQUdILE9BbkJEO0FBb0JILEtBckJEO0FBc0JIO0FBMUNZLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogRW5hYmxlIGRhdGEgc291cmNlIGZlYXR1cmVcbiAqIEBtb2R1bGUgRmVhdHVyZV9EYXRhU291cmNlXG4gKi9cblxuY29uc3QgeyBfIH0gPSByZXF1aXJlKCdAZ2VueC9qdWx5Jyk7XG5jb25zdCBGZWF0dXJlID0gcmVxdWlyZSgnLi4vZW51bS9GZWF0dXJlJyk7XG5jb25zdCB7IEludmFsaWRDb25maWd1cmF0aW9uIH0gPSByZXF1aXJlKCdAZ2VueC9lcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAvKipcbiAgICAgKiBUaGlzIGZlYXR1cmUgaXMgbG9hZGVkIGF0IHNlcnZpY2Ugc3RhZ2VcbiAgICAgKiBAbWVtYmVyIHtzdHJpbmd9XG4gICAgICovXG4gICAgdHlwZTogRmVhdHVyZS5TRVJWSUNFLFxuXG4gICAgLyoqXG4gICAgICogTG9hZCB0aGUgZmVhdHVyZVxuICAgICAqIEBwYXJhbSB7U2VydmljZUNvbnRhaW5lcn0gYXBwIC0gVGhlIGFwcCBtb2R1bGUgb2JqZWN0XG4gICAgICogQHBhcmFtIHtvYmplY3R9IGRhdGFTb3VyY2VzIC0gRGF0YXNvdXJjZSBzZXR0aW5nc1xuICAgICAqIEByZXR1cm5zIHtQcm9taXNlLjwqPn1cbiAgICAgKi9cbiAgICBsb2FkXzogYXN5bmMgKGFwcCwgZGF0YVNvdXJjZXMpID0+IHtcbiAgICAgICAgY29uc3QgeyBDb25uZWN0b3IgfSA9IGFwcC50cnlSZXF1aXJlKCdAZ2VueC9kYXRhJyk7XG5cbiAgICAgICAgY29uc3QgbG9nZ2VyUHJveHkgPSB7XG4gICAgICAgICAgICBsb2c6ICguLi5hcmdzKSA9PiBhcHAubG9nKC4uLmFyZ3MpXG4gICAgICAgIH07XG5cbiAgICAgICAgXy5mb3JPd24oZGF0YVNvdXJjZXMsIChkYXRhU291cmNlLCBkYm1zKSA9PiB7XG4gICAgICAgICAgICBfLmZvck93bihkYXRhU291cmNlLCAoY29uZmlnLCBjb25uZWN0b3JOYW1lKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHNlcnZpY2VOYW1lID0gZGJtcyArICcuJyArIGNvbm5lY3Rvck5hbWU7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWNvbmZpZy5jb25uZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ29uZmlndXJhdGlvbihcbiAgICAgICAgICAgICAgICAgICAgICAgIGBNaXNzaW5nIGNvbm5lY3Rpb24gY29uZmlnIGZvciBkYXRhIHNvdXJjZSBcIiR7c2VydmljZU5hbWV9XCIuYCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGBkYXRhU291cmNlLiR7ZGJtc30uJHtjb25uZWN0b3JOYW1lfWBcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbGV0IHsgY29ubmVjdGlvbjogY29ubmVjdGlvblN0cmluZywgLi4ub3RoZXIgfSA9IGNvbmZpZzsgIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGxldCBjb25uZWN0b3JTZXJ2aWNlID0gQ29ubmVjdG9yLmNyZWF0ZUNvbm5lY3RvcihkYm1zLCBjb25uZWN0aW9uU3RyaW5nLCB7IGxvZ2dlcjogbG9nZ2VyUHJveHksIC4uLm90aGVyIH0pO1xuICAgICAgICAgICAgICAgIGFwcC5yZWdpc3RlclNlcnZpY2Uoc2VydmljZU5hbWUsIGNvbm5lY3RvclNlcnZpY2UpO1xuXG4gICAgICAgICAgICAgICAgYXBwLm9uKCdzdG9wcGluZycsIChlbGVnYW50U3RvcHBlcnMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZWxlZ2FudFN0b3BwZXJzLnB1c2goY29ubmVjdG9yU2VydmljZS5lbmRfKCkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7ICAgICAgICAgICAgXG4gICAgICAgIH0pOyAgICAgICAgXG4gICAgfVxufTsiXX0=