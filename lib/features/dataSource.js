"use strict";

require("source-map-support/register");

const {
  _
} = require('rk-utils');

const {
  tryRequire
} = require('../utils/Helpers');

const Feature = require('../enum/Feature');

const {
  InvalidConfiguration
} = require('../utils/Errors');

module.exports = {
  type: Feature.SERVICE,
  load_: async (app, dataSources) => {
    const {
      Connector
    } = tryRequire('@genx/data');
    const loggerProxy = {
      log: (...args) => app.log(...args)
    };

    _.forOwn(dataSources, (dataSource, dbms) => {
      _.forOwn(dataSource, (config, connectorName) => {
        let serviceName = dbms + '.' + connectorName;

        if (!config.connection) {
          throw new InvalidConfiguration(`Missing connection config for data source "${serviceName}".`, app, `dataSource.${dbms}.${connectorName}`);
        }

        let {
          connection: connectionString,
          ...other
        } = config;
        let connectorService = Connector.createConnector(dbms, connectionString, {
          logger: loggerProxy,
          ...other
        });
        app.registerService(serviceName, connectorService);
        app.on('stopping', elegantStoppers => {
          elegantStoppers.push(connectorService.end_());
        });
      });
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWF0dXJlcy9kYXRhU291cmNlLmpzIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwidHJ5UmVxdWlyZSIsIkZlYXR1cmUiLCJJbnZhbGlkQ29uZmlndXJhdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0eXBlIiwiU0VSVklDRSIsImxvYWRfIiwiYXBwIiwiZGF0YVNvdXJjZXMiLCJDb25uZWN0b3IiLCJsb2dnZXJQcm94eSIsImxvZyIsImFyZ3MiLCJmb3JPd24iLCJkYXRhU291cmNlIiwiZGJtcyIsImNvbmZpZyIsImNvbm5lY3Rvck5hbWUiLCJzZXJ2aWNlTmFtZSIsImNvbm5lY3Rpb24iLCJjb25uZWN0aW9uU3RyaW5nIiwib3RoZXIiLCJjb25uZWN0b3JTZXJ2aWNlIiwiY3JlYXRlQ29ubmVjdG9yIiwibG9nZ2VyIiwicmVnaXN0ZXJTZXJ2aWNlIiwib24iLCJlbGVnYW50U3RvcHBlcnMiLCJwdXNoIiwiZW5kXyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFPQSxNQUFNO0FBQUVBLEVBQUFBO0FBQUYsSUFBUUMsT0FBTyxDQUFDLFVBQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQWlCRCxPQUFPLENBQUMsa0JBQUQsQ0FBOUI7O0FBQ0EsTUFBTUUsT0FBTyxHQUFHRixPQUFPLENBQUMsaUJBQUQsQ0FBdkI7O0FBQ0EsTUFBTTtBQUFFRyxFQUFBQTtBQUFGLElBQTJCSCxPQUFPLENBQUMsaUJBQUQsQ0FBeEM7O0FBRUFJLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUtiQyxFQUFBQSxJQUFJLEVBQUVKLE9BQU8sQ0FBQ0ssT0FMRDtBQWFiQyxFQUFBQSxLQUFLLEVBQUUsT0FBT0MsR0FBUCxFQUFZQyxXQUFaLEtBQTRCO0FBQy9CLFVBQU07QUFBRUMsTUFBQUE7QUFBRixRQUFnQlYsVUFBVSxDQUFDLFlBQUQsQ0FBaEM7QUFFQSxVQUFNVyxXQUFXLEdBQUc7QUFDaEJDLE1BQUFBLEdBQUcsRUFBRSxDQUFDLEdBQUdDLElBQUosS0FBYUwsR0FBRyxDQUFDSSxHQUFKLENBQVEsR0FBR0MsSUFBWDtBQURGLEtBQXBCOztBQUlBZixJQUFBQSxDQUFDLENBQUNnQixNQUFGLENBQVNMLFdBQVQsRUFBc0IsQ0FBQ00sVUFBRCxFQUFhQyxJQUFiLEtBQXNCO0FBQ3hDbEIsTUFBQUEsQ0FBQyxDQUFDZ0IsTUFBRixDQUFTQyxVQUFULEVBQXFCLENBQUNFLE1BQUQsRUFBU0MsYUFBVCxLQUEyQjtBQUM1QyxZQUFJQyxXQUFXLEdBQUdILElBQUksR0FBRyxHQUFQLEdBQWFFLGFBQS9COztBQUVBLFlBQUksQ0FBQ0QsTUFBTSxDQUFDRyxVQUFaLEVBQXdCO0FBQ3BCLGdCQUFNLElBQUlsQixvQkFBSixDQUNELDhDQUE2Q2lCLFdBQVksSUFEeEQsRUFFRlgsR0FGRSxFQUdELGNBQWFRLElBQUssSUFBR0UsYUFBYyxFQUhsQyxDQUFOO0FBS0g7O0FBRUQsWUFBSTtBQUFFRSxVQUFBQSxVQUFVLEVBQUVDLGdCQUFkO0FBQWdDLGFBQUdDO0FBQW5DLFlBQTZDTCxNQUFqRDtBQUVBLFlBQUlNLGdCQUFnQixHQUFHYixTQUFTLENBQUNjLGVBQVYsQ0FBMEJSLElBQTFCLEVBQWdDSyxnQkFBaEMsRUFBa0Q7QUFBRUksVUFBQUEsTUFBTSxFQUFFZCxXQUFWO0FBQXVCLGFBQUdXO0FBQTFCLFNBQWxELENBQXZCO0FBQ0FkLFFBQUFBLEdBQUcsQ0FBQ2tCLGVBQUosQ0FBb0JQLFdBQXBCLEVBQWlDSSxnQkFBakM7QUFFQWYsUUFBQUEsR0FBRyxDQUFDbUIsRUFBSixDQUFPLFVBQVAsRUFBb0JDLGVBQUQsSUFBcUI7QUFDcENBLFVBQUFBLGVBQWUsQ0FBQ0MsSUFBaEIsQ0FBcUJOLGdCQUFnQixDQUFDTyxJQUFqQixFQUFyQjtBQUNILFNBRkQ7QUFHSCxPQW5CRDtBQW9CSCxLQXJCRDtBQXNCSDtBQTFDWSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEVuYWJsZSBkYXRhIHNvdXJjZSBmZWF0dXJlXG4gKiBAbW9kdWxlIEZlYXR1cmVfRGF0YVNvdXJjZVxuICovXG5cbmNvbnN0IHsgXyB9ID0gcmVxdWlyZSgncmstdXRpbHMnKTtcbmNvbnN0IHsgdHJ5UmVxdWlyZSB9ID0gcmVxdWlyZSgnLi4vdXRpbHMvSGVscGVycycpO1xuY29uc3QgRmVhdHVyZSA9IHJlcXVpcmUoJy4uL2VudW0vRmVhdHVyZScpO1xuY29uc3QgeyBJbnZhbGlkQ29uZmlndXJhdGlvbiB9ID0gcmVxdWlyZSgnLi4vdXRpbHMvRXJyb3JzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIC8qKlxuICAgICAqIFRoaXMgZmVhdHVyZSBpcyBsb2FkZWQgYXQgc2VydmljZSBzdGFnZVxuICAgICAqIEBtZW1iZXIge3N0cmluZ31cbiAgICAgKi9cbiAgICB0eXBlOiBGZWF0dXJlLlNFUlZJQ0UsXG5cbiAgICAvKipcbiAgICAgKiBMb2FkIHRoZSBmZWF0dXJlXG4gICAgICogQHBhcmFtIHtTZXJ2aWNlQ29udGFpbmVyfSBhcHAgLSBUaGUgYXBwIG1vZHVsZSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YVNvdXJjZXMgLSBEYXRhc291cmNlIHNldHRpbmdzXG4gICAgICogQHJldHVybnMge1Byb21pc2UuPCo+fVxuICAgICAqL1xuICAgIGxvYWRfOiBhc3luYyAoYXBwLCBkYXRhU291cmNlcykgPT4ge1xuICAgICAgICBjb25zdCB7IENvbm5lY3RvciB9ID0gdHJ5UmVxdWlyZSgnQGdlbngvZGF0YScpO1xuXG4gICAgICAgIGNvbnN0IGxvZ2dlclByb3h5ID0ge1xuICAgICAgICAgICAgbG9nOiAoLi4uYXJncykgPT4gYXBwLmxvZyguLi5hcmdzKVxuICAgICAgICB9O1xuXG4gICAgICAgIF8uZm9yT3duKGRhdGFTb3VyY2VzLCAoZGF0YVNvdXJjZSwgZGJtcykgPT4ge1xuICAgICAgICAgICAgXy5mb3JPd24oZGF0YVNvdXJjZSwgKGNvbmZpZywgY29ubmVjdG9yTmFtZSkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBzZXJ2aWNlTmFtZSA9IGRibXMgKyAnLicgKyBjb25uZWN0b3JOYW1lO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFjb25maWcuY29ubmVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZENvbmZpZ3VyYXRpb24oXG4gICAgICAgICAgICAgICAgICAgICAgICBgTWlzc2luZyBjb25uZWN0aW9uIGNvbmZpZyBmb3IgZGF0YSBzb3VyY2UgXCIke3NlcnZpY2VOYW1lfVwiLmAsXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHAsXG4gICAgICAgICAgICAgICAgICAgICAgICBgZGF0YVNvdXJjZS4ke2RibXN9LiR7Y29ubmVjdG9yTmFtZX1gXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGxldCB7IGNvbm5lY3Rpb246IGNvbm5lY3Rpb25TdHJpbmcsIC4uLm90aGVyIH0gPSBjb25maWc7ICBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBsZXQgY29ubmVjdG9yU2VydmljZSA9IENvbm5lY3Rvci5jcmVhdGVDb25uZWN0b3IoZGJtcywgY29ubmVjdGlvblN0cmluZywgeyBsb2dnZXI6IGxvZ2dlclByb3h5LCAuLi5vdGhlciB9KTtcbiAgICAgICAgICAgICAgICBhcHAucmVnaXN0ZXJTZXJ2aWNlKHNlcnZpY2VOYW1lLCBjb25uZWN0b3JTZXJ2aWNlKTtcblxuICAgICAgICAgICAgICAgIGFwcC5vbignc3RvcHBpbmcnLCAoZWxlZ2FudFN0b3BwZXJzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGVsZWdhbnRTdG9wcGVycy5wdXNoKGNvbm5lY3RvclNlcnZpY2UuZW5kXygpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pOyAgICAgICAgICAgIFxuICAgICAgICB9KTsgICAgICAgIFxuICAgIH1cbn07Il19