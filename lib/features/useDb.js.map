{"version":3,"sources":["../../src/features/useDb.js"],"names":["path","require","naming","InvalidConfiguration","InvalidArgument","ApplicationError","Feature","Literal","module","exports","type","INIT","load_","app","dbRefs","DbCache","db","schemaName","originApp","schemaInfo","requestedSchema","fromLib","dataSource","refSchemaName","lib","server","getLib","connector","getService","i18n","__","modelPath","options","toAbsolutePath","backendPath","join","MODELS_PATH","Db","pascalCase","model","modelName","s","m","split"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/**\n * Enable db references\n * @module Feature_UseDb\n */\n\nconst path = require('path');\nconst { naming } = require('@genx/july');\nconst { InvalidConfiguration, InvalidArgument, ApplicationError } = require('@genx/error');\nconst Feature = require('../enum/Feature');\nconst Literal = require('../enum/Literal');\n\nmodule.exports = {\n    /**\n     * This feature is loaded at init stage\n     * @member {string}\n     */\n    type: Feature.INIT,\n\n    /**\n     * Load the feature\n     * @param {App} app - The app module object\n     * @param {object} dbRefs - db reference settings     \n     * @returns {Promise.<*>}\n     */\n    load_: async (app, dbRefs) => {\n        const DbCache = {};\n        \n        app.db = (schemaName, originApp) => {\n            if (!schemaName) {\n                throw new InvalidArgument('Schema name is required.')\n            }\n\n            if (!originApp && DbCache[schemaName]) return DbCache[schemaName];\n\n            let schemaInfo = dbRefs[schemaName];\n            if (!schemaInfo) {\n                throw new InvalidConfiguration(`Data source config for schema \"${schemaName}\" not found.`, app, { 'useDb': dbRefs, requestedSchema: schemaName });\n            }\n\n            if (!schemaInfo.fromLib && !schemaInfo.dataSource) {                \n                throw new InvalidConfiguration('Missing \"fromLib\" or \"dataSource\".', app, { 'useDb': dbRefs, requestedSchema: schemaName });\n            }\n\n            let db;\n\n            if (schemaInfo.fromLib) {\n                if (originApp) {\n                    throw new ApplicationError('Invalid usage of app.db()')\n                }\n\n                let refSchemaName = schemaInfo.schemaName || schemaName;\n                let lib = (app.server || app).getLib(schemaInfo.fromLib);\n\n                if (!lib.db) {\n                    throw new InvalidConfiguration(`\"useDb\" feature is not enabled in lib module \"${schemaInfo.fromLib}\".`, app);\n                }\n\n                db = lib.db(refSchemaName, app);\n            } else {\n                let connector = app.getService(schemaInfo.dataSource);\n                if (!connector) {\n                    throw new InvalidConfiguration(`Data source [${schemaInfo.dataSource}] not found.`, app, `useDb.${schemaName}.dataSource`);\n                }\n\n                let i18n = app.getService('i18n') || app.__;\n                let modelPath;\n\n                if (app.options.modelPath) {\n                    modelPath = app.toAbsolutePath(app.options.modelPath); \n                } else if (app.backendPath) {\n                    modelPath = path.join(app.backendPath, Literal.MODELS_PATH);\n                } else {\n                    modelPath = app.toAbsolutePath(Literal.MODELS_PATH); \n                }\n\n                const Db = require(path.join(modelPath, naming.pascalCase(schemaName)));\n                db = new Db(app, connector, i18n);\n                if (originApp) {\n                    db.app = originApp;\n                }\n            }           \n\n            if (!originApp) {\n                DbCache[schemaName] = db;            \n            }\n\n            return db;\n        };       \n        \n        app.model = (schemaName, modelName) => {\n            if (!modelName) {\n                let [ s, m ] = schemaName.split('.');\n                schemaName = s;\n                modelName = m;                \n            }\n            \n            return app.db(schemaName).model(modelName);\n        };\n    }\n};"],"file":"useDb.js"}