{"version":3,"sources":["../../src/features/useDb.js"],"names":["path","require","naming","InvalidConfiguration","Feature","Literal","module","exports","type","INIT","load_","app","dbRefs","DbCache","db","schemaName","schemaInfo","requestedSchema","fromLib","dataSource","refSchemaName","lib","server","getLib","connector","getService","i18n","__","modelPath","options","toAbsolutePath","backendPath","join","MODELS_PATH","Db","pascalCase","model","modelName","s","m","split"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/**\n * Enable db references\n * @module Feature_UseDb\n */\n\nconst path = require('path');\nconst { naming } = require('@genx/july');\nconst { InvalidConfiguration } = require('@genx/error');\nconst Feature = require('../enum/Feature');\nconst Literal = require('../enum/Literal');\n\nmodule.exports = {\n    /**\n     * This feature is loaded at init stage\n     * @member {string}\n     */\n    type: Feature.INIT,\n\n    /**\n     * Load the feature\n     * @param {App} app - The app module object\n     * @param {object} dbRefs - db reference settings     \n     * @returns {Promise.<*>}\n     */\n    load_: async (app, dbRefs) => {\n        const DbCache = {};\n        \n        app.db = (schemaName) => {\n            if (DbCache[schemaName]) return DbCache[schemaName];\n\n            let schemaInfo = dbRefs[schemaName];\n            if (!schemaInfo) {\n                throw new InvalidConfiguration(`Data source config for schema \"${schemaName}\" not found.`, app, { 'useDb': dbRefs, requestedSchema: schemaName });\n            }\n\n            if (!schemaInfo.fromLib && !schemaInfo.dataSource) {                \n                throw new InvalidConfiguration('Missing \"fromLib\" or \"dataSource\".', app, { 'useDb': dbRefs, requestedSchema: schemaName });\n            }\n\n            let db;\n\n            if (schemaInfo.fromLib) {\n                let refSchemaName = schemaInfo.schemaName || schemaName;\n                let lib = (app.server || app).getLib(schemaInfo.fromLib);\n\n                db = lib.db(refSchemaName);\n            } else {\n                let connector = app.getService(schemaInfo.dataSource);\n                if (!connector) {\n                    throw new InvalidConfiguration(`Data source [${schemaInfo.dataSource}] not found.`, app, `useDb.${schemaName}.dataSource`);\n                }\n\n                let i18n = app.getService('i18n') || app.__;\n                let modelPath;\n\n                if (app.options.modelPath) {\n                    modelPath = app.toAbsolutePath(app.options.modelPath); \n                } else if (app.backendPath) {\n                    modelPath = path.join(app.backendPath, Literal.MODELS_PATH);\n                } else {\n                    modelPath = app.toAbsolutePath(Literal.MODELS_PATH); \n                }\n\n                const Db = require(path.join(modelPath, naming.pascalCase(schemaName)));\n                db = new Db(app, connector, i18n);\n            }           \n\n            DbCache[schemaName] = db;            \n\n            return db;\n        };       \n        \n        app.model = (schemaName, modelName) => {\n            if (!modelName) {\n                let [ s, m ] = schemaName.split('.');\n                schemaName = s;\n                modelName = m;                \n            }\n            \n            return app.db(schemaName).model(modelName);\n        };\n    }\n};"],"file":"useDb.js"}