"use strict";

require("source-map-support/register");

const {
  _,
  waitUntil_
} = require('@genx/july');

const Feature = require('../enum/Feature');

const {
  ensureFeatureName
} = require("../utils/Helpers");

class SoapClient {
  constructor(app, config) {
    this.app = app;
    this.config = config;
    const soap = app.tryRequire('soap');
    soap.createClientAsync(config.wsdlUrl).then(client => {
      this._client = client;
    }).catch(error => {
      this.app.logError(error);
    });
  }

  async _waitForClientReady_() {
    if (this._client) return this._client;
    let createClientTimeout = this.config.createClientTimeout || 10000;
    let maxRound = createClientTimeout / 100;
    return waitUntil_(() => this._client, 100, maxRound);
  }

  async listMethods_() {
    let client = await this._waitForClientReady_();
    let desc = client.describe();

    let methods = _.mapValues(desc, svc => _.mapValues(svc, ms => Object.keys(ms)));

    return methods;
  }

  async call_(method, args) {
    let client = await this._waitForClientReady_();
    let [result, rawResponse, soapHeader, rawRequest] = await client[method + 'Async'](args);
    return result;
  }

}

module.exports = {
  type: Feature.SERVICE,
  groupable: true,
  load_: async function (app, settings, name) {
    ensureFeatureName(name);
    let client = new SoapClient(app, settings);
    app.registerService(name, client);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWF0dXJlcy9zb2FwQ2xpZW50LmpzIl0sIm5hbWVzIjpbIl8iLCJ3YWl0VW50aWxfIiwicmVxdWlyZSIsIkZlYXR1cmUiLCJlbnN1cmVGZWF0dXJlTmFtZSIsIlNvYXBDbGllbnQiLCJjb25zdHJ1Y3RvciIsImFwcCIsImNvbmZpZyIsInNvYXAiLCJ0cnlSZXF1aXJlIiwiY3JlYXRlQ2xpZW50QXN5bmMiLCJ3c2RsVXJsIiwidGhlbiIsImNsaWVudCIsIl9jbGllbnQiLCJjYXRjaCIsImVycm9yIiwibG9nRXJyb3IiLCJfd2FpdEZvckNsaWVudFJlYWR5XyIsImNyZWF0ZUNsaWVudFRpbWVvdXQiLCJtYXhSb3VuZCIsImxpc3RNZXRob2RzXyIsImRlc2MiLCJkZXNjcmliZSIsIm1ldGhvZHMiLCJtYXBWYWx1ZXMiLCJzdmMiLCJtcyIsIk9iamVjdCIsImtleXMiLCJjYWxsXyIsIm1ldGhvZCIsImFyZ3MiLCJyZXN1bHQiLCJyYXdSZXNwb25zZSIsInNvYXBIZWFkZXIiLCJyYXdSZXF1ZXN0IiwibW9kdWxlIiwiZXhwb3J0cyIsInR5cGUiLCJTRVJWSUNFIiwiZ3JvdXBhYmxlIiwibG9hZF8iLCJzZXR0aW5ncyIsIm5hbWUiLCJyZWdpc3RlclNlcnZpY2UiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNO0FBQUVBLEVBQUFBLENBQUY7QUFBS0MsRUFBQUE7QUFBTCxJQUFvQkMsT0FBTyxDQUFDLFlBQUQsQ0FBakM7O0FBQ0EsTUFBTUMsT0FBTyxHQUFHRCxPQUFPLENBQUMsaUJBQUQsQ0FBdkI7O0FBQ0EsTUFBTTtBQUFFRSxFQUFBQTtBQUFGLElBQXdCRixPQUFPLENBQUMsa0JBQUQsQ0FBckM7O0FBT0EsTUFBTUcsVUFBTixDQUFpQjtBQUNiQyxFQUFBQSxXQUFXLENBQUNDLEdBQUQsRUFBTUMsTUFBTixFQUFjO0FBQ3JCLFNBQUtELEdBQUwsR0FBV0EsR0FBWDtBQUNBLFNBQUtDLE1BQUwsR0FBY0EsTUFBZDtBQUVBLFVBQU1DLElBQUksR0FBR0YsR0FBRyxDQUFDRyxVQUFKLENBQWUsTUFBZixDQUFiO0FBRUFELElBQUFBLElBQUksQ0FBQ0UsaUJBQUwsQ0FBdUJILE1BQU0sQ0FBQ0ksT0FBOUIsRUFBdUNDLElBQXZDLENBQTRDQyxNQUFNLElBQUk7QUFDbEQsV0FBS0MsT0FBTCxHQUFlRCxNQUFmO0FBQ0gsS0FGRCxFQUVHRSxLQUZILENBRVNDLEtBQUssSUFBSTtBQUNkLFdBQUtWLEdBQUwsQ0FBU1csUUFBVCxDQUFrQkQsS0FBbEI7QUFDSCxLQUpEO0FBS0g7O0FBRUQsUUFBTUUsb0JBQU4sR0FBNkI7QUFDekIsUUFBSSxLQUFLSixPQUFULEVBQWtCLE9BQU8sS0FBS0EsT0FBWjtBQUVsQixRQUFJSyxtQkFBbUIsR0FBRyxLQUFLWixNQUFMLENBQVlZLG1CQUFaLElBQW1DLEtBQTdEO0FBQ0EsUUFBSUMsUUFBUSxHQUFHRCxtQkFBbUIsR0FBRyxHQUFyQztBQUVBLFdBQU9uQixVQUFVLENBQUMsTUFBTSxLQUFLYyxPQUFaLEVBQXFCLEdBQXJCLEVBQTBCTSxRQUExQixDQUFqQjtBQUNIOztBQUVELFFBQU1DLFlBQU4sR0FBcUI7QUFDakIsUUFBSVIsTUFBTSxHQUFHLE1BQU0sS0FBS0ssb0JBQUwsRUFBbkI7QUFFQSxRQUFJSSxJQUFJLEdBQUdULE1BQU0sQ0FBQ1UsUUFBUCxFQUFYOztBQUVBLFFBQUlDLE9BQU8sR0FBR3pCLENBQUMsQ0FBQzBCLFNBQUYsQ0FBWUgsSUFBWixFQUFrQkksR0FBRyxJQUFJM0IsQ0FBQyxDQUFDMEIsU0FBRixDQUFZQyxHQUFaLEVBQWlCQyxFQUFFLElBQUlDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZRixFQUFaLENBQXZCLENBQXpCLENBQWQ7O0FBRUEsV0FBT0gsT0FBUDtBQUNIOztBQUVELFFBQU1NLEtBQU4sQ0FBWUMsTUFBWixFQUFvQkMsSUFBcEIsRUFBMEI7QUFDdEIsUUFBSW5CLE1BQU0sR0FBRyxNQUFNLEtBQUtLLG9CQUFMLEVBQW5CO0FBRUEsUUFBSSxDQUFDZSxNQUFELEVBQVNDLFdBQVQsRUFBc0JDLFVBQXRCLEVBQWtDQyxVQUFsQyxJQUFnRCxNQUFNdkIsTUFBTSxDQUFDa0IsTUFBTSxHQUFHLE9BQVYsQ0FBTixDQUF5QkMsSUFBekIsQ0FBMUQ7QUFFQSxXQUFPQyxNQUFQO0FBQ0g7O0FBdkNZOztBQTBDakJJLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQU1iQyxFQUFBQSxJQUFJLEVBQUVyQyxPQUFPLENBQUNzQyxPQU5EO0FBWWJDLEVBQUFBLFNBQVMsRUFBRSxJQVpFO0FBb0JiQyxFQUFBQSxLQUFLLEVBQUUsZ0JBQWdCcEMsR0FBaEIsRUFBcUJxQyxRQUFyQixFQUErQkMsSUFBL0IsRUFBcUM7QUFDeEN6QyxJQUFBQSxpQkFBaUIsQ0FBQ3lDLElBQUQsQ0FBakI7QUFFQSxRQUFJL0IsTUFBTSxHQUFHLElBQUlULFVBQUosQ0FBZUUsR0FBZixFQUFvQnFDLFFBQXBCLENBQWI7QUFFQXJDLElBQUFBLEdBQUcsQ0FBQ3VDLGVBQUosQ0FBb0JELElBQXBCLEVBQTBCL0IsTUFBMUI7QUFDSDtBQTFCWSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgXywgd2FpdFVudGlsXyB9ID0gcmVxdWlyZSgnQGdlbngvanVseScpO1xuY29uc3QgRmVhdHVyZSA9IHJlcXVpcmUoJy4uL2VudW0vRmVhdHVyZScpO1xuY29uc3QgeyBlbnN1cmVGZWF0dXJlTmFtZSB9ID0gcmVxdWlyZShcIi4uL3V0aWxzL0hlbHBlcnNcIik7XG5cbi8qKlxuICogRW5hYmxlIGEgbmFtZWQgc29hcCBjbGllbnRcbiAqIEBtb2R1bGUgRmVhdHVyZV9Tb2FwQ2xpZW50XG4gKi9cblxuY2xhc3MgU29hcENsaWVudCB7XG4gICAgY29uc3RydWN0b3IoYXBwLCBjb25maWcpIHtcbiAgICAgICAgdGhpcy5hcHAgPSBhcHA7XG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuXG4gICAgICAgIGNvbnN0IHNvYXAgPSBhcHAudHJ5UmVxdWlyZSgnc29hcCcpO1xuXG4gICAgICAgIHNvYXAuY3JlYXRlQ2xpZW50QXN5bmMoY29uZmlnLndzZGxVcmwpLnRoZW4oY2xpZW50ID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2NsaWVudCA9IGNsaWVudDtcbiAgICAgICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgdGhpcy5hcHAubG9nRXJyb3IoZXJyb3IpO1xuICAgICAgICB9KTsgICAgICAgIFxuICAgIH0gICAgXG5cbiAgICBhc3luYyBfd2FpdEZvckNsaWVudFJlYWR5XygpIHtcbiAgICAgICAgaWYgKHRoaXMuX2NsaWVudCkgcmV0dXJuIHRoaXMuX2NsaWVudDtcblxuICAgICAgICBsZXQgY3JlYXRlQ2xpZW50VGltZW91dCA9IHRoaXMuY29uZmlnLmNyZWF0ZUNsaWVudFRpbWVvdXQgfHwgMTAwMDA7IC8vIDEwc1xuICAgICAgICBsZXQgbWF4Um91bmQgPSBjcmVhdGVDbGllbnRUaW1lb3V0IC8gMTAwO1xuXG4gICAgICAgIHJldHVybiB3YWl0VW50aWxfKCgpID0+IHRoaXMuX2NsaWVudCwgMTAwLCBtYXhSb3VuZCk7XG4gICAgfVxuXG4gICAgYXN5bmMgbGlzdE1ldGhvZHNfKCkge1xuICAgICAgICBsZXQgY2xpZW50ID0gYXdhaXQgdGhpcy5fd2FpdEZvckNsaWVudFJlYWR5XygpO1xuXG4gICAgICAgIGxldCBkZXNjID0gY2xpZW50LmRlc2NyaWJlKCk7XG5cbiAgICAgICAgbGV0IG1ldGhvZHMgPSBfLm1hcFZhbHVlcyhkZXNjLCBzdmMgPT4gXy5tYXBWYWx1ZXMoc3ZjLCBtcyA9PiBPYmplY3Qua2V5cyhtcykpKTsgICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBtZXRob2RzO1xuICAgIH1cblxuICAgIGFzeW5jIGNhbGxfKG1ldGhvZCwgYXJncykge1xuICAgICAgICBsZXQgY2xpZW50ID0gYXdhaXQgdGhpcy5fd2FpdEZvckNsaWVudFJlYWR5XygpO1xuXG4gICAgICAgIGxldCBbcmVzdWx0LCByYXdSZXNwb25zZSwgc29hcEhlYWRlciwgcmF3UmVxdWVzdF0gPSBhd2FpdCBjbGllbnRbbWV0aG9kICsgJ0FzeW5jJ10oYXJncyk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBmZWF0dXJlIGlzIGxvYWRlZCBhdCBpbml0IHN0YWdlXG4gICAgICogQG1lbWJlciB7c3RyaW5nfVxuICAgICAqL1xuICAgIHR5cGU6IEZlYXR1cmUuU0VSVklDRSxcblxuICAgIC8qKlxuICAgICAqIFRoaXMgZmVhdHVyZSBjYW4gYmUgZ3JvdXBlZCBieSBzZXJ2aWNlR3JvdXBcbiAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAqL1xuICAgIGdyb3VwYWJsZTogdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIExvYWQgdGhlIGZlYXR1cmVcbiAgICAgKiBAcGFyYW0ge0FwcH0gYXBwIC0gVGhlIGNsaSBhcHAgbW9kdWxlIG9iamVjdFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBzZXR0aW5ncyAtIFNldHRpbmdzIG9mIHNvYWwgY2xpZW50ICAgXG4gICAgICogQHJldHVybnMge1Byb21pc2UuPCo+fVxuICAgICAqL1xuICAgIGxvYWRfOiBhc3luYyBmdW5jdGlvbiAoYXBwLCBzZXR0aW5ncywgbmFtZSkge1xuICAgICAgICBlbnN1cmVGZWF0dXJlTmFtZShuYW1lKTtcblxuICAgICAgICBsZXQgY2xpZW50ID0gbmV3IFNvYXBDbGllbnQoYXBwLCBzZXR0aW5ncyk7XG5cbiAgICAgICAgYXBwLnJlZ2lzdGVyU2VydmljZShuYW1lLCBjbGllbnQpO1xuICAgIH1cbn07Il19