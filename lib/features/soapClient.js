"use strict";

require("source-map-support/register");

const {
  _,
  waitUntil_
} = require('rk-utils');

const Feature = require('../enum/Feature');

const {
  tryRequire
} = require('../utils/Helpers');

class SoapClient {
  constructor(app, config) {
    this.app = app;
    this.config = config;
    const soap = tryRequire('soap');
    soap.createClientAsync(config.wsdlUrl).then(client => {
      this._client = client;
    }).catch(error => {
      this.app.logError(error);
    });
  }

  async _waitForClientReady_() {
    if (this._client) return this._client;
    let createClientTimeout = this.config.createClientTimeout || 10000;
    let maxRound = createClientTimeout / 100;
    return waitUntil_(() => this._client, 100, maxRound);
  }

  async listMethods_() {
    let client = await this._waitForClientReady_();
    let desc = client.describe();

    let methods = _.mapValues(desc, svc => _.mapValues(svc, ms => Object.keys(ms)));

    return methods;
  }

  async call_(method, args) {
    let client = await this._waitForClientReady_();
    let [result, rawResponse, soapHeader, rawRequest] = await client[method + 'Async'](args);
    return result;
  }

}

module.exports = {
  type: Feature.SERVICE,
  load_: async function (app, settings) {
    _.map(settings, (config, name) => {
      let client = new SoapClient(app, config);
      app.registerService(`soapClient.${name}`, client);
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWF0dXJlcy9zb2FwQ2xpZW50LmpzIl0sIm5hbWVzIjpbIl8iLCJ3YWl0VW50aWxfIiwicmVxdWlyZSIsIkZlYXR1cmUiLCJ0cnlSZXF1aXJlIiwiU29hcENsaWVudCIsImNvbnN0cnVjdG9yIiwiYXBwIiwiY29uZmlnIiwic29hcCIsImNyZWF0ZUNsaWVudEFzeW5jIiwid3NkbFVybCIsInRoZW4iLCJjbGllbnQiLCJfY2xpZW50IiwiY2F0Y2giLCJlcnJvciIsImxvZ0Vycm9yIiwiX3dhaXRGb3JDbGllbnRSZWFkeV8iLCJjcmVhdGVDbGllbnRUaW1lb3V0IiwibWF4Um91bmQiLCJsaXN0TWV0aG9kc18iLCJkZXNjIiwiZGVzY3JpYmUiLCJtZXRob2RzIiwibWFwVmFsdWVzIiwic3ZjIiwibXMiLCJPYmplY3QiLCJrZXlzIiwiY2FsbF8iLCJtZXRob2QiLCJhcmdzIiwicmVzdWx0IiwicmF3UmVzcG9uc2UiLCJzb2FwSGVhZGVyIiwicmF3UmVxdWVzdCIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0eXBlIiwiU0VSVklDRSIsImxvYWRfIiwic2V0dGluZ3MiLCJtYXAiLCJuYW1lIiwicmVnaXN0ZXJTZXJ2aWNlIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTTtBQUFFQSxFQUFBQSxDQUFGO0FBQUtDLEVBQUFBO0FBQUwsSUFBb0JDLE9BQU8sQ0FBQyxVQUFELENBQWpDOztBQUNBLE1BQU1DLE9BQU8sR0FBR0QsT0FBTyxDQUFDLGlCQUFELENBQXZCOztBQUNBLE1BQU07QUFBRUUsRUFBQUE7QUFBRixJQUFpQkYsT0FBTyxDQUFDLGtCQUFELENBQTlCOztBQU9BLE1BQU1HLFVBQU4sQ0FBaUI7QUFDYkMsRUFBQUEsV0FBVyxDQUFDQyxHQUFELEVBQU1DLE1BQU4sRUFBYztBQUNyQixTQUFLRCxHQUFMLEdBQVdBLEdBQVg7QUFDQSxTQUFLQyxNQUFMLEdBQWNBLE1BQWQ7QUFFQSxVQUFNQyxJQUFJLEdBQUdMLFVBQVUsQ0FBQyxNQUFELENBQXZCO0FBRUFLLElBQUFBLElBQUksQ0FBQ0MsaUJBQUwsQ0FBdUJGLE1BQU0sQ0FBQ0csT0FBOUIsRUFBdUNDLElBQXZDLENBQTRDQyxNQUFNLElBQUk7QUFDbEQsV0FBS0MsT0FBTCxHQUFlRCxNQUFmO0FBQ0gsS0FGRCxFQUVHRSxLQUZILENBRVNDLEtBQUssSUFBSTtBQUNkLFdBQUtULEdBQUwsQ0FBU1UsUUFBVCxDQUFrQkQsS0FBbEI7QUFDSCxLQUpEO0FBS0g7O0FBRUQsUUFBTUUsb0JBQU4sR0FBNkI7QUFDekIsUUFBSSxLQUFLSixPQUFULEVBQWtCLE9BQU8sS0FBS0EsT0FBWjtBQUVsQixRQUFJSyxtQkFBbUIsR0FBRyxLQUFLWCxNQUFMLENBQVlXLG1CQUFaLElBQW1DLEtBQTdEO0FBQ0EsUUFBSUMsUUFBUSxHQUFHRCxtQkFBbUIsR0FBRyxHQUFyQztBQUVBLFdBQU9sQixVQUFVLENBQUMsTUFBTSxLQUFLYSxPQUFaLEVBQXFCLEdBQXJCLEVBQTBCTSxRQUExQixDQUFqQjtBQUNIOztBQUVELFFBQU1DLFlBQU4sR0FBcUI7QUFDakIsUUFBSVIsTUFBTSxHQUFHLE1BQU0sS0FBS0ssb0JBQUwsRUFBbkI7QUFFQSxRQUFJSSxJQUFJLEdBQUdULE1BQU0sQ0FBQ1UsUUFBUCxFQUFYOztBQUVBLFFBQUlDLE9BQU8sR0FBR3hCLENBQUMsQ0FBQ3lCLFNBQUYsQ0FBWUgsSUFBWixFQUFrQkksR0FBRyxJQUFJMUIsQ0FBQyxDQUFDeUIsU0FBRixDQUFZQyxHQUFaLEVBQWlCQyxFQUFFLElBQUlDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZRixFQUFaLENBQXZCLENBQXpCLENBQWQ7O0FBRUEsV0FBT0gsT0FBUDtBQUNIOztBQUVELFFBQU1NLEtBQU4sQ0FBWUMsTUFBWixFQUFvQkMsSUFBcEIsRUFBMEI7QUFDdEIsUUFBSW5CLE1BQU0sR0FBRyxNQUFNLEtBQUtLLG9CQUFMLEVBQW5CO0FBRUEsUUFBSSxDQUFDZSxNQUFELEVBQVNDLFdBQVQsRUFBc0JDLFVBQXRCLEVBQWtDQyxVQUFsQyxJQUFnRCxNQUFNdkIsTUFBTSxDQUFDa0IsTUFBTSxHQUFHLE9BQVYsQ0FBTixDQUF5QkMsSUFBekIsQ0FBMUQ7QUFFQSxXQUFPQyxNQUFQO0FBQ0g7O0FBdkNZOztBQTBDakJJLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQU1iQyxFQUFBQSxJQUFJLEVBQUVwQyxPQUFPLENBQUNxQyxPQU5EO0FBY2JDLEVBQUFBLEtBQUssRUFBRSxnQkFBZ0JsQyxHQUFoQixFQUFxQm1DLFFBQXJCLEVBQStCO0FBQ2xDMUMsSUFBQUEsQ0FBQyxDQUFDMkMsR0FBRixDQUFNRCxRQUFOLEVBQWdCLENBQUNsQyxNQUFELEVBQVNvQyxJQUFULEtBQWtCO0FBQzlCLFVBQUkvQixNQUFNLEdBQUcsSUFBSVIsVUFBSixDQUFlRSxHQUFmLEVBQW9CQyxNQUFwQixDQUFiO0FBRUFELE1BQUFBLEdBQUcsQ0FBQ3NDLGVBQUosQ0FBcUIsY0FBYUQsSUFBSyxFQUF2QyxFQUEwQy9CLE1BQTFDO0FBQ0gsS0FKRDtBQUtIO0FBcEJZLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBfLCB3YWl0VW50aWxfIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgRmVhdHVyZSA9IHJlcXVpcmUoJy4uL2VudW0vRmVhdHVyZScpO1xuY29uc3QgeyB0cnlSZXF1aXJlIH0gPSByZXF1aXJlKCcuLi91dGlscy9IZWxwZXJzJyk7XG5cbi8qKlxuICogRW5hYmxlIGEgbmFtZWQgc29hcCBjbGllbnRcbiAqIEBtb2R1bGUgRmVhdHVyZV9Tb2FwQ2xpZW50XG4gKi9cblxuY2xhc3MgU29hcENsaWVudCB7XG4gICAgY29uc3RydWN0b3IoYXBwLCBjb25maWcpIHtcbiAgICAgICAgdGhpcy5hcHAgPSBhcHA7XG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuXG4gICAgICAgIGNvbnN0IHNvYXAgPSB0cnlSZXF1aXJlKCdzb2FwJyk7XG5cbiAgICAgICAgc29hcC5jcmVhdGVDbGllbnRBc3luYyhjb25maWcud3NkbFVybCkudGhlbihjbGllbnQgPT4ge1xuICAgICAgICAgICAgdGhpcy5fY2xpZW50ID0gY2xpZW50O1xuICAgICAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICB0aGlzLmFwcC5sb2dFcnJvcihlcnJvcik7XG4gICAgICAgIH0pOyAgICAgICAgXG4gICAgfSAgICBcblxuICAgIGFzeW5jIF93YWl0Rm9yQ2xpZW50UmVhZHlfKCkge1xuICAgICAgICBpZiAodGhpcy5fY2xpZW50KSByZXR1cm4gdGhpcy5fY2xpZW50O1xuXG4gICAgICAgIGxldCBjcmVhdGVDbGllbnRUaW1lb3V0ID0gdGhpcy5jb25maWcuY3JlYXRlQ2xpZW50VGltZW91dCB8fCAxMDAwMDsgLy8gMTBzXG4gICAgICAgIGxldCBtYXhSb3VuZCA9IGNyZWF0ZUNsaWVudFRpbWVvdXQgLyAxMDA7XG5cbiAgICAgICAgcmV0dXJuIHdhaXRVbnRpbF8oKCkgPT4gdGhpcy5fY2xpZW50LCAxMDAsIG1heFJvdW5kKTtcbiAgICB9XG5cbiAgICBhc3luYyBsaXN0TWV0aG9kc18oKSB7XG4gICAgICAgIGxldCBjbGllbnQgPSBhd2FpdCB0aGlzLl93YWl0Rm9yQ2xpZW50UmVhZHlfKCk7XG5cbiAgICAgICAgbGV0IGRlc2MgPSBjbGllbnQuZGVzY3JpYmUoKTtcblxuICAgICAgICBsZXQgbWV0aG9kcyA9IF8ubWFwVmFsdWVzKGRlc2MsIHN2YyA9PiBfLm1hcFZhbHVlcyhzdmMsIG1zID0+IE9iamVjdC5rZXlzKG1zKSkpOyAgICAgICAgIFxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIG1ldGhvZHM7XG4gICAgfVxuXG4gICAgYXN5bmMgY2FsbF8obWV0aG9kLCBhcmdzKSB7XG4gICAgICAgIGxldCBjbGllbnQgPSBhd2FpdCB0aGlzLl93YWl0Rm9yQ2xpZW50UmVhZHlfKCk7XG5cbiAgICAgICAgbGV0IFtyZXN1bHQsIHJhd1Jlc3BvbnNlLCBzb2FwSGVhZGVyLCByYXdSZXF1ZXN0XSA9IGF3YWl0IGNsaWVudFttZXRob2QgKyAnQXN5bmMnXShhcmdzKTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZlYXR1cmUgaXMgbG9hZGVkIGF0IGluaXQgc3RhZ2VcbiAgICAgKiBAbWVtYmVyIHtzdHJpbmd9XG4gICAgICovXG4gICAgdHlwZTogRmVhdHVyZS5TRVJWSUNFLFxuXG4gICAgLyoqXG4gICAgICogTG9hZCB0aGUgZmVhdHVyZVxuICAgICAqIEBwYXJhbSB7QXBwfSBhcHAgLSBUaGUgY2xpIGFwcCBtb2R1bGUgb2JqZWN0XG4gICAgICogQHBhcmFtIHtvYmplY3R9IHNldHRpbmdzIC0gU2V0dGluZ3Mgb2YgcmVzdCBjbGllbnRzICAgIFxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlLjwqPn1cbiAgICAgKi9cbiAgICBsb2FkXzogYXN5bmMgZnVuY3Rpb24gKGFwcCwgc2V0dGluZ3MpIHtcbiAgICAgICAgXy5tYXAoc2V0dGluZ3MsIChjb25maWcsIG5hbWUpID0+IHtcbiAgICAgICAgICAgIGxldCBjbGllbnQgPSBuZXcgU29hcENsaWVudChhcHAsIGNvbmZpZyk7XG5cbiAgICAgICAgICAgIGFwcC5yZWdpc3RlclNlcnZpY2UoYHNvYXBDbGllbnQuJHtuYW1lfWAsIGNsaWVudCk7XG4gICAgICAgIH0pOyAgICAgICAgXG4gICAgfVxufTsiXX0=