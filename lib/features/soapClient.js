"use strict";

require("source-map-support/register");

const {
  _,
  waitUntil_
} = require('rk-utils');

const Feature = require('../enum/Feature');

const {
  tryRequire
} = require('../utils/Helpers');

class SoapClient {
  constructor(app, config) {
    this.app = app;
    this.config = config;
    const soap = tryRequire('soap');
    soap.createClientAsync(config.wsdlUrl).then(client => {
      this._client = client;
    }).catch(error => {
      this.app.logError(error);
    });
  }

  async _waitForClientReady_() {
    if (this._client) return this._client;
    let createClientTimeout = this.config.createClientTimeout || 10000;
    let maxRound = createClientTimeout / 100;
    return waitUntil_(() => this._client, 100, maxRound);
  }

  async listMethods_() {
    let client = await this._waitForClientReady_();
    let desc = client.describe();

    let methods = _.mapValues(desc, svc => _.mapValues(svc, ms => Object.keys(ms)));

    return methods;
  }

  async call_(method, args) {
    let client = await this._waitForClientReady_();
    let [result, rawResponse, soapHeader, rawRequest] = await client[method + 'Async'](args);
    return result;
  }

}

module.exports = {
  type: Feature.SERVICE,
  load_: async function (app, settings) {
    _.map(settings, (config, name) => {
      let client = new SoapClient(app, config);
      app.registerService(`soapClient.${name}`, client);
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWF0dXJlcy9zb2FwQ2xpZW50LmpzIl0sIm5hbWVzIjpbIl8iLCJ3YWl0VW50aWxfIiwicmVxdWlyZSIsIkZlYXR1cmUiLCJ0cnlSZXF1aXJlIiwiU29hcENsaWVudCIsImNvbnN0cnVjdG9yIiwiYXBwIiwiY29uZmlnIiwic29hcCIsImNyZWF0ZUNsaWVudEFzeW5jIiwid3NkbFVybCIsInRoZW4iLCJjbGllbnQiLCJfY2xpZW50IiwiY2F0Y2giLCJlcnJvciIsImxvZ0Vycm9yIiwiX3dhaXRGb3JDbGllbnRSZWFkeV8iLCJjcmVhdGVDbGllbnRUaW1lb3V0IiwibWF4Um91bmQiLCJsaXN0TWV0aG9kc18iLCJkZXNjIiwiZGVzY3JpYmUiLCJtZXRob2RzIiwibWFwVmFsdWVzIiwic3ZjIiwibXMiLCJPYmplY3QiLCJrZXlzIiwiY2FsbF8iLCJtZXRob2QiLCJhcmdzIiwicmVzdWx0IiwicmF3UmVzcG9uc2UiLCJzb2FwSGVhZGVyIiwicmF3UmVxdWVzdCIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0eXBlIiwiU0VSVklDRSIsImxvYWRfIiwic2V0dGluZ3MiLCJtYXAiLCJuYW1lIiwicmVnaXN0ZXJTZXJ2aWNlIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTTtBQUFFQSxFQUFBQSxDQUFGO0FBQUtDLEVBQUFBO0FBQUwsSUFBb0JDLE9BQU8sQ0FBQyxVQUFELENBQWpDOztBQUNBLE1BQU1DLE9BQU8sR0FBR0QsT0FBTyxDQUFDLGlCQUFELENBQXZCOztBQUNBLE1BQU07QUFBRUUsRUFBQUE7QUFBRixJQUFpQkYsT0FBTyxDQUFDLGtCQUFELENBQTlCOztBQUVBLE1BQU1HLFVBQU4sQ0FBaUI7QUFDYkMsRUFBQUEsV0FBVyxDQUFDQyxHQUFELEVBQU1DLE1BQU4sRUFBYztBQUNyQixTQUFLRCxHQUFMLEdBQVdBLEdBQVg7QUFDQSxTQUFLQyxNQUFMLEdBQWNBLE1BQWQ7QUFFQSxVQUFNQyxJQUFJLEdBQUdMLFVBQVUsQ0FBQyxNQUFELENBQXZCO0FBRUFLLElBQUFBLElBQUksQ0FBQ0MsaUJBQUwsQ0FBdUJGLE1BQU0sQ0FBQ0csT0FBOUIsRUFBdUNDLElBQXZDLENBQTRDQyxNQUFNLElBQUk7QUFDbEQsV0FBS0MsT0FBTCxHQUFlRCxNQUFmO0FBQ0gsS0FGRCxFQUVHRSxLQUZILENBRVNDLEtBQUssSUFBSTtBQUNkLFdBQUtULEdBQUwsQ0FBU1UsUUFBVCxDQUFrQkQsS0FBbEI7QUFDSCxLQUpEO0FBS0g7O0FBRUQsUUFBTUUsb0JBQU4sR0FBNkI7QUFDekIsUUFBSSxLQUFLSixPQUFULEVBQWtCLE9BQU8sS0FBS0EsT0FBWjtBQUVsQixRQUFJSyxtQkFBbUIsR0FBRyxLQUFLWCxNQUFMLENBQVlXLG1CQUFaLElBQW1DLEtBQTdEO0FBQ0EsUUFBSUMsUUFBUSxHQUFHRCxtQkFBbUIsR0FBRyxHQUFyQztBQUVBLFdBQU9sQixVQUFVLENBQUMsTUFBTSxLQUFLYSxPQUFaLEVBQXFCLEdBQXJCLEVBQTBCTSxRQUExQixDQUFqQjtBQUNIOztBQUVELFFBQU1DLFlBQU4sR0FBcUI7QUFDakIsUUFBSVIsTUFBTSxHQUFHLE1BQU0sS0FBS0ssb0JBQUwsRUFBbkI7QUFFQSxRQUFJSSxJQUFJLEdBQUdULE1BQU0sQ0FBQ1UsUUFBUCxFQUFYOztBQUVBLFFBQUlDLE9BQU8sR0FBR3hCLENBQUMsQ0FBQ3lCLFNBQUYsQ0FBWUgsSUFBWixFQUFrQkksR0FBRyxJQUFJMUIsQ0FBQyxDQUFDeUIsU0FBRixDQUFZQyxHQUFaLEVBQWlCQyxFQUFFLElBQUlDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZRixFQUFaLENBQXZCLENBQXpCLENBQWQ7O0FBRUEsV0FBT0gsT0FBUDtBQUNIOztBQUVELFFBQU1NLEtBQU4sQ0FBWUMsTUFBWixFQUFvQkMsSUFBcEIsRUFBMEI7QUFDdEIsUUFBSW5CLE1BQU0sR0FBRyxNQUFNLEtBQUtLLG9CQUFMLEVBQW5CO0FBRUEsUUFBSSxDQUFDZSxNQUFELEVBQVNDLFdBQVQsRUFBc0JDLFVBQXRCLEVBQWtDQyxVQUFsQyxJQUFnRCxNQUFNdkIsTUFBTSxDQUFDa0IsTUFBTSxHQUFHLE9BQVYsQ0FBTixDQUF5QkMsSUFBekIsQ0FBMUQ7QUFFQSxXQUFPQyxNQUFQO0FBQ0g7O0FBdkNZOztBQTBDakJJLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQU1iQyxFQUFBQSxJQUFJLEVBQUVwQyxPQUFPLENBQUNxQyxPQU5EO0FBY2JDLEVBQUFBLEtBQUssRUFBRSxnQkFBZ0JsQyxHQUFoQixFQUFxQm1DLFFBQXJCLEVBQStCO0FBQ2xDMUMsSUFBQUEsQ0FBQyxDQUFDMkMsR0FBRixDQUFNRCxRQUFOLEVBQWdCLENBQUNsQyxNQUFELEVBQVNvQyxJQUFULEtBQWtCO0FBQzlCLFVBQUkvQixNQUFNLEdBQUcsSUFBSVIsVUFBSixDQUFlRSxHQUFmLEVBQW9CQyxNQUFwQixDQUFiO0FBRUFELE1BQUFBLEdBQUcsQ0FBQ3NDLGVBQUosQ0FBcUIsY0FBYUQsSUFBSyxFQUF2QyxFQUEwQy9CLE1BQTFDO0FBQ0gsS0FKRDtBQUtIO0FBcEJZLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBfLCB3YWl0VW50aWxfIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgRmVhdHVyZSA9IHJlcXVpcmUoJy4uL2VudW0vRmVhdHVyZScpO1xuY29uc3QgeyB0cnlSZXF1aXJlIH0gPSByZXF1aXJlKCcuLi91dGlscy9IZWxwZXJzJyk7XG5cbmNsYXNzIFNvYXBDbGllbnQge1xuICAgIGNvbnN0cnVjdG9yKGFwcCwgY29uZmlnKSB7XG4gICAgICAgIHRoaXMuYXBwID0gYXBwO1xuICAgICAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcblxuICAgICAgICBjb25zdCBzb2FwID0gdHJ5UmVxdWlyZSgnc29hcCcpO1xuXG4gICAgICAgIHNvYXAuY3JlYXRlQ2xpZW50QXN5bmMoY29uZmlnLndzZGxVcmwpLnRoZW4oY2xpZW50ID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2NsaWVudCA9IGNsaWVudDtcbiAgICAgICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgdGhpcy5hcHAubG9nRXJyb3IoZXJyb3IpO1xuICAgICAgICB9KTsgICAgICAgIFxuICAgIH0gICAgXG5cbiAgICBhc3luYyBfd2FpdEZvckNsaWVudFJlYWR5XygpIHtcbiAgICAgICAgaWYgKHRoaXMuX2NsaWVudCkgcmV0dXJuIHRoaXMuX2NsaWVudDtcblxuICAgICAgICBsZXQgY3JlYXRlQ2xpZW50VGltZW91dCA9IHRoaXMuY29uZmlnLmNyZWF0ZUNsaWVudFRpbWVvdXQgfHwgMTAwMDA7IC8vIDEwc1xuICAgICAgICBsZXQgbWF4Um91bmQgPSBjcmVhdGVDbGllbnRUaW1lb3V0IC8gMTAwO1xuXG4gICAgICAgIHJldHVybiB3YWl0VW50aWxfKCgpID0+IHRoaXMuX2NsaWVudCwgMTAwLCBtYXhSb3VuZCk7XG4gICAgfVxuXG4gICAgYXN5bmMgbGlzdE1ldGhvZHNfKCkge1xuICAgICAgICBsZXQgY2xpZW50ID0gYXdhaXQgdGhpcy5fd2FpdEZvckNsaWVudFJlYWR5XygpO1xuXG4gICAgICAgIGxldCBkZXNjID0gY2xpZW50LmRlc2NyaWJlKCk7XG5cbiAgICAgICAgbGV0IG1ldGhvZHMgPSBfLm1hcFZhbHVlcyhkZXNjLCBzdmMgPT4gXy5tYXBWYWx1ZXMoc3ZjLCBtcyA9PiBPYmplY3Qua2V5cyhtcykpKTsgICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBtZXRob2RzO1xuICAgIH1cblxuICAgIGFzeW5jIGNhbGxfKG1ldGhvZCwgYXJncykge1xuICAgICAgICBsZXQgY2xpZW50ID0gYXdhaXQgdGhpcy5fd2FpdEZvckNsaWVudFJlYWR5XygpO1xuXG4gICAgICAgIGxldCBbcmVzdWx0LCByYXdSZXNwb25zZSwgc29hcEhlYWRlciwgcmF3UmVxdWVzdF0gPSBhd2FpdCBjbGllbnRbbWV0aG9kICsgJ0FzeW5jJ10oYXJncyk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBmZWF0dXJlIGlzIGxvYWRlZCBhdCBpbml0IHN0YWdlXG4gICAgICogQG1lbWJlciB7c3RyaW5nfVxuICAgICAqL1xuICAgIHR5cGU6IEZlYXR1cmUuU0VSVklDRSxcblxuICAgIC8qKlxuICAgICAqIExvYWQgdGhlIGZlYXR1cmVcbiAgICAgKiBAcGFyYW0ge0FwcH0gYXBwIC0gVGhlIGNsaSBhcHAgbW9kdWxlIG9iamVjdFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBzZXR0aW5ncyAtIFNldHRpbmdzIG9mIHJlc3QgY2xpZW50cyAgICBcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZS48Kj59XG4gICAgICovXG4gICAgbG9hZF86IGFzeW5jIGZ1bmN0aW9uIChhcHAsIHNldHRpbmdzKSB7XG4gICAgICAgIF8ubWFwKHNldHRpbmdzLCAoY29uZmlnLCBuYW1lKSA9PiB7XG4gICAgICAgICAgICBsZXQgY2xpZW50ID0gbmV3IFNvYXBDbGllbnQoYXBwLCBjb25maWcpO1xuXG4gICAgICAgICAgICBhcHAucmVnaXN0ZXJTZXJ2aWNlKGBzb2FwQ2xpZW50LiR7bmFtZX1gLCBjbGllbnQpO1xuICAgICAgICB9KTsgICAgICAgIFxuICAgIH1cbn07Il19