"use strict";

require("source-map-support/register");

const path = require('path');

const {
  _,
  pascalCase
} = require('rk-utils');

const {
  InvalidConfiguration
} = require('../utils/Errors');

const Feature = require('../enum/Feature');

const Literal = require('../enum/Literal');

const DbCache = {};
module.exports = {
  type: Feature.INIT,
  load_: async (app, dbRefs) => {
    app.db = schemaName => {
      if (DbCache[schemaName]) return DbCache[schemaName];
      let schemaInfo = dbRefs[schemaName];

      if (!schemaInfo || !schemaInfo.fromLib && !schemaInfo.dataSource) {
        throw new InvalidConfiguration('Missing "lib" or "dataSource".', app, `useDb.${schemaName}`);
      }

      let connector = app.getService(schemaInfo.dataSource);

      if (!connector) {
        throw new InvalidConfiguration(`Data source [${schemaInfo.dataSource}] not found.`, app, `useDb.${schemaName}.dataSource`);
      }

      let i18n = app.getService('i18n') || app.__;

      let modelPath;
      modelPath = app.toAbsolutePath(app.options.modelsPath || Literal.MODELS_PATH);

      const Db = require(path.join(modelPath, pascalCase(schemaName)));

      let db = new Db(app, connector, i18n);
      DbCache[schemaName] = db;
      return db;
    };

    app.model = (schemaName, modelName) => {
      if (!modelName) {
        let [s, m] = schemaName.split('.');
        schemaName = s;
        modelName = m;
      }

      return app.db(schemaName).model(modelName);
    };
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWF0dXJlcy91c2VEYi5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsIl8iLCJwYXNjYWxDYXNlIiwiSW52YWxpZENvbmZpZ3VyYXRpb24iLCJGZWF0dXJlIiwiTGl0ZXJhbCIsIkRiQ2FjaGUiLCJtb2R1bGUiLCJleHBvcnRzIiwidHlwZSIsIklOSVQiLCJsb2FkXyIsImFwcCIsImRiUmVmcyIsImRiIiwic2NoZW1hTmFtZSIsInNjaGVtYUluZm8iLCJmcm9tTGliIiwiZGF0YVNvdXJjZSIsImNvbm5lY3RvciIsImdldFNlcnZpY2UiLCJpMThuIiwiX18iLCJtb2RlbFBhdGgiLCJ0b0Fic29sdXRlUGF0aCIsIm9wdGlvbnMiLCJtb2RlbHNQYXRoIiwiTU9ERUxTX1BBVEgiLCJEYiIsImpvaW4iLCJtb2RlbCIsIm1vZGVsTmFtZSIsInMiLCJtIiwic3BsaXQiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBT0EsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBLENBQUY7QUFBS0MsRUFBQUE7QUFBTCxJQUFvQkYsT0FBTyxDQUFDLFVBQUQsQ0FBakM7O0FBQ0EsTUFBTTtBQUFFRyxFQUFBQTtBQUFGLElBQTJCSCxPQUFPLENBQUMsaUJBQUQsQ0FBeEM7O0FBQ0EsTUFBTUksT0FBTyxHQUFHSixPQUFPLENBQUMsaUJBQUQsQ0FBdkI7O0FBQ0EsTUFBTUssT0FBTyxHQUFHTCxPQUFPLENBQUMsaUJBQUQsQ0FBdkI7O0FBRUEsTUFBTU0sT0FBTyxHQUFHLEVBQWhCO0FBRUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUtiQyxFQUFBQSxJQUFJLEVBQUVMLE9BQU8sQ0FBQ00sSUFMRDtBQWFiQyxFQUFBQSxLQUFLLEVBQUUsT0FBT0MsR0FBUCxFQUFZQyxNQUFaLEtBQXVCO0FBQzFCRCxJQUFBQSxHQUFHLENBQUNFLEVBQUosR0FBVUMsVUFBRCxJQUFnQjtBQUNyQixVQUFJVCxPQUFPLENBQUNTLFVBQUQsQ0FBWCxFQUF5QixPQUFPVCxPQUFPLENBQUNTLFVBQUQsQ0FBZDtBQUV6QixVQUFJQyxVQUFVLEdBQUdILE1BQU0sQ0FBQ0UsVUFBRCxDQUF2Qjs7QUFDQSxVQUFJLENBQUNDLFVBQUQsSUFBZ0IsQ0FBQ0EsVUFBVSxDQUFDQyxPQUFaLElBQXVCLENBQUNELFVBQVUsQ0FBQ0UsVUFBdkQsRUFBb0U7QUFFaEUsY0FBTSxJQUFJZixvQkFBSixDQUF5QixnQ0FBekIsRUFBMkRTLEdBQTNELEVBQWlFLFNBQVFHLFVBQVcsRUFBcEYsQ0FBTjtBQUNIOztBQUVELFVBQUlJLFNBQVMsR0FBR1AsR0FBRyxDQUFDUSxVQUFKLENBQWVKLFVBQVUsQ0FBQ0UsVUFBMUIsQ0FBaEI7O0FBQ0EsVUFBSSxDQUFDQyxTQUFMLEVBQWdCO0FBQ1osY0FBTSxJQUFJaEIsb0JBQUosQ0FBMEIsZ0JBQWVhLFVBQVUsQ0FBQ0UsVUFBVyxjQUEvRCxFQUE4RU4sR0FBOUUsRUFBb0YsU0FBUUcsVUFBVyxhQUF2RyxDQUFOO0FBQ0g7O0FBRUQsVUFBSU0sSUFBSSxHQUFHVCxHQUFHLENBQUNRLFVBQUosQ0FBZSxNQUFmLEtBQTBCUixHQUFHLENBQUNVLEVBQXpDOztBQUNBLFVBQUlDLFNBQUo7QUFFQUEsTUFBQUEsU0FBUyxHQUFHWCxHQUFHLENBQUNZLGNBQUosQ0FBbUJaLEdBQUcsQ0FBQ2EsT0FBSixDQUFZQyxVQUFaLElBQTBCckIsT0FBTyxDQUFDc0IsV0FBckQsQ0FBWjs7QUFFQSxZQUFNQyxFQUFFLEdBQUc1QixPQUFPLENBQUNELElBQUksQ0FBQzhCLElBQUwsQ0FBVU4sU0FBVixFQUFxQnJCLFVBQVUsQ0FBQ2EsVUFBRCxDQUEvQixDQUFELENBQWxCOztBQUNBLFVBQUlELEVBQUUsR0FBRyxJQUFJYyxFQUFKLENBQU9oQixHQUFQLEVBQVlPLFNBQVosRUFBdUJFLElBQXZCLENBQVQ7QUFFQWYsTUFBQUEsT0FBTyxDQUFDUyxVQUFELENBQVAsR0FBc0JELEVBQXRCO0FBRUEsYUFBT0EsRUFBUDtBQUNILEtBekJEOztBQTJCQUYsSUFBQUEsR0FBRyxDQUFDa0IsS0FBSixHQUFZLENBQUNmLFVBQUQsRUFBYWdCLFNBQWIsS0FBMkI7QUFDbkMsVUFBSSxDQUFDQSxTQUFMLEVBQWdCO0FBQ1osWUFBSSxDQUFFQyxDQUFGLEVBQUtDLENBQUwsSUFBV2xCLFVBQVUsQ0FBQ21CLEtBQVgsQ0FBaUIsR0FBakIsQ0FBZjtBQUNBbkIsUUFBQUEsVUFBVSxHQUFHaUIsQ0FBYjtBQUNBRCxRQUFBQSxTQUFTLEdBQUdFLENBQVo7QUFDSDs7QUFFRCxhQUFPckIsR0FBRyxDQUFDRSxFQUFKLENBQU9DLFVBQVAsRUFBbUJlLEtBQW5CLENBQXlCQyxTQUF6QixDQUFQO0FBQ0gsS0FSRDtBQVNIO0FBbERZLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogRW5hYmxlIGRiIHJlZmVyZW5jZXNcbiAqIEBtb2R1bGUgRmVhdHVyZV9Vc2VEYlxuICovXG5cbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCB7IF8sIHBhc2NhbENhc2UgfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCB7IEludmFsaWRDb25maWd1cmF0aW9uIH0gPSByZXF1aXJlKCcuLi91dGlscy9FcnJvcnMnKTtcbmNvbnN0IEZlYXR1cmUgPSByZXF1aXJlKCcuLi9lbnVtL0ZlYXR1cmUnKTtcbmNvbnN0IExpdGVyYWwgPSByZXF1aXJlKCcuLi9lbnVtL0xpdGVyYWwnKTtcblxuY29uc3QgRGJDYWNoZSA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAvKipcbiAgICAgKiBUaGlzIGZlYXR1cmUgaXMgbG9hZGVkIGF0IGluaXQgc3RhZ2VcbiAgICAgKiBAbWVtYmVyIHtzdHJpbmd9XG4gICAgICovXG4gICAgdHlwZTogRmVhdHVyZS5JTklULFxuXG4gICAgLyoqXG4gICAgICogTG9hZCB0aGUgZmVhdHVyZVxuICAgICAqIEBwYXJhbSB7QXBwfSBhcHAgLSBUaGUgYXBwIG1vZHVsZSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gZGJSZWZzIC0gZGIgcmVmZXJlbmNlIHNldHRpbmdzICAgICBcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZS48Kj59XG4gICAgICovXG4gICAgbG9hZF86IGFzeW5jIChhcHAsIGRiUmVmcykgPT4ge1xuICAgICAgICBhcHAuZGIgPSAoc2NoZW1hTmFtZSkgPT4ge1xuICAgICAgICAgICAgaWYgKERiQ2FjaGVbc2NoZW1hTmFtZV0pIHJldHVybiBEYkNhY2hlW3NjaGVtYU5hbWVdO1xuXG4gICAgICAgICAgICBsZXQgc2NoZW1hSW5mbyA9IGRiUmVmc1tzY2hlbWFOYW1lXTtcbiAgICAgICAgICAgIGlmICghc2NoZW1hSW5mbyB8fCAoIXNjaGVtYUluZm8uZnJvbUxpYiAmJiAhc2NoZW1hSW5mby5kYXRhU291cmNlKSkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ29uZmlndXJhdGlvbignTWlzc2luZyBcImxpYlwiIG9yIFwiZGF0YVNvdXJjZVwiLicsIGFwcCwgYHVzZURiLiR7c2NoZW1hTmFtZX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbGV0IGNvbm5lY3RvciA9IGFwcC5nZXRTZXJ2aWNlKHNjaGVtYUluZm8uZGF0YVNvdXJjZSk7XG4gICAgICAgICAgICBpZiAoIWNvbm5lY3Rvcikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ29uZmlndXJhdGlvbihgRGF0YSBzb3VyY2UgWyR7c2NoZW1hSW5mby5kYXRhU291cmNlfV0gbm90IGZvdW5kLmAsIGFwcCwgYHVzZURiLiR7c2NoZW1hTmFtZX0uZGF0YVNvdXJjZWApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgaTE4biA9IGFwcC5nZXRTZXJ2aWNlKCdpMThuJykgfHwgYXBwLl9fO1xuICAgICAgICAgICAgbGV0IG1vZGVsUGF0aDtcblxuICAgICAgICAgICAgbW9kZWxQYXRoID0gYXBwLnRvQWJzb2x1dGVQYXRoKGFwcC5vcHRpb25zLm1vZGVsc1BhdGggfHwgTGl0ZXJhbC5NT0RFTFNfUEFUSCk7IFxuXG4gICAgICAgICAgICBjb25zdCBEYiA9IHJlcXVpcmUocGF0aC5qb2luKG1vZGVsUGF0aCwgcGFzY2FsQ2FzZShzY2hlbWFOYW1lKSkpO1xuICAgICAgICAgICAgbGV0IGRiID0gbmV3IERiKGFwcCwgY29ubmVjdG9yLCBpMThuKTsgICAgICAgICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIERiQ2FjaGVbc2NoZW1hTmFtZV0gPSBkYjsgICAgICAgICAgICBcblxuICAgICAgICAgICAgcmV0dXJuIGRiO1xuICAgICAgICB9OyAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGFwcC5tb2RlbCA9IChzY2hlbWFOYW1lLCBtb2RlbE5hbWUpID0+IHtcbiAgICAgICAgICAgIGlmICghbW9kZWxOYW1lKSB7XG4gICAgICAgICAgICAgICAgbGV0IFsgcywgbSBdID0gc2NoZW1hTmFtZS5zcGxpdCgnLicpO1xuICAgICAgICAgICAgICAgIHNjaGVtYU5hbWUgPSBzO1xuICAgICAgICAgICAgICAgIG1vZGVsTmFtZSA9IG07ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gYXBwLmRiKHNjaGVtYU5hbWUpLm1vZGVsKG1vZGVsTmFtZSk7XG4gICAgICAgIH07XG4gICAgfVxufTsiXX0=