{"version":3,"sources":["../../src/features/configFromDataSource.js"],"names":["_","require","Feature","requireConfig","module","exports","type","CONF","load_","app","config","Connector","tryRequire","connector","createConnector","driver","connectionString","logger","server","cfgData","findOne_","entity","key","defaults","log","getConnectionStringWithoutCredential","end_"],"mappings":"AAAA;;;;AAOA,MAAM;AAAEA,EAAAA;AAAF,IAAQC,OAAO,CAAC,YAAD,CAArB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,iBAAD,CAAvB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAoBF,OAAO,CAAC,kBAAD,CAAjC;;AAEAG,MAAM,CAACC,OAAP,GAAiB;AAMbC,EAAAA,IAAI,EAAEJ,OAAO,CAACK,IAND;AAkBbC,EAAAA,KAAK,EAAE,OAAOC,GAAP,EAAYC,MAAZ,KAAuB;AAC1BP,IAAAA,aAAa,CAACM,GAAD,EAAMC,MAAN,EAAc,CAAC,QAAD,EAAW,kBAAX,EAA+B,QAA/B,EAAyC,KAAzC,CAAd,EAA+D,sBAA/D,CAAb;AAEA,UAAM;AAAEC,MAAAA;AAAF,QAAgBF,GAAG,CAACG,UAAJ,CAAe,YAAf,CAAtB;AAEA,QAAIC,SAAS,GAAGF,SAAS,CAACG,eAAV,CAA0BJ,MAAM,CAACK,MAAjC,EAAyCL,MAAM,CAACM,gBAAhD,EAAkE;AAAEC,MAAAA,MAAM,EAAER,GAAG,CAACQ,MAAJ,IAAcR,GAAG,CAACS,MAAJ,CAAWD;AAAnC,KAAlE,CAAhB;;AAEA,QAAI;AACA,UAAIE,OAAO,GAAG,MAAMN,SAAS,CAACO,QAAV,CAAmBV,MAAM,CAACW,MAA1B,EAAkCX,MAAM,CAACY,GAAzC,CAApB;;AAEA,UAAIH,OAAJ,EAAa;AACTV,QAAAA,GAAG,CAACC,MAAJ,GAAaV,CAAC,CAACuB,QAAF,CAAWJ,OAAX,EAAoBV,GAAG,CAACC,MAAxB,CAAb;AACH,OAFD,MAEO;AACHD,QAAAA,GAAG,CAACe,GAAJ,CAAQ,MAAR,EAAiB,qCAAoCX,SAAS,CAACY,oCAAV,EAAiD,oDAAtG;AACH;AAEJ,KATD,SASU;AACN,YAAMZ,SAAS,CAACa,IAAV,EAAN;AACH;AACJ;AArCY,CAAjB","sourcesContent":["\"use strict\";\n\n/**\n * Enable server specific config identified by host name.\n * @module Feature_ConfigByHostname\n */\n\nconst { _ } = require('@genx/july');\nconst Feature = require('../enum/Feature');\nconst { requireConfig } = require('../utils/Helpers');\n\nmodule.exports = {\n\n    /**\n     * This feature is loaded at configuration stage\n     * @member {string}\n     */\n    type: Feature.CONF,\n\n    /**\n     * Load the feature\n     * @param {App} app - The cli app module object\n     * @param {object} config - Config for the feature\n     * @property {string} [config.driver] - Data source driver\n     * @property {string} [config.connectionString] - Connection string\n     * @property {string} [config.entity] - Entity of the config\n     * @property {string} [config.key] - Query key of the config\n     * @returns {Promise.<*>}\n     */\n    load_: async (app, config) => {\n        requireConfig(app, config, ['driver', 'connectionString', 'entity', 'key'], 'configFromDataSource');\n\n        const { Connector } = app.tryRequire('@genx/data');        \n\n        let connector = Connector.createConnector(config.driver, config.connectionString, { logger: app.logger || app.server.logger });\n        \n        try {\n            let cfgData = await connector.findOne_(config.entity, config.key);\n\n            if (cfgData) {\n                app.config = _.defaults(cfgData, app.config);    \n            } else {\n                app.log('warn', `Feature \"configFromDataSource\" @ \"${connector.getConnectionStringWithoutCredential()}\" does not exist and this feature will be ignored.`);\n            }           \n\n        } finally {\n            await connector.end_();\n        }\n    }\n};"],"file":"configFromDataSource.js"}