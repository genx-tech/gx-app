{"version":3,"sources":["../../src/features/configByGitUser.js"],"names":["path","require","Feature","fs","cmd","JsonConfigProvider","module","exports","type","CONF","load_","app","options","devName","runSync","trim","e","log","message","fallbackName","substr","indexOf","devConfigFile","join","configPath","configName","existsSync","configLoader","provider","loadConfig_"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,iBAAD,CAAvB;;AACA,MAAM;AAAEE,EAAAA,EAAF;AAAMC,EAAAA;AAAN,IAAcH,OAAO,CAAC,WAAD,CAA3B;;AAEA,MAAMI,kBAAkB,GAAGJ,OAAO,CAAC,kCAAD,CAAlC;;AAEAK,MAAM,CAACC,OAAP,GAAiB;AAEb;AACJ;AACA;AACA;AACIC,EAAAA,IAAI,EAAEN,OAAO,CAACO,IAND;;AAQb;AACJ;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,KAAK,EAAE,OAAOC,GAAP,EAAYC,OAAZ,KAAwB;AAC3B,QAAIC,OAAJ;;AAEA,QAAI;AACAA,MAAAA,OAAO,GAAGT,GAAG,CAACU,OAAJ,CAAY,gCAAZ,EAA8CC,IAA9C,EAAV;AACH,KAFD,CAEE,OAAOC,CAAP,EAAU;AACRL,MAAAA,GAAG,CAACM,GAAJ,CAAQ,MAAR,EAAgBD,CAAC,CAACE,OAAF,IAAaF,CAA7B;AACH;;AAED,QAAI,CAACH,OAAD,IAAYA,OAAO,KAAK,EAA5B,EAAgC;AAC5B,UAAID,OAAO,CAACO,YAAZ,EAA0B;AACtBN,QAAAA,OAAO,GAAGD,OAAO,CAACO,YAAlB;AACH,OAFD,MAEO;AACHR,QAAAA,GAAG,CAACM,GAAJ,CAAQ,MAAR,EAAgB,iFAAhB;AACA;AACH;AACJ;;AAEDJ,IAAAA,OAAO,GAAGA,OAAO,CAACO,MAAR,CAAe,CAAf,EAAkBP,OAAO,CAACQ,OAAR,CAAgB,GAAhB,CAAlB,CAAV;AAEA,UAAMC,aAAa,GAAGtB,IAAI,CAACuB,IAAL,CAAUZ,GAAG,CAACa,UAAd,EAA0Bb,GAAG,CAACc,UAAJ,GAAiB,GAAjB,GAAuBZ,OAAvB,GAAiC,OAA3D,CAAtB;;AACA,QAAI,CAACV,EAAE,CAACuB,UAAH,CAAcJ,aAAd,CAAL,EAAmC;AAC/BX,MAAAA,GAAG,CAACM,GAAJ,CAAQ,MAAR,EAAiB,mCAAkCK,aAAc,yCAAjE;AACA;AACH;;AAEDX,IAAAA,GAAG,CAACgB,YAAJ,CAAiBC,QAAjB,GAA4B,IAAIvB,kBAAJ,CAAuBiB,aAAvB,CAA5B;AACA,WAAOX,GAAG,CAACkB,WAAJ,EAAP;AACH;AA3CY,CAAjB","sourcesContent":["\"use strict\";\n\n/**\n * Enable developer specific config identified by git user name.\n * @module Feature_ConfigByGitUser\n */\n\nconst path = require('path');\nconst Feature = require('../enum/Feature');\nconst { fs, cmd } = require('@genx/sys');\n\nconst JsonConfigProvider = require('rk-config/lib/JsonConfigProvider');\n\nmodule.exports = {\n\n    /**\n     * This feature is loaded at configuration stage\n     * @member {string}\n     */\n    type: Feature.CONF,\n\n    /**\n     * Load the feature\n     * @param {App} app - The cli app module object\n     * @param {object} options - Options for the feature     \n     * @property {string} [options.fallbackName] - Fallback username for git user not available\n     * @returns {Promise.<*>}\n     */\n    load_: async (app, options) => {\n        let devName;\n        \n        try {\n            devName = cmd.runSync('git config --global user.email').trim();            \n        } catch (e) {\n            app.log('warn', e.message || e);\n        }        \n\n        if (!devName || devName === '') {\n            if (options.fallbackName) {\n                devName = options.fallbackName;\n            } else {\n                app.log('warn', 'Unable to read \"user.email\" of git config and no fallback option is configured.');\n                return;\n            }            \n        }            \n\n        devName = devName.substr(0, devName.indexOf('@'));\n\n        const devConfigFile = path.join(app.configPath, app.configName + '.' + devName + '.json');\n        if (!fs.existsSync(devConfigFile)) {\n            app.log('warn', `Developer specific config file \"${devConfigFile}\" does not exist and will use defaults.`);\n            return;\n        }\n\n        app.configLoader.provider = new JsonConfigProvider(devConfigFile);\n        return app.loadConfig_();\n    }\n};"],"file":"configByGitUser.js"}