{"version":3,"file":"configByGitUser.js","names":["require","path","Feature","fs","cmd","JsonConfigProvider","module","exports","type","CONF","load_","app","options","devName","runSync","trim","e","log","message","fallbackName","substr","indexOf","devConfigFile","join","configPath","configName","existsSync","configLoader","provider","loadConfig_"],"sources":["../../src/features/configByGitUser.js"],"sourcesContent":["\"use strict\";\n\n/**\n * Enable developer specific config identified by git user name.\n * @module Feature_ConfigByGitUser\n */\n\nconst path = require('path');\nconst Feature = require('../enum/Feature');\nconst { fs, cmd } = require('@genx/sys');\n\nconst JsonConfigProvider = require('@genx/config/lib/JsonConfigProvider');\n\nmodule.exports = {\n\n    /**\n     * This feature is loaded at configuration stage\n     * @member {string}\n     */\n    type: Feature.CONF,\n\n    /**\n     * Load the feature\n     * @param {App} app - The cli app module object\n     * @param {object} options - Options for the feature     \n     * @property {string} [options.fallbackName] - Fallback username for git user not available\n     * @returns {Promise.<*>}\n     */\n    load_: async (app, options) => {\n        let devName;\n        \n        try {\n            devName = cmd.runSync('git config --global user.email').trim();            \n        } catch (e) {\n            app.log('warn', e.message || e);\n        }        \n\n        if (!devName || devName === '') {\n            if (options.fallbackName) {\n                devName = options.fallbackName;\n            } else {\n                app.log('warn', 'Unable to read \"user.email\" of git config and no fallback option is configured.');\n                return;\n            }            \n        }            \n\n        devName = devName.substr(0, devName.indexOf('@'));\n\n        const devConfigFile = path.join(app.configPath, app.configName + '.' + devName + '.json');\n        if (!fs.existsSync(devConfigFile)) {\n            app.log('warn', `Developer specific config file \"${devConfigFile}\" does not exist and will use defaults.`);\n            return;\n        }\n\n        app.configLoader.provider = new JsonConfigProvider(devConfigFile);\n        return app.loadConfig_();\n    }\n};"],"mappings":"AAAA,YAAY,CAACA,OAAA,gCAOb,KAAM,CAAAC,IAAI,CAAGD,OAAO,CAAC,MAAM,CAAC,CAC5B,KAAM,CAAAE,OAAO,CAAGF,OAAO,CAAC,iBAAiB,CAAC,CAC1C,KAAM,CAAEG,EAAE,CAAEC,GAAI,CAAC,CAAGJ,OAAO,CAAC,WAAW,CAAC,CAExC,KAAM,CAAAK,kBAAkB,CAAGL,OAAO,CAAC,qCAAqC,CAAC,CAEzEM,MAAM,CAACC,OAAO,CAAG,CAMbC,IAAI,CAAEN,OAAO,CAACO,IAAI,CASlBC,KAAK,CAAE,KAAAA,CAAOC,GAAG,CAAEC,OAAO,GAAK,CAC3B,GAAI,CAAAC,OAAO,CAEX,GAAI,CACAA,OAAO,CAAGT,GAAG,CAACU,OAAO,CAAC,gCAAgC,CAAC,CAACC,IAAI,EAChE,CAAE,MAAOC,CAAC,CAAE,CACRL,GAAG,CAACM,GAAG,CAAC,MAAM,CAAED,CAAC,CAACE,OAAO,EAAIF,CAAC,CAClC,CAEA,GAAI,CAACH,OAAO,EAAIA,OAAO,GAAK,EAAE,CAAE,CAC5B,GAAID,OAAO,CAACO,YAAY,CAAE,CACtBN,OAAO,CAAGD,OAAO,CAACO,YACtB,CAAC,IAAM,CACHR,GAAG,CAACM,GAAG,CAAC,MAAM,CAAE,mFAAiF,CAAC,CAClG,MACJ,CACJ,CAEAJ,OAAO,CAAGA,OAAO,CAACO,MAAM,CAAC,CAAC,CAAEP,OAAO,CAACQ,OAAO,CAAC,GAAG,CAAC,CAAC,CAEjD,KAAM,CAAAC,aAAa,CAAGrB,IAAI,CAACsB,IAAI,CAACZ,GAAG,CAACa,UAAU,CAAEb,GAAG,CAACc,UAAU,CAAG,GAAG,CAAGZ,OAAO,CAAG,OAAO,CAAC,CACzF,GAAI,CAACV,EAAE,CAACuB,UAAU,CAACJ,aAAa,CAAC,CAAE,CAC/BX,GAAG,CAACM,GAAG,CAAC,MAAM,CAAG,mCAAkCK,aAAc,yCAAwC,CAAC,CAC1G,MACJ,CAEAX,GAAG,CAACgB,YAAY,CAACC,QAAQ,CAAG,GAAI,CAAAvB,kBAAkB,CAACiB,aAAa,CAAC,CACjE,MAAO,CAAAX,GAAG,CAACkB,WAAW,EAC1B,CACJ,CAAC"}