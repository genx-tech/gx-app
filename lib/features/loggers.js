"use strict";

require("source-map-support/register");

const winston = require('winston');

const winstonFlight = require('winstonflight');

const Feature = require('../enum/Feature');

const {
  _
} = require('@genx/july');

module.exports = {
  type: Feature.SERVICE,
  load_: function (app, categories) {
    let loggers = new winston.Container();

    _.forOwn(categories, (loggerConfig, name) => {
      if (loggerConfig.transports) {
        loggerConfig.transports = winstonFlight(winston, loggerConfig.transports);
      }

      let logger = loggers.add(name, loggerConfig);
      app.registerService('logger.' + name, logger);
    });

    app.registerService('loggers', loggers);
    app.on('stopped', () => {
      loggers.close();
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWF0dXJlcy9sb2dnZXJzLmpzIl0sIm5hbWVzIjpbIndpbnN0b24iLCJyZXF1aXJlIiwid2luc3RvbkZsaWdodCIsIkZlYXR1cmUiLCJfIiwibW9kdWxlIiwiZXhwb3J0cyIsInR5cGUiLCJTRVJWSUNFIiwibG9hZF8iLCJhcHAiLCJjYXRlZ29yaWVzIiwibG9nZ2VycyIsIkNvbnRhaW5lciIsImZvck93biIsImxvZ2dlckNvbmZpZyIsIm5hbWUiLCJ0cmFuc3BvcnRzIiwibG9nZ2VyIiwiYWRkIiwicmVnaXN0ZXJTZXJ2aWNlIiwib24iLCJjbG9zZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFPQSxNQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxTQUFELENBQXZCOztBQUNBLE1BQU1DLGFBQWEsR0FBR0QsT0FBTyxDQUFDLGVBQUQsQ0FBN0I7O0FBQ0EsTUFBTUUsT0FBTyxHQUFHRixPQUFPLENBQUMsaUJBQUQsQ0FBdkI7O0FBQ0EsTUFBTTtBQUFFRyxFQUFBQTtBQUFGLElBQVFILE9BQU8sQ0FBQyxZQUFELENBQXJCOztBQXNDQUksTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBTWJDLEVBQUFBLElBQUksRUFBRUosT0FBTyxDQUFDSyxPQU5EO0FBc0JiQyxFQUFBQSxLQUFLLEVBQUUsVUFBVUMsR0FBVixFQUFlQyxVQUFmLEVBQTJCO0FBQzlCLFFBQUlDLE9BQU8sR0FBRyxJQUFLWixPQUFPLENBQUNhLFNBQWIsRUFBZDs7QUFFQVQsSUFBQUEsQ0FBQyxDQUFDVSxNQUFGLENBQVNILFVBQVQsRUFBcUIsQ0FBQ0ksWUFBRCxFQUFlQyxJQUFmLEtBQXdCO0FBQ3pDLFVBQUlELFlBQVksQ0FBQ0UsVUFBakIsRUFBNkI7QUFDekJGLFFBQUFBLFlBQVksQ0FBQ0UsVUFBYixHQUEwQmYsYUFBYSxDQUFDRixPQUFELEVBQVVlLFlBQVksQ0FBQ0UsVUFBdkIsQ0FBdkM7QUFDSDs7QUFFRCxVQUFJQyxNQUFNLEdBQUdOLE9BQU8sQ0FBQ08sR0FBUixDQUFZSCxJQUFaLEVBQWtCRCxZQUFsQixDQUFiO0FBRUFMLE1BQUFBLEdBQUcsQ0FBQ1UsZUFBSixDQUFvQixZQUFZSixJQUFoQyxFQUFzQ0UsTUFBdEM7QUFDSCxLQVJEOztBQVVBUixJQUFBQSxHQUFHLENBQUNVLGVBQUosQ0FBb0IsU0FBcEIsRUFBK0JSLE9BQS9CO0FBRUFGLElBQUFBLEdBQUcsQ0FBQ1csRUFBSixDQUFPLFNBQVAsRUFBa0IsTUFBTTtBQUNwQlQsTUFBQUEsT0FBTyxDQUFDVSxLQUFSO0FBQ0gsS0FGRDtBQUdIO0FBeENZLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogRW5hYmxlIG11bHRpLWNhdGVnb3JpZXMgbG9nZ2luZyBieSB3aW5zdG9uIGxvZ2dlclxuICogQG1vZHVsZSBGZWF0dXJlX0xvZ2dlcnNcbiAqL1xuXG5jb25zdCB3aW5zdG9uID0gcmVxdWlyZSgnd2luc3RvbicpO1xuY29uc3Qgd2luc3RvbkZsaWdodCA9IHJlcXVpcmUoJ3dpbnN0b25mbGlnaHQnKTtcbmNvbnN0IEZlYXR1cmUgPSByZXF1aXJlKCcuLi9lbnVtL0ZlYXR1cmUnKTtcbmNvbnN0IHsgXyB9ID0gcmVxdWlyZSgnQGdlbngvanVseScpO1xuXG4vKlxuXG4gbG9nZ2Vyczoge1xuICAgICAnY2F0ZWdvcnkxJzoge1xuICAgICAgICAgXCJ0cmFuc3BvcnRzXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJjb25zb2xlXCIsXG4gICAgICAgICAgICAgICAgXCJvcHRpb25zXCI6IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIFwiZm9ybWF0XCI6IHdpbnN0b24uZm9ybWF0LmNvbWJpbmUod2luc3Rvbi5mb3JtYXQuY29sb3JpemUoKSwgd2luc3Rvbi5mb3JtYXQuc2ltcGxlKCkpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJmaWxlXCIsXG4gICAgICAgICAgICAgICAgXCJvcHRpb25zXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJsZXZlbFwiOiBcImluZm9cIixcbiAgICAgICAgICAgICAgICAgICAgXCJmaWxlbmFtZVwiOiBgJHtuYW1lIHx8ICdhcHAnfS5sb2dgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgIH0sXG4gICAgICdjYXRlZ29yeTInOiB7XG4gICAgICAgICB0cmFuc3BvcnRzOiBbXG4gICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImRhaWx5LXJvdGF0ZS1maWxlXCIsXG4gICAgICAgICAgICAgICAgXCJvcHRpb25zXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJsZXZlbFwiOiBcImluZm9cIixcbiAgICAgICAgICAgICAgICAgICAgXCJmaWxlbmFtZVwiOiBcImNhdGVnb3J5Mi0lREFURSUubG9nXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZGF0ZVBhdHRlcm5cIjogXCJZWVlZTU1ERFwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgXVxuICAgICB9XG4gfVxuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZlYXR1cmUgaXMgbG9hZGVkIGF0IHNlcnZpY2Ugc3RhZ2VcbiAgICAgKiBAbWVtYmVyIHtzdHJpbmd9XG4gICAgICovXG4gICAgdHlwZTogRmVhdHVyZS5TRVJWSUNFLFxuXG4gICAgLyoqXG4gICAgICogTG9hZCB0aGUgZmVhdHVyZVxuICAgICAqIEBwYXJhbSB7QXBwfSBhcHAgLSBUaGUgY2xpIGFwcCBtb2R1bGUgb2JqZWN0XG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNhdGVnb3JpZXMgLSBDb25maWd1cmF0aW9uIGZvciBtdWx0aS1jYXRlZ29yaWVzXG4gICAgICogQHJldHVybnMge1Byb21pc2UuPCo+fVxuICAgICAqIEBleGFtcGxlXG4gICAgICogIGxldCBsb2dnZXJzID0gYXBwLmdldFNlcnZpY2UoJ2xvZ2dlcnMnKTtcbiAgICAgKiAgbGV0IGxvZ2dlciA9IGxvZ2dlcnMuZ2V0KCdjYXRlZ29yeScpO1xuICAgICAqICBsb2dnZXIubG9nKCdpbmZvJywgJ2luZm9ybWF0aW9uJyk7XG4gICAgICogIGxvZ2dlci5sb2coJ3dhcm4nLCAnd2FybmluZycpO1xuICAgICAqXG4gICAgICogIGxldCBsb2dnZXIgPSBhcHAuZ2V0U2VydmljZSgnbG9nZ2VyLmNhdGVnb3J5MScpO1xuICAgICAqICBsb2dnZXIubG9nKCdlcnJvcicsICdlcnJvcicpO1xuICAgICAqL1xuICAgIGxvYWRfOiBmdW5jdGlvbiAoYXBwLCBjYXRlZ29yaWVzKSB7XG4gICAgICAgIGxldCBsb2dnZXJzID0gbmV3ICh3aW5zdG9uLkNvbnRhaW5lcikoKTtcblxuICAgICAgICBfLmZvck93bihjYXRlZ29yaWVzLCAobG9nZ2VyQ29uZmlnLCBuYW1lKSA9PiB7XG4gICAgICAgICAgICBpZiAobG9nZ2VyQ29uZmlnLnRyYW5zcG9ydHMpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXJDb25maWcudHJhbnNwb3J0cyA9IHdpbnN0b25GbGlnaHQod2luc3RvbiwgbG9nZ2VyQ29uZmlnLnRyYW5zcG9ydHMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgbG9nZ2VyID0gbG9nZ2Vycy5hZGQobmFtZSwgbG9nZ2VyQ29uZmlnKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgYXBwLnJlZ2lzdGVyU2VydmljZSgnbG9nZ2VyLicgKyBuYW1lLCBsb2dnZXIpO1xuICAgICAgICB9KTtcblxuICAgICAgICBhcHAucmVnaXN0ZXJTZXJ2aWNlKCdsb2dnZXJzJywgbG9nZ2Vycyk7XG5cbiAgICAgICAgYXBwLm9uKCdzdG9wcGVkJywgKCkgPT4ge1xuICAgICAgICAgICAgbG9nZ2Vycy5jbG9zZSgpOyAgICAgICAgICAgIFxuICAgICAgICB9KTsgXG4gICAgfVxufTsiXX0=