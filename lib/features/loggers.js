"use strict";

require("source-map-support/register");

const winston = require('winston');

const winstonFlight = require('winstonflight');

const Feature = require('../enum/Feature');

const Util = require('rk-utils');

module.exports = {
  type: Feature.SERVICE,
  load_: function (app, categories) {
    let loggers = new winston.Container();

    Util._.forOwn(categories, (loggerConfig, name) => {
      if (loggerConfig.transports) {
        loggerConfig.transports = winstonFlight(winston, loggerConfig.transports);
      }

      let logger = loggers.add(name, loggerConfig);
      app.registerService('logger:' + name, logger);
    });

    app.registerService('loggers', loggers);
    app.on('stopping', () => {
      loggers.close();
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWF0dXJlcy9sb2dnZXJzLmpzIl0sIm5hbWVzIjpbIndpbnN0b24iLCJyZXF1aXJlIiwid2luc3RvbkZsaWdodCIsIkZlYXR1cmUiLCJVdGlsIiwibW9kdWxlIiwiZXhwb3J0cyIsInR5cGUiLCJTRVJWSUNFIiwibG9hZF8iLCJhcHAiLCJjYXRlZ29yaWVzIiwibG9nZ2VycyIsIkNvbnRhaW5lciIsIl8iLCJmb3JPd24iLCJsb2dnZXJDb25maWciLCJuYW1lIiwidHJhbnNwb3J0cyIsImxvZ2dlciIsImFkZCIsInJlZ2lzdGVyU2VydmljZSIsIm9uIiwiY2xvc2UiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBT0EsTUFBTUEsT0FBTyxHQUFHQyxPQUFPLENBQUMsU0FBRCxDQUF2Qjs7QUFDQSxNQUFNQyxhQUFhLEdBQUdELE9BQU8sQ0FBQyxlQUFELENBQTdCOztBQUNBLE1BQU1FLE9BQU8sR0FBR0YsT0FBTyxDQUFDLGlCQUFELENBQXZCOztBQUNBLE1BQU1HLElBQUksR0FBR0gsT0FBTyxDQUFDLFVBQUQsQ0FBcEI7O0FBc0NBSSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFNYkMsRUFBQUEsSUFBSSxFQUFFSixPQUFPLENBQUNLLE9BTkQ7QUFzQmJDLEVBQUFBLEtBQUssRUFBRSxVQUFVQyxHQUFWLEVBQWVDLFVBQWYsRUFBMkI7QUFDOUIsUUFBSUMsT0FBTyxHQUFHLElBQUtaLE9BQU8sQ0FBQ2EsU0FBYixFQUFkOztBQUVBVCxJQUFBQSxJQUFJLENBQUNVLENBQUwsQ0FBT0MsTUFBUCxDQUFjSixVQUFkLEVBQTBCLENBQUNLLFlBQUQsRUFBZUMsSUFBZixLQUF3QjtBQUM5QyxVQUFJRCxZQUFZLENBQUNFLFVBQWpCLEVBQTZCO0FBQ3pCRixRQUFBQSxZQUFZLENBQUNFLFVBQWIsR0FBMEJoQixhQUFhLENBQUNGLE9BQUQsRUFBVWdCLFlBQVksQ0FBQ0UsVUFBdkIsQ0FBdkM7QUFDSDs7QUFFRCxVQUFJQyxNQUFNLEdBQUdQLE9BQU8sQ0FBQ1EsR0FBUixDQUFZSCxJQUFaLEVBQWtCRCxZQUFsQixDQUFiO0FBRUFOLE1BQUFBLEdBQUcsQ0FBQ1csZUFBSixDQUFvQixZQUFZSixJQUFoQyxFQUFzQ0UsTUFBdEM7QUFDSCxLQVJEOztBQVVBVCxJQUFBQSxHQUFHLENBQUNXLGVBQUosQ0FBb0IsU0FBcEIsRUFBK0JULE9BQS9CO0FBRUFGLElBQUFBLEdBQUcsQ0FBQ1ksRUFBSixDQUFPLFVBQVAsRUFBbUIsTUFBTTtBQUNyQlYsTUFBQUEsT0FBTyxDQUFDVyxLQUFSO0FBQ0gsS0FGRDtBQUdIO0FBeENZLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogRW5hYmxlIG11bHRpLWNhdGVnb3JpZXMgbG9nZ2luZyBieSB3aW5zdG9uIGxvZ2dlclxuICogQG1vZHVsZSBGZWF0dXJlX0xvZ2dlcnNcbiAqL1xuXG5jb25zdCB3aW5zdG9uID0gcmVxdWlyZSgnd2luc3RvbicpO1xuY29uc3Qgd2luc3RvbkZsaWdodCA9IHJlcXVpcmUoJ3dpbnN0b25mbGlnaHQnKTtcbmNvbnN0IEZlYXR1cmUgPSByZXF1aXJlKCcuLi9lbnVtL0ZlYXR1cmUnKTtcbmNvbnN0IFV0aWwgPSByZXF1aXJlKCdyay11dGlscycpO1xuXG4vKlxuXG4gbG9nZ2Vyczoge1xuICAgICAnY2F0ZWdvcnkxJzoge1xuICAgICAgICAgXCJ0cmFuc3BvcnRzXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJjb25zb2xlXCIsXG4gICAgICAgICAgICAgICAgXCJvcHRpb25zXCI6IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIFwiZm9ybWF0XCI6IHdpbnN0b24uZm9ybWF0LmNvbWJpbmUod2luc3Rvbi5mb3JtYXQuY29sb3JpemUoKSwgd2luc3Rvbi5mb3JtYXQuc2ltcGxlKCkpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJmaWxlXCIsXG4gICAgICAgICAgICAgICAgXCJvcHRpb25zXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJsZXZlbFwiOiBcImluZm9cIixcbiAgICAgICAgICAgICAgICAgICAgXCJmaWxlbmFtZVwiOiBgJHtuYW1lIHx8ICdhcHAnfS5sb2dgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgIH0sXG4gICAgICdjYXRlZ29yeTInOiB7XG4gICAgICAgICB0cmFuc3BvcnRzOiBbXG4gICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImRhaWx5LXJvdGF0ZS1maWxlXCIsXG4gICAgICAgICAgICAgICAgXCJvcHRpb25zXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJsZXZlbFwiOiBcImluZm9cIixcbiAgICAgICAgICAgICAgICAgICAgXCJmaWxlbmFtZVwiOiBcImNhdGVnb3J5Mi0lREFURSUubG9nXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZGF0ZVBhdHRlcm5cIjogXCJZWVlZTU1ERFwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgXVxuICAgICB9XG4gfVxuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZlYXR1cmUgaXMgbG9hZGVkIGF0IHNlcnZpY2Ugc3RhZ2VcbiAgICAgKiBAbWVtYmVyIHtzdHJpbmd9XG4gICAgICovXG4gICAgdHlwZTogRmVhdHVyZS5TRVJWSUNFLFxuXG4gICAgLyoqXG4gICAgICogTG9hZCB0aGUgZmVhdHVyZVxuICAgICAqIEBwYXJhbSB7QXBwfSBhcHAgLSBUaGUgY2xpIGFwcCBtb2R1bGUgb2JqZWN0XG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNhdGVnb3JpZXMgLSBDb25maWd1cmF0aW9uIGZvciBtdWx0aS1jYXRlZ29yaWVzXG4gICAgICogQHJldHVybnMge1Byb21pc2UuPCo+fVxuICAgICAqIEBleGFtcGxlXG4gICAgICogIGxldCBsb2dnZXJzID0gYXBwLmdldFNlcnZpY2UoJ2xvZ2dlcnMnKTtcbiAgICAgKiAgbGV0IGxvZ2dlciA9IGxvZ2dlcnMuZ2V0KCdjYXRlZ29yeScpO1xuICAgICAqICBsb2dnZXIubG9nKCdpbmZvJywgJ2luZm9ybWF0aW9uJyk7XG4gICAgICogIGxvZ2dlci5sb2coJ3dhcm4nLCAnd2FybmluZycpO1xuICAgICAqXG4gICAgICogIGxldCBsb2dnZXIgPSBhcHAuZ2V0U2VydmljZSgnbG9nZ2VyOmNhdGVnb3J5MScpO1xuICAgICAqICBsb2dnZXIubG9nKCdlcnJvcicsICdlcnJvcicpO1xuICAgICAqL1xuICAgIGxvYWRfOiBmdW5jdGlvbiAoYXBwLCBjYXRlZ29yaWVzKSB7XG4gICAgICAgIGxldCBsb2dnZXJzID0gbmV3ICh3aW5zdG9uLkNvbnRhaW5lcikoKTtcblxuICAgICAgICBVdGlsLl8uZm9yT3duKGNhdGVnb3JpZXMsIChsb2dnZXJDb25maWcsIG5hbWUpID0+IHtcbiAgICAgICAgICAgIGlmIChsb2dnZXJDb25maWcudHJhbnNwb3J0cykge1xuICAgICAgICAgICAgICAgIGxvZ2dlckNvbmZpZy50cmFuc3BvcnRzID0gd2luc3RvbkZsaWdodCh3aW5zdG9uLCBsb2dnZXJDb25maWcudHJhbnNwb3J0cyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBsb2dnZXIgPSBsb2dnZXJzLmFkZChuYW1lLCBsb2dnZXJDb25maWcpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBhcHAucmVnaXN0ZXJTZXJ2aWNlKCdsb2dnZXI6JyArIG5hbWUsIGxvZ2dlcik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGFwcC5yZWdpc3RlclNlcnZpY2UoJ2xvZ2dlcnMnLCBsb2dnZXJzKTtcblxuICAgICAgICBhcHAub24oJ3N0b3BwaW5nJywgKCkgPT4ge1xuICAgICAgICAgICAgbG9nZ2Vycy5jbG9zZSgpOyAgICAgICAgICAgIFxuICAgICAgICB9KTsgXG4gICAgfVxufTsiXX0=