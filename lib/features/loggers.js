"use strict";

require("source-map-support/register");

const winston = require('winston');

const winstonFlight = require('winstonflight');

const Feature = require('../enum/Feature');

const Util = require('rk-utils');

module.exports = {
  type: Feature.SERVICE,
  load_: function (app, categories) {
    let loggers = new winston.Container();

    Util._.forOwn(categories, (loggerConfig, name) => {
      if (loggerConfig.transports) {
        loggerConfig.transports = winstonFlight(winston, loggerConfig.transports);
      }

      let logger = loggers.add(name, loggerConfig);

      logger.logError = error => logger.log('error', error.message, _.pick(error, ['name', 'status', 'code', 'info', 'stack']));

      app.registerService('logger.' + name, logger);
    });

    app.registerService('loggers', loggers);
    app.on('stopping', () => {
      loggers.close();
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWF0dXJlcy9sb2dnZXJzLmpzIl0sIm5hbWVzIjpbIndpbnN0b24iLCJyZXF1aXJlIiwid2luc3RvbkZsaWdodCIsIkZlYXR1cmUiLCJVdGlsIiwibW9kdWxlIiwiZXhwb3J0cyIsInR5cGUiLCJTRVJWSUNFIiwibG9hZF8iLCJhcHAiLCJjYXRlZ29yaWVzIiwibG9nZ2VycyIsIkNvbnRhaW5lciIsIl8iLCJmb3JPd24iLCJsb2dnZXJDb25maWciLCJuYW1lIiwidHJhbnNwb3J0cyIsImxvZ2dlciIsImFkZCIsImxvZ0Vycm9yIiwiZXJyb3IiLCJsb2ciLCJtZXNzYWdlIiwicGljayIsInJlZ2lzdGVyU2VydmljZSIsIm9uIiwiY2xvc2UiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBT0EsTUFBTUEsT0FBTyxHQUFHQyxPQUFPLENBQUMsU0FBRCxDQUF2Qjs7QUFDQSxNQUFNQyxhQUFhLEdBQUdELE9BQU8sQ0FBQyxlQUFELENBQTdCOztBQUNBLE1BQU1FLE9BQU8sR0FBR0YsT0FBTyxDQUFDLGlCQUFELENBQXZCOztBQUNBLE1BQU1HLElBQUksR0FBR0gsT0FBTyxDQUFDLFVBQUQsQ0FBcEI7O0FBc0NBSSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFNYkMsRUFBQUEsSUFBSSxFQUFFSixPQUFPLENBQUNLLE9BTkQ7QUFzQmJDLEVBQUFBLEtBQUssRUFBRSxVQUFVQyxHQUFWLEVBQWVDLFVBQWYsRUFBMkI7QUFDOUIsUUFBSUMsT0FBTyxHQUFHLElBQUtaLE9BQU8sQ0FBQ2EsU0FBYixFQUFkOztBQUVBVCxJQUFBQSxJQUFJLENBQUNVLENBQUwsQ0FBT0MsTUFBUCxDQUFjSixVQUFkLEVBQTBCLENBQUNLLFlBQUQsRUFBZUMsSUFBZixLQUF3QjtBQUM5QyxVQUFJRCxZQUFZLENBQUNFLFVBQWpCLEVBQTZCO0FBQ3pCRixRQUFBQSxZQUFZLENBQUNFLFVBQWIsR0FBMEJoQixhQUFhLENBQUNGLE9BQUQsRUFBVWdCLFlBQVksQ0FBQ0UsVUFBdkIsQ0FBdkM7QUFDSDs7QUFFRCxVQUFJQyxNQUFNLEdBQUdQLE9BQU8sQ0FBQ1EsR0FBUixDQUFZSCxJQUFaLEVBQWtCRCxZQUFsQixDQUFiOztBQUNBRyxNQUFBQSxNQUFNLENBQUNFLFFBQVAsR0FBbUJDLEtBQUQsSUFBV0gsTUFBTSxDQUFDSSxHQUFQLENBQVcsT0FBWCxFQUFvQkQsS0FBSyxDQUFDRSxPQUExQixFQUFtQ1YsQ0FBQyxDQUFDVyxJQUFGLENBQU9ILEtBQVAsRUFBYyxDQUFFLE1BQUYsRUFBVSxRQUFWLEVBQW9CLE1BQXBCLEVBQTRCLE1BQTVCLEVBQW9DLE9BQXBDLENBQWQsQ0FBbkMsQ0FBN0I7O0FBRUFaLE1BQUFBLEdBQUcsQ0FBQ2dCLGVBQUosQ0FBb0IsWUFBWVQsSUFBaEMsRUFBc0NFLE1BQXRDO0FBQ0gsS0FURDs7QUFXQVQsSUFBQUEsR0FBRyxDQUFDZ0IsZUFBSixDQUFvQixTQUFwQixFQUErQmQsT0FBL0I7QUFFQUYsSUFBQUEsR0FBRyxDQUFDaUIsRUFBSixDQUFPLFVBQVAsRUFBbUIsTUFBTTtBQUNyQmYsTUFBQUEsT0FBTyxDQUFDZ0IsS0FBUjtBQUNILEtBRkQ7QUFHSDtBQXpDWSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEVuYWJsZSBtdWx0aS1jYXRlZ29yaWVzIGxvZ2dpbmcgYnkgd2luc3RvbiBsb2dnZXJcbiAqIEBtb2R1bGUgRmVhdHVyZV9Mb2dnZXJzXG4gKi9cblxuY29uc3Qgd2luc3RvbiA9IHJlcXVpcmUoJ3dpbnN0b24nKTtcbmNvbnN0IHdpbnN0b25GbGlnaHQgPSByZXF1aXJlKCd3aW5zdG9uZmxpZ2h0Jyk7XG5jb25zdCBGZWF0dXJlID0gcmVxdWlyZSgnLi4vZW51bS9GZWF0dXJlJyk7XG5jb25zdCBVdGlsID0gcmVxdWlyZSgncmstdXRpbHMnKTtcblxuLypcblxuIGxvZ2dlcnM6IHtcbiAgICAgJ2NhdGVnb3J5MSc6IHtcbiAgICAgICAgIFwidHJhbnNwb3J0c1wiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiY29uc29sZVwiLFxuICAgICAgICAgICAgICAgIFwib3B0aW9uc1wiOiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBcImZvcm1hdFwiOiB3aW5zdG9uLmZvcm1hdC5jb21iaW5lKHdpbnN0b24uZm9ybWF0LmNvbG9yaXplKCksIHdpbnN0b24uZm9ybWF0LnNpbXBsZSgpKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiZmlsZVwiLFxuICAgICAgICAgICAgICAgIFwib3B0aW9uc1wiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwibGV2ZWxcIjogXCJpbmZvXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZmlsZW5hbWVcIjogYCR7bmFtZSB8fCAnYXBwJ30ubG9nYFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICB9LFxuICAgICAnY2F0ZWdvcnkyJzoge1xuICAgICAgICAgdHJhbnNwb3J0czogW1xuICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJkYWlseS1yb3RhdGUtZmlsZVwiLFxuICAgICAgICAgICAgICAgIFwib3B0aW9uc1wiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwibGV2ZWxcIjogXCJpbmZvXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZmlsZW5hbWVcIjogXCJjYXRlZ29yeTItJURBVEUlLmxvZ1wiLFxuICAgICAgICAgICAgICAgICAgICBcImRhdGVQYXR0ZXJuXCI6IFwiWVlZWU1NRERcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgIF1cbiAgICAgfVxuIH1cblxuICovXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBmZWF0dXJlIGlzIGxvYWRlZCBhdCBzZXJ2aWNlIHN0YWdlXG4gICAgICogQG1lbWJlciB7c3RyaW5nfVxuICAgICAqL1xuICAgIHR5cGU6IEZlYXR1cmUuU0VSVklDRSxcblxuICAgIC8qKlxuICAgICAqIExvYWQgdGhlIGZlYXR1cmVcbiAgICAgKiBAcGFyYW0ge0FwcH0gYXBwIC0gVGhlIGNsaSBhcHAgbW9kdWxlIG9iamVjdFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBjYXRlZ29yaWVzIC0gQ29uZmlndXJhdGlvbiBmb3IgbXVsdGktY2F0ZWdvcmllc1xuICAgICAqIEByZXR1cm5zIHtQcm9taXNlLjwqPn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqICBsZXQgbG9nZ2VycyA9IGFwcC5nZXRTZXJ2aWNlKCdsb2dnZXJzJyk7XG4gICAgICogIGxldCBsb2dnZXIgPSBsb2dnZXJzLmdldCgnY2F0ZWdvcnknKTtcbiAgICAgKiAgbG9nZ2VyLmxvZygnaW5mbycsICdpbmZvcm1hdGlvbicpO1xuICAgICAqICBsb2dnZXIubG9nKCd3YXJuJywgJ3dhcm5pbmcnKTtcbiAgICAgKlxuICAgICAqICBsZXQgbG9nZ2VyID0gYXBwLmdldFNlcnZpY2UoJ2xvZ2dlci5jYXRlZ29yeTEnKTtcbiAgICAgKiAgbG9nZ2VyLmxvZygnZXJyb3InLCAnZXJyb3InKTtcbiAgICAgKi9cbiAgICBsb2FkXzogZnVuY3Rpb24gKGFwcCwgY2F0ZWdvcmllcykge1xuICAgICAgICBsZXQgbG9nZ2VycyA9IG5ldyAod2luc3Rvbi5Db250YWluZXIpKCk7XG5cbiAgICAgICAgVXRpbC5fLmZvck93bihjYXRlZ29yaWVzLCAobG9nZ2VyQ29uZmlnLCBuYW1lKSA9PiB7XG4gICAgICAgICAgICBpZiAobG9nZ2VyQ29uZmlnLnRyYW5zcG9ydHMpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXJDb25maWcudHJhbnNwb3J0cyA9IHdpbnN0b25GbGlnaHQod2luc3RvbiwgbG9nZ2VyQ29uZmlnLnRyYW5zcG9ydHMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgbG9nZ2VyID0gbG9nZ2Vycy5hZGQobmFtZSwgbG9nZ2VyQ29uZmlnKTtcbiAgICAgICAgICAgIGxvZ2dlci5sb2dFcnJvciA9IChlcnJvcikgPT4gbG9nZ2VyLmxvZygnZXJyb3InLCBlcnJvci5tZXNzYWdlLCBfLnBpY2soZXJyb3IsIFsgJ25hbWUnLCAnc3RhdHVzJywgJ2NvZGUnLCAnaW5mbycsICdzdGFjaycgXSkpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBhcHAucmVnaXN0ZXJTZXJ2aWNlKCdsb2dnZXIuJyArIG5hbWUsIGxvZ2dlcik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGFwcC5yZWdpc3RlclNlcnZpY2UoJ2xvZ2dlcnMnLCBsb2dnZXJzKTtcblxuICAgICAgICBhcHAub24oJ3N0b3BwaW5nJywgKCkgPT4ge1xuICAgICAgICAgICAgbG9nZ2Vycy5jbG9zZSgpOyAgICAgICAgICAgIFxuICAgICAgICB9KTsgXG4gICAgfVxufTsiXX0=