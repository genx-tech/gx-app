"use strict";

require("source-map-support/register");

const {
  _
} = require('@genx/july');

const Feature = require('../enum/Feature');

const {
  requireConfig
} = require('../utils/Helpers');

module.exports = {
  type: Feature.CONF,
  load_: async (app, config) => {
    requireConfig(app, config, ['driver', 'connectionString', 'entity', 'key'], 'configFromDataSource');
    const {
      Connector
    } = app.tryRequire('@genx/data');
    let connector = Connector.createConnector(config.driver, config.connectionString, {
      logger: app.logger || app.server.logger
    });

    try {
      let cfgData = await connector.findOne_(config.entity, config.key);

      if (cfgData) {
        app.config = _.defaults(cfgData, app.config);
      } else {
        app.log('warn', `Feature "configFromDataSource" @ "${connector.getConnectionStringWithoutCredential()}" does not exist and this feature will be ignored.`);
      }
    } finally {
      await connector.end_();
    }
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWF0dXJlcy9jb25maWdGcm9tRGF0YVNvdXJjZS5qcyJdLCJuYW1lcyI6WyJfIiwicmVxdWlyZSIsIkZlYXR1cmUiLCJyZXF1aXJlQ29uZmlnIiwibW9kdWxlIiwiZXhwb3J0cyIsInR5cGUiLCJDT05GIiwibG9hZF8iLCJhcHAiLCJjb25maWciLCJDb25uZWN0b3IiLCJ0cnlSZXF1aXJlIiwiY29ubmVjdG9yIiwiY3JlYXRlQ29ubmVjdG9yIiwiZHJpdmVyIiwiY29ubmVjdGlvblN0cmluZyIsImxvZ2dlciIsInNlcnZlciIsImNmZ0RhdGEiLCJmaW5kT25lXyIsImVudGl0eSIsImtleSIsImRlZmF1bHRzIiwibG9nIiwiZ2V0Q29ubmVjdGlvblN0cmluZ1dpdGhvdXRDcmVkZW50aWFsIiwiZW5kXyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFPQSxNQUFNO0FBQUVBLEVBQUFBO0FBQUYsSUFBUUMsT0FBTyxDQUFDLFlBQUQsQ0FBckI7O0FBQ0EsTUFBTUMsT0FBTyxHQUFHRCxPQUFPLENBQUMsaUJBQUQsQ0FBdkI7O0FBQ0EsTUFBTTtBQUFFRSxFQUFBQTtBQUFGLElBQW9CRixPQUFPLENBQUMsa0JBQUQsQ0FBakM7O0FBRUFHLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQU1iQyxFQUFBQSxJQUFJLEVBQUVKLE9BQU8sQ0FBQ0ssSUFORDtBQWtCYkMsRUFBQUEsS0FBSyxFQUFFLE9BQU9DLEdBQVAsRUFBWUMsTUFBWixLQUF1QjtBQUMxQlAsSUFBQUEsYUFBYSxDQUFDTSxHQUFELEVBQU1DLE1BQU4sRUFBYyxDQUFDLFFBQUQsRUFBVyxrQkFBWCxFQUErQixRQUEvQixFQUF5QyxLQUF6QyxDQUFkLEVBQStELHNCQUEvRCxDQUFiO0FBRUEsVUFBTTtBQUFFQyxNQUFBQTtBQUFGLFFBQWdCRixHQUFHLENBQUNHLFVBQUosQ0FBZSxZQUFmLENBQXRCO0FBRUEsUUFBSUMsU0FBUyxHQUFHRixTQUFTLENBQUNHLGVBQVYsQ0FBMEJKLE1BQU0sQ0FBQ0ssTUFBakMsRUFBeUNMLE1BQU0sQ0FBQ00sZ0JBQWhELEVBQWtFO0FBQUVDLE1BQUFBLE1BQU0sRUFBRVIsR0FBRyxDQUFDUSxNQUFKLElBQWNSLEdBQUcsQ0FBQ1MsTUFBSixDQUFXRDtBQUFuQyxLQUFsRSxDQUFoQjs7QUFFQSxRQUFJO0FBQ0EsVUFBSUUsT0FBTyxHQUFHLE1BQU1OLFNBQVMsQ0FBQ08sUUFBVixDQUFtQlYsTUFBTSxDQUFDVyxNQUExQixFQUFrQ1gsTUFBTSxDQUFDWSxHQUF6QyxDQUFwQjs7QUFFQSxVQUFJSCxPQUFKLEVBQWE7QUFDVFYsUUFBQUEsR0FBRyxDQUFDQyxNQUFKLEdBQWFWLENBQUMsQ0FBQ3VCLFFBQUYsQ0FBV0osT0FBWCxFQUFvQlYsR0FBRyxDQUFDQyxNQUF4QixDQUFiO0FBQ0gsT0FGRCxNQUVPO0FBQ0hELFFBQUFBLEdBQUcsQ0FBQ2UsR0FBSixDQUFRLE1BQVIsRUFBaUIscUNBQW9DWCxTQUFTLENBQUNZLG9DQUFWLEVBQWlELG9EQUF0RztBQUNIO0FBRUosS0FURCxTQVNVO0FBQ04sWUFBTVosU0FBUyxDQUFDYSxJQUFWLEVBQU47QUFDSDtBQUNKO0FBckNZLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogRW5hYmxlIHNlcnZlciBzcGVjaWZpYyBjb25maWcgaWRlbnRpZmllZCBieSBob3N0IG5hbWUuXG4gKiBAbW9kdWxlIEZlYXR1cmVfQ29uZmlnQnlIb3N0bmFtZVxuICovXG5cbmNvbnN0IHsgXyB9ID0gcmVxdWlyZSgnQGdlbngvanVseScpO1xuY29uc3QgRmVhdHVyZSA9IHJlcXVpcmUoJy4uL2VudW0vRmVhdHVyZScpO1xuY29uc3QgeyByZXF1aXJlQ29uZmlnIH0gPSByZXF1aXJlKCcuLi91dGlscy9IZWxwZXJzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBmZWF0dXJlIGlzIGxvYWRlZCBhdCBjb25maWd1cmF0aW9uIHN0YWdlXG4gICAgICogQG1lbWJlciB7c3RyaW5nfVxuICAgICAqL1xuICAgIHR5cGU6IEZlYXR1cmUuQ09ORixcblxuICAgIC8qKlxuICAgICAqIExvYWQgdGhlIGZlYXR1cmVcbiAgICAgKiBAcGFyYW0ge0FwcH0gYXBwIC0gVGhlIGNsaSBhcHAgbW9kdWxlIG9iamVjdFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgLSBDb25maWcgZm9yIHRoZSBmZWF0dXJlXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtjb25maWcuZHJpdmVyXSAtIERhdGEgc291cmNlIGRyaXZlclxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbY29uZmlnLmNvbm5lY3Rpb25TdHJpbmddIC0gQ29ubmVjdGlvbiBzdHJpbmdcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2NvbmZpZy5lbnRpdHldIC0gRW50aXR5IG9mIHRoZSBjb25maWdcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2NvbmZpZy5rZXldIC0gUXVlcnkga2V5IG9mIHRoZSBjb25maWdcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZS48Kj59XG4gICAgICovXG4gICAgbG9hZF86IGFzeW5jIChhcHAsIGNvbmZpZykgPT4ge1xuICAgICAgICByZXF1aXJlQ29uZmlnKGFwcCwgY29uZmlnLCBbJ2RyaXZlcicsICdjb25uZWN0aW9uU3RyaW5nJywgJ2VudGl0eScsICdrZXknXSwgJ2NvbmZpZ0Zyb21EYXRhU291cmNlJyk7XG5cbiAgICAgICAgY29uc3QgeyBDb25uZWN0b3IgfSA9IGFwcC50cnlSZXF1aXJlKCdAZ2VueC9kYXRhJyk7ICAgICAgICBcblxuICAgICAgICBsZXQgY29ubmVjdG9yID0gQ29ubmVjdG9yLmNyZWF0ZUNvbm5lY3Rvcihjb25maWcuZHJpdmVyLCBjb25maWcuY29ubmVjdGlvblN0cmluZywgeyBsb2dnZXI6IGFwcC5sb2dnZXIgfHwgYXBwLnNlcnZlci5sb2dnZXIgfSk7XG4gICAgICAgIFxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGV0IGNmZ0RhdGEgPSBhd2FpdCBjb25uZWN0b3IuZmluZE9uZV8oY29uZmlnLmVudGl0eSwgY29uZmlnLmtleSk7XG5cbiAgICAgICAgICAgIGlmIChjZmdEYXRhKSB7XG4gICAgICAgICAgICAgICAgYXBwLmNvbmZpZyA9IF8uZGVmYXVsdHMoY2ZnRGF0YSwgYXBwLmNvbmZpZyk7ICAgIFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhcHAubG9nKCd3YXJuJywgYEZlYXR1cmUgXCJjb25maWdGcm9tRGF0YVNvdXJjZVwiIEAgXCIke2Nvbm5lY3Rvci5nZXRDb25uZWN0aW9uU3RyaW5nV2l0aG91dENyZWRlbnRpYWwoKX1cIiBkb2VzIG5vdCBleGlzdCBhbmQgdGhpcyBmZWF0dXJlIHdpbGwgYmUgaWdub3JlZC5gKTtcbiAgICAgICAgICAgIH0gICAgICAgICAgIFxuXG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBhd2FpdCBjb25uZWN0b3IuZW5kXygpO1xuICAgICAgICB9XG4gICAgfVxufTsiXX0=