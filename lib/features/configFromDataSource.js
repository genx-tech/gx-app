"use strict";

require("source-map-support/register");

const Feature = require('../enum/Feature');

const {
  _
} = require('rk-utils');

module.exports = {
  type: Feature.CONF,
  load_: async (app, config) => {
    const {
      Connector
    } = tryRequire('@genx/data');
    ['driver', 'connectionString', 'entity', 'key'].forEach(k => {
      if (!(k in config)) {
        throw new Error(`"${k}" is required for feature "configFromDataSource".`);
      }
    });
    let connector = Connector.createConnector(config.driver, config.connectionString, {
      logger: app.logger || app.server.logger
    });

    try {
      let cfgData = await connector.findOne_(config.entity, config.key);

      if (cfgData) {
        app.config = _.defaults(cfgData, app.config);
      } else {
        app.log('warn', `Feature "configFromDataSource" @ "${connector.getConnectionStringWithoutCredential()}" does not exist and this feature will be ignored.`);
      }
    } finally {
      await connector.end_();
    }
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWF0dXJlcy9jb25maWdGcm9tRGF0YVNvdXJjZS5qcyJdLCJuYW1lcyI6WyJGZWF0dXJlIiwicmVxdWlyZSIsIl8iLCJtb2R1bGUiLCJleHBvcnRzIiwidHlwZSIsIkNPTkYiLCJsb2FkXyIsImFwcCIsImNvbmZpZyIsIkNvbm5lY3RvciIsInRyeVJlcXVpcmUiLCJmb3JFYWNoIiwiayIsIkVycm9yIiwiY29ubmVjdG9yIiwiY3JlYXRlQ29ubmVjdG9yIiwiZHJpdmVyIiwiY29ubmVjdGlvblN0cmluZyIsImxvZ2dlciIsInNlcnZlciIsImNmZ0RhdGEiLCJmaW5kT25lXyIsImVudGl0eSIsImtleSIsImRlZmF1bHRzIiwibG9nIiwiZ2V0Q29ubmVjdGlvblN0cmluZ1dpdGhvdXRDcmVkZW50aWFsIiwiZW5kXyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFPQSxNQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxpQkFBRCxDQUF2Qjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBO0FBQUYsSUFBUUQsT0FBTyxDQUFDLFVBQUQsQ0FBckI7O0FBRUFFLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQU1iQyxFQUFBQSxJQUFJLEVBQUVMLE9BQU8sQ0FBQ00sSUFORDtBQWtCYkMsRUFBQUEsS0FBSyxFQUFFLE9BQU9DLEdBQVAsRUFBWUMsTUFBWixLQUF1QjtBQUMxQixVQUFNO0FBQUVDLE1BQUFBO0FBQUYsUUFBZ0JDLFVBQVUsQ0FBQyxZQUFELENBQWhDO0FBRUEsS0FBRSxRQUFGLEVBQVksa0JBQVosRUFBZ0MsUUFBaEMsRUFBMEMsS0FBMUMsRUFBa0RDLE9BQWxELENBQTBEQyxDQUFDLElBQUk7QUFDM0QsVUFBSSxFQUFFQSxDQUFDLElBQUlKLE1BQVAsQ0FBSixFQUFvQjtBQUNoQixjQUFNLElBQUlLLEtBQUosQ0FBVyxJQUFHRCxDQUFFLG1EQUFoQixDQUFOO0FBQ0g7QUFDSixLQUpEO0FBTUEsUUFBSUUsU0FBUyxHQUFHTCxTQUFTLENBQUNNLGVBQVYsQ0FBMEJQLE1BQU0sQ0FBQ1EsTUFBakMsRUFBeUNSLE1BQU0sQ0FBQ1MsZ0JBQWhELEVBQWtFO0FBQUVDLE1BQUFBLE1BQU0sRUFBRVgsR0FBRyxDQUFDVyxNQUFKLElBQWNYLEdBQUcsQ0FBQ1ksTUFBSixDQUFXRDtBQUFuQyxLQUFsRSxDQUFoQjs7QUFFQSxRQUFJO0FBQ0EsVUFBSUUsT0FBTyxHQUFHLE1BQU1OLFNBQVMsQ0FBQ08sUUFBVixDQUFtQmIsTUFBTSxDQUFDYyxNQUExQixFQUFrQ2QsTUFBTSxDQUFDZSxHQUF6QyxDQUFwQjs7QUFFQSxVQUFJSCxPQUFKLEVBQWE7QUFDVGIsUUFBQUEsR0FBRyxDQUFDQyxNQUFKLEdBQWFQLENBQUMsQ0FBQ3VCLFFBQUYsQ0FBV0osT0FBWCxFQUFvQmIsR0FBRyxDQUFDQyxNQUF4QixDQUFiO0FBQ0gsT0FGRCxNQUVPO0FBQ0hELFFBQUFBLEdBQUcsQ0FBQ2tCLEdBQUosQ0FBUSxNQUFSLEVBQWlCLHFDQUFvQ1gsU0FBUyxDQUFDWSxvQ0FBVixFQUFpRCxvREFBdEc7QUFDSDtBQUVKLEtBVEQsU0FTVTtBQUNOLFlBQU1aLFNBQVMsQ0FBQ2EsSUFBVixFQUFOO0FBQ0g7QUFDSjtBQXpDWSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEVuYWJsZSBzZXJ2ZXIgc3BlY2lmaWMgY29uZmlnIGlkZW50aWZpZWQgYnkgaG9zdCBuYW1lLlxuICogQG1vZHVsZSBGZWF0dXJlX0NvbmZpZ0J5SG9zdG5hbWVcbiAqL1xuXG5jb25zdCBGZWF0dXJlID0gcmVxdWlyZSgnLi4vZW51bS9GZWF0dXJlJyk7XG5jb25zdCB7IF8gfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBmZWF0dXJlIGlzIGxvYWRlZCBhdCBjb25maWd1cmF0aW9uIHN0YWdlXG4gICAgICogQG1lbWJlciB7c3RyaW5nfVxuICAgICAqL1xuICAgIHR5cGU6IEZlYXR1cmUuQ09ORixcblxuICAgIC8qKlxuICAgICAqIExvYWQgdGhlIGZlYXR1cmVcbiAgICAgKiBAcGFyYW0ge0FwcH0gYXBwIC0gVGhlIGNsaSBhcHAgbW9kdWxlIG9iamVjdFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgLSBDb25maWcgZm9yIHRoZSBmZWF0dXJlXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtjb25maWcuZHJpdmVyXSAtIERhdGEgc291cmNlIGRyaXZlclxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbY29uZmlnLmNvbm5lY3Rpb25TdHJpbmddIC0gQ29ubmVjdGlvbiBzdHJpbmdcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2NvbmZpZy5lbnRpdHldIC0gRW50aXR5IG9mIHRoZSBjb25maWdcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2NvbmZpZy5rZXldIC0gUXVlcnkga2V5IG9mIHRoZSBjb25maWdcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZS48Kj59XG4gICAgICovXG4gICAgbG9hZF86IGFzeW5jIChhcHAsIGNvbmZpZykgPT4ge1xuICAgICAgICBjb25zdCB7IENvbm5lY3RvciB9ID0gdHJ5UmVxdWlyZSgnQGdlbngvZGF0YScpO1xuXG4gICAgICAgIFsgJ2RyaXZlcicsICdjb25uZWN0aW9uU3RyaW5nJywgJ2VudGl0eScsICdrZXknIF0uZm9yRWFjaChrID0+IHtcbiAgICAgICAgICAgIGlmICghKGsgaW4gY29uZmlnKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgXCIke2t9XCIgaXMgcmVxdWlyZWQgZm9yIGZlYXR1cmUgXCJjb25maWdGcm9tRGF0YVNvdXJjZVwiLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBsZXQgY29ubmVjdG9yID0gQ29ubmVjdG9yLmNyZWF0ZUNvbm5lY3Rvcihjb25maWcuZHJpdmVyLCBjb25maWcuY29ubmVjdGlvblN0cmluZywgeyBsb2dnZXI6IGFwcC5sb2dnZXIgfHwgYXBwLnNlcnZlci5sb2dnZXIgfSk7XG4gICAgICAgIFxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGV0IGNmZ0RhdGEgPSBhd2FpdCBjb25uZWN0b3IuZmluZE9uZV8oY29uZmlnLmVudGl0eSwgY29uZmlnLmtleSk7XG5cbiAgICAgICAgICAgIGlmIChjZmdEYXRhKSB7XG4gICAgICAgICAgICAgICAgYXBwLmNvbmZpZyA9IF8uZGVmYXVsdHMoY2ZnRGF0YSwgYXBwLmNvbmZpZyk7ICAgIFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhcHAubG9nKCd3YXJuJywgYEZlYXR1cmUgXCJjb25maWdGcm9tRGF0YVNvdXJjZVwiIEAgXCIke2Nvbm5lY3Rvci5nZXRDb25uZWN0aW9uU3RyaW5nV2l0aG91dENyZWRlbnRpYWwoKX1cIiBkb2VzIG5vdCBleGlzdCBhbmQgdGhpcyBmZWF0dXJlIHdpbGwgYmUgaWdub3JlZC5gKTtcbiAgICAgICAgICAgIH0gICAgICAgICAgIFxuXG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBhd2FpdCBjb25uZWN0b3IuZW5kXygpO1xuICAgICAgICB9XG4gICAgfVxufTsiXX0=