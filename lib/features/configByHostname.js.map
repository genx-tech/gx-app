{"version":3,"sources":["../../src/features/configByHostname.js"],"names":["path","require","Feature","cmd","fs","JsonConfigProvider","module","exports","type","CONF","load_","app","options","hostName","runSync","trim","e","log","message","Error","hostSpecConfigFile","join","configPath","configName","existsSync","fallbackName","hostSpecConfigFileFb","configLoader","provider","loadConfig_"],"mappings":"AAAA;;;;AAOA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,iBAAD,CAAvB;;AACA,MAAM;AAAEE,EAAAA,GAAF;AAAOC,EAAAA;AAAP,IAAcH,OAAO,CAAC,WAAD,CAA3B;;AACA,MAAMI,kBAAkB,GAAGJ,OAAO,CAAC,qCAAD,CAAlC;;AAEAK,MAAM,CAACC,OAAP,GAAiB;AAMbC,EAAAA,IAAI,EAAEN,OAAO,CAACO,IAND;AAebC,EAAAA,KAAK,EAAE,OAAOC,GAAP,EAAYC,OAAZ,KAAwB;AAC3B,QAAIC,QAAJ;;AAEA,QAAI;AACAA,MAAAA,QAAQ,GAAGV,GAAG,CAACW,OAAJ,CAAY,UAAZ,EAAwBC,IAAxB,EAAX;AACH,KAFD,CAEE,OAAOC,CAAP,EAAU;AACRL,MAAAA,GAAG,CAACM,GAAJ,CAAQ,MAAR,EAAgBD,CAAC,CAACE,OAAF,IAAaF,CAA7B;AACH;;AAED,QAAI,CAACH,QAAL,EAAe;AACX,YAAM,IAAIM,KAAJ,CAAU,6CAAV,CAAN;AACH;;AAED,QAAIC,kBAAkB,GAAGpB,IAAI,CAACqB,IAAL,CAAUV,GAAG,CAACW,UAAd,EAA0BX,GAAG,CAACY,UAAJ,GAAiB,GAAjB,GAAuBV,QAAvB,GAAkC,OAA5D,CAAzB;;AACA,QAAI,CAACT,EAAE,CAACoB,UAAH,CAAcJ,kBAAd,CAAL,EAAwC;AACpC,UAAIR,OAAO,CAACa,YAAZ,EAA0B;AACtBZ,QAAAA,QAAQ,GAAGD,OAAO,CAACa,YAAnB;AACA,YAAIC,oBAAoB,GAAG1B,IAAI,CAACqB,IAAL,CAAUV,GAAG,CAACW,UAAd,EAA0BX,GAAG,CAACY,UAAJ,GAAiB,GAAjB,GAAuBV,QAAvB,GAAkC,OAA5D,CAA3B;;AAEA,YAAI,CAACT,EAAE,CAACoB,UAAH,CAAcE,oBAAd,CAAL,EAA0C;AACtC,gBAAM,IAAIP,KAAJ,CAAW,sCAAqCN,QAAS,wCAAuCa,oBAAqB,qBAArH,CAAN;AACH;;AAEDN,QAAAA,kBAAkB,GAAGM,oBAArB;AACH,OATD,MASO;AACHf,QAAAA,GAAG,CAACM,GAAJ,CAAQ,MAAR,EAAiB,sCAAqCJ,QAAS,oDAA/D;AACA;AACH;AAEJ;;AAEDF,IAAAA,GAAG,CAACgB,YAAJ,CAAiBC,QAAjB,GAA4B,IAAIvB,kBAAJ,CAAuBe,kBAAvB,CAA5B;AACA,WAAOT,GAAG,CAACkB,WAAJ,EAAP;AACH;AAhDY,CAAjB","sourcesContent":["\"use strict\";\n\n/**\n * Enable server specific config identified by host name.\n * @module Feature_ConfigByHostname\n */\n\nconst path = require('path');\nconst Feature = require('../enum/Feature');\nconst { cmd, fs } = require('@genx/sys');\nconst JsonConfigProvider = require('@genx/config/lib/JsonConfigProvider');\n\nmodule.exports = {\n\n    /**\n     * This feature is loaded at configuration stage\n     * @member {string}\n     */\n    type: Feature.CONF,\n\n    /**\n     * Load the feature\n     * @param {App} app - The cli app module object\n     * @param {object} options - Options for the feature\n     * @property {string} [options.fallbackName] - Fallback name if hostname not available\n     * @returns {Promise.<*>}\n     */\n    load_: async (app, options) => {\n        let hostName;\n        \n        try {\n            hostName = cmd.runSync('hostname').trim();\n        } catch (e) {\n            app.log('warn', e.message || e);\n        }\n\n        if (!hostName) {\n            throw new Error('Unable to read \"hostname\" from environment.');\n        }         \n        \n        let hostSpecConfigFile = path.join(app.configPath, app.configName + '.' + hostName + '.json');\n        if (!fs.existsSync(hostSpecConfigFile)) {\n            if (options.fallbackName) {\n                hostName = options.fallbackName;\n                let hostSpecConfigFileFb = path.join(app.configPath, app.configName + '.' + hostName + '.json');\n\n                if (!fs.existsSync(hostSpecConfigFileFb)) {\n                    throw new Error(`The specific config file for host [${hostName}] not found and the fallback config [${hostSpecConfigFileFb}] not found either.`);\n                }\n\n                hostSpecConfigFile = hostSpecConfigFileFb;\n            } else {\n                app.log('warn', `The specific config file for host [${hostName}] not found and no fallback setting. Use defaults.`);\n                return;\n            }          \n            \n        }\n\n        app.configLoader.provider = new JsonConfigProvider(hostSpecConfigFile);\n        return app.loadConfig_();\n    }\n};"],"file":"configByHostname.js"}