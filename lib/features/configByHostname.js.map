{"version":3,"file":"configByHostname.js","names":["require","path","Feature","cmd","fs","JsonConfigProvider","module","exports","type","CONF","load_","app","options","hostName","runSync","trim","e","log","message","Error","hostSpecConfigFile","join","configPath","configName","existsSync","fallbackName","hostSpecConfigFileFb","configLoader","provider","loadConfig_"],"sources":["../../src/features/configByHostname.js"],"sourcesContent":["\"use strict\";\n\n/**\n * Enable server specific config identified by host name.\n * @module Feature_ConfigByHostname\n */\n\nconst path = require('path');\nconst Feature = require('../enum/Feature');\nconst { cmd, fs } = require('@genx/sys');\nconst JsonConfigProvider = require('@genx/config/lib/JsonConfigProvider');\n\nmodule.exports = {\n\n    /**\n     * This feature is loaded at configuration stage\n     * @member {string}\n     */\n    type: Feature.CONF,\n\n    /**\n     * Load the feature\n     * @param {App} app - The cli app module object\n     * @param {object} options - Options for the feature\n     * @property {string} [options.fallbackName] - Fallback name if hostname not available\n     * @returns {Promise.<*>}\n     */\n    load_: async (app, options) => {\n        let hostName;\n        \n        try {\n            hostName = cmd.runSync('hostname').trim();\n        } catch (e) {\n            app.log('warn', e.message || e);\n        }\n\n        if (!hostName) {\n            throw new Error('Unable to read \"hostname\" from environment.');\n        }         \n        \n        let hostSpecConfigFile = path.join(app.configPath, app.configName + '.' + hostName + '.json');\n        if (!fs.existsSync(hostSpecConfigFile)) {\n            if (options.fallbackName) {\n                hostName = options.fallbackName;\n                let hostSpecConfigFileFb = path.join(app.configPath, app.configName + '.' + hostName + '.json');\n\n                if (!fs.existsSync(hostSpecConfigFileFb)) {\n                    throw new Error(`The specific config file for host [${hostName}] not found and the fallback config [${hostSpecConfigFileFb}] not found either.`);\n                }\n\n                hostSpecConfigFile = hostSpecConfigFileFb;\n            } else {\n                app.log('warn', `The specific config file for host [${hostName}] not found and no fallback setting. Use defaults.`);\n                return;\n            }          \n            \n        }\n\n        app.configLoader.provider = new JsonConfigProvider(hostSpecConfigFile);\n        return app.loadConfig_();\n    }\n};"],"mappings":"AAAA,YAAY,CAACA,OAAA,gCAOb,KAAM,CAAAC,IAAI,CAAGD,OAAO,CAAC,MAAM,CAAC,CAC5B,KAAM,CAAAE,OAAO,CAAGF,OAAO,CAAC,iBAAiB,CAAC,CAC1C,KAAM,CAAEG,GAAG,CAAEC,EAAG,CAAC,CAAGJ,OAAO,CAAC,WAAW,CAAC,CACxC,KAAM,CAAAK,kBAAkB,CAAGL,OAAO,CAAC,qCAAqC,CAAC,CAEzEM,MAAM,CAACC,OAAO,CAAG,CAMbC,IAAI,CAAEN,OAAO,CAACO,IAAI,CASlBC,KAAK,CAAE,KAAAA,CAAOC,GAAG,CAAEC,OAAO,GAAK,CAC3B,GAAI,CAAAC,QAAQ,CAEZ,GAAI,CACAA,QAAQ,CAAGV,GAAG,CAACW,OAAO,CAAC,UAAU,CAAC,CAACC,IAAI,EAC3C,CAAE,MAAOC,CAAC,CAAE,CACRL,GAAG,CAACM,GAAG,CAAC,MAAM,CAAED,CAAC,CAACE,OAAO,EAAIF,CAAC,CAClC,CAEA,GAAI,CAACH,QAAQ,CAAE,CACX,KAAM,IAAI,CAAAM,KAAK,CAAC,+CAA6C,CACjE,CAEA,GAAI,CAAAC,kBAAkB,CAAGnB,IAAI,CAACoB,IAAI,CAACV,GAAG,CAACW,UAAU,CAAEX,GAAG,CAACY,UAAU,CAAG,GAAG,CAAGV,QAAQ,CAAG,OAAO,CAAC,CAC7F,GAAI,CAACT,EAAE,CAACoB,UAAU,CAACJ,kBAAkB,CAAC,CAAE,CACpC,GAAIR,OAAO,CAACa,YAAY,CAAE,CACtBZ,QAAQ,CAAGD,OAAO,CAACa,YAAY,CAC/B,GAAI,CAAAC,oBAAoB,CAAGzB,IAAI,CAACoB,IAAI,CAACV,GAAG,CAACW,UAAU,CAAEX,GAAG,CAACY,UAAU,CAAG,GAAG,CAAGV,QAAQ,CAAG,OAAO,CAAC,CAE/F,GAAI,CAACT,EAAE,CAACoB,UAAU,CAACE,oBAAoB,CAAC,CAAE,CACtC,KAAM,IAAI,CAAAP,KAAK,CAAE,sCAAqCN,QAAS,wCAAuCa,oBAAqB,qBAAoB,CACnJ,CAEAN,kBAAkB,CAAGM,oBACzB,CAAC,IAAM,CACHf,GAAG,CAACM,GAAG,CAAC,MAAM,CAAG,sCAAqCJ,QAAS,oDAAmD,CAAC,CACnH,MACJ,CAEJ,CAEAF,GAAG,CAACgB,YAAY,CAACC,QAAQ,CAAG,GAAI,CAAAvB,kBAAkB,CAACe,kBAAkB,CAAC,CACtE,MAAO,CAAAT,GAAG,CAACkB,WAAW,EAC1B,CACJ,CAAC"}