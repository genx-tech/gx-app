"use strict";

require("source-map-support/register");

const path = require('path');

const Feature = require('../enum/Feature');

const {
  fs,
  cmd
} = require('@genx/sys');

const JsonConfigProvider = require('rk-config/lib/JsonConfigProvider');

module.exports = {
  type: Feature.CONF,
  load_: async (app, options) => {
    let devName;

    try {
      devName = cmd.runSync('git config --global user.email').trim();
    } catch (e) {
      app.log('warn', e.message || e);
    }

    if (!devName || devName === '') {
      if (options.fallbackName) {
        devName = options.fallbackName;
      } else {
        app.log('warn', 'Unable to read "user.email" of git config and no fallback option is configured.');
        return;
      }
    }

    devName = devName.substr(0, devName.indexOf('@'));
    const devConfigFile = path.join(app.configPath, app.configName + '.' + devName + '.json');

    if (!fs.existsSync(devConfigFile)) {
      app.log('warn', `Developer specific config file "${devConfigFile}" does not exist and will use defaults.`);
      return;
    }

    app.configLoader.provider = new JsonConfigProvider(devConfigFile);
    return app.loadConfig_();
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWF0dXJlcy9jb25maWdCeUdpdFVzZXIuanMiXSwibmFtZXMiOlsicGF0aCIsInJlcXVpcmUiLCJGZWF0dXJlIiwiZnMiLCJjbWQiLCJKc29uQ29uZmlnUHJvdmlkZXIiLCJtb2R1bGUiLCJleHBvcnRzIiwidHlwZSIsIkNPTkYiLCJsb2FkXyIsImFwcCIsIm9wdGlvbnMiLCJkZXZOYW1lIiwicnVuU3luYyIsInRyaW0iLCJlIiwibG9nIiwibWVzc2FnZSIsImZhbGxiYWNrTmFtZSIsInN1YnN0ciIsImluZGV4T2YiLCJkZXZDb25maWdGaWxlIiwiam9pbiIsImNvbmZpZ1BhdGgiLCJjb25maWdOYW1lIiwiZXhpc3RzU3luYyIsImNvbmZpZ0xvYWRlciIsInByb3ZpZGVyIiwibG9hZENvbmZpZ18iXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBT0EsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNQyxPQUFPLEdBQUdELE9BQU8sQ0FBQyxpQkFBRCxDQUF2Qjs7QUFDQSxNQUFNO0FBQUVFLEVBQUFBLEVBQUY7QUFBTUMsRUFBQUE7QUFBTixJQUFjSCxPQUFPLENBQUMsV0FBRCxDQUEzQjs7QUFFQSxNQUFNSSxrQkFBa0IsR0FBR0osT0FBTyxDQUFDLGtDQUFELENBQWxDOztBQUVBSyxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFNYkMsRUFBQUEsSUFBSSxFQUFFTixPQUFPLENBQUNPLElBTkQ7QUFlYkMsRUFBQUEsS0FBSyxFQUFFLE9BQU9DLEdBQVAsRUFBWUMsT0FBWixLQUF3QjtBQUMzQixRQUFJQyxPQUFKOztBQUVBLFFBQUk7QUFDQUEsTUFBQUEsT0FBTyxHQUFHVCxHQUFHLENBQUNVLE9BQUosQ0FBWSxnQ0FBWixFQUE4Q0MsSUFBOUMsRUFBVjtBQUNILEtBRkQsQ0FFRSxPQUFPQyxDQUFQLEVBQVU7QUFDUkwsTUFBQUEsR0FBRyxDQUFDTSxHQUFKLENBQVEsTUFBUixFQUFnQkQsQ0FBQyxDQUFDRSxPQUFGLElBQWFGLENBQTdCO0FBQ0g7O0FBRUQsUUFBSSxDQUFDSCxPQUFELElBQVlBLE9BQU8sS0FBSyxFQUE1QixFQUFnQztBQUM1QixVQUFJRCxPQUFPLENBQUNPLFlBQVosRUFBMEI7QUFDdEJOLFFBQUFBLE9BQU8sR0FBR0QsT0FBTyxDQUFDTyxZQUFsQjtBQUNILE9BRkQsTUFFTztBQUNIUixRQUFBQSxHQUFHLENBQUNNLEdBQUosQ0FBUSxNQUFSLEVBQWdCLGlGQUFoQjtBQUNBO0FBQ0g7QUFDSjs7QUFFREosSUFBQUEsT0FBTyxHQUFHQSxPQUFPLENBQUNPLE1BQVIsQ0FBZSxDQUFmLEVBQWtCUCxPQUFPLENBQUNRLE9BQVIsQ0FBZ0IsR0FBaEIsQ0FBbEIsQ0FBVjtBQUVBLFVBQU1DLGFBQWEsR0FBR3RCLElBQUksQ0FBQ3VCLElBQUwsQ0FBVVosR0FBRyxDQUFDYSxVQUFkLEVBQTBCYixHQUFHLENBQUNjLFVBQUosR0FBaUIsR0FBakIsR0FBdUJaLE9BQXZCLEdBQWlDLE9BQTNELENBQXRCOztBQUNBLFFBQUksQ0FBQ1YsRUFBRSxDQUFDdUIsVUFBSCxDQUFjSixhQUFkLENBQUwsRUFBbUM7QUFDL0JYLE1BQUFBLEdBQUcsQ0FBQ00sR0FBSixDQUFRLE1BQVIsRUFBaUIsbUNBQWtDSyxhQUFjLHlDQUFqRTtBQUNBO0FBQ0g7O0FBRURYLElBQUFBLEdBQUcsQ0FBQ2dCLFlBQUosQ0FBaUJDLFFBQWpCLEdBQTRCLElBQUl2QixrQkFBSixDQUF1QmlCLGFBQXZCLENBQTVCO0FBQ0EsV0FBT1gsR0FBRyxDQUFDa0IsV0FBSixFQUFQO0FBQ0g7QUEzQ1ksQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBFbmFibGUgZGV2ZWxvcGVyIHNwZWNpZmljIGNvbmZpZyBpZGVudGlmaWVkIGJ5IGdpdCB1c2VyIG5hbWUuXG4gKiBAbW9kdWxlIEZlYXR1cmVfQ29uZmlnQnlHaXRVc2VyXG4gKi9cblxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IEZlYXR1cmUgPSByZXF1aXJlKCcuLi9lbnVtL0ZlYXR1cmUnKTtcbmNvbnN0IHsgZnMsIGNtZCB9ID0gcmVxdWlyZSgnQGdlbngvc3lzJyk7XG5cbmNvbnN0IEpzb25Db25maWdQcm92aWRlciA9IHJlcXVpcmUoJ3JrLWNvbmZpZy9saWIvSnNvbkNvbmZpZ1Byb3ZpZGVyJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBmZWF0dXJlIGlzIGxvYWRlZCBhdCBjb25maWd1cmF0aW9uIHN0YWdlXG4gICAgICogQG1lbWJlciB7c3RyaW5nfVxuICAgICAqL1xuICAgIHR5cGU6IEZlYXR1cmUuQ09ORixcblxuICAgIC8qKlxuICAgICAqIExvYWQgdGhlIGZlYXR1cmVcbiAgICAgKiBAcGFyYW0ge0FwcH0gYXBwIC0gVGhlIGNsaSBhcHAgbW9kdWxlIG9iamVjdFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgdGhlIGZlYXR1cmUgICAgIFxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbb3B0aW9ucy5mYWxsYmFja05hbWVdIC0gRmFsbGJhY2sgdXNlcm5hbWUgZm9yIGdpdCB1c2VyIG5vdCBhdmFpbGFibGVcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZS48Kj59XG4gICAgICovXG4gICAgbG9hZF86IGFzeW5jIChhcHAsIG9wdGlvbnMpID0+IHtcbiAgICAgICAgbGV0IGRldk5hbWU7XG4gICAgICAgIFxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZGV2TmFtZSA9IGNtZC5ydW5TeW5jKCdnaXQgY29uZmlnIC0tZ2xvYmFsIHVzZXIuZW1haWwnKS50cmltKCk7ICAgICAgICAgICAgXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGFwcC5sb2coJ3dhcm4nLCBlLm1lc3NhZ2UgfHwgZSk7XG4gICAgICAgIH0gICAgICAgIFxuXG4gICAgICAgIGlmICghZGV2TmFtZSB8fCBkZXZOYW1lID09PSAnJykge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZmFsbGJhY2tOYW1lKSB7XG4gICAgICAgICAgICAgICAgZGV2TmFtZSA9IG9wdGlvbnMuZmFsbGJhY2tOYW1lO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhcHAubG9nKCd3YXJuJywgJ1VuYWJsZSB0byByZWFkIFwidXNlci5lbWFpbFwiIG9mIGdpdCBjb25maWcgYW5kIG5vIGZhbGxiYWNrIG9wdGlvbiBpcyBjb25maWd1cmVkLicpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH0gICAgICAgICAgICBcbiAgICAgICAgfSAgICAgICAgICAgIFxuXG4gICAgICAgIGRldk5hbWUgPSBkZXZOYW1lLnN1YnN0cigwLCBkZXZOYW1lLmluZGV4T2YoJ0AnKSk7XG5cbiAgICAgICAgY29uc3QgZGV2Q29uZmlnRmlsZSA9IHBhdGguam9pbihhcHAuY29uZmlnUGF0aCwgYXBwLmNvbmZpZ05hbWUgKyAnLicgKyBkZXZOYW1lICsgJy5qc29uJyk7XG4gICAgICAgIGlmICghZnMuZXhpc3RzU3luYyhkZXZDb25maWdGaWxlKSkge1xuICAgICAgICAgICAgYXBwLmxvZygnd2FybicsIGBEZXZlbG9wZXIgc3BlY2lmaWMgY29uZmlnIGZpbGUgXCIke2RldkNvbmZpZ0ZpbGV9XCIgZG9lcyBub3QgZXhpc3QgYW5kIHdpbGwgdXNlIGRlZmF1bHRzLmApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgYXBwLmNvbmZpZ0xvYWRlci5wcm92aWRlciA9IG5ldyBKc29uQ29uZmlnUHJvdmlkZXIoZGV2Q29uZmlnRmlsZSk7XG4gICAgICAgIHJldHVybiBhcHAubG9hZENvbmZpZ18oKTtcbiAgICB9XG59OyJdfQ==