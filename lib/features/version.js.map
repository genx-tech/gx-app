{"version":3,"file":"version.js","names":["require","fs","Feature","module","exports","type","INIT","load_","app","version","pkgFile","toAbsolutePath","exists","Error","workingPath","pkg","readJson"],"sources":["../../src/features/version.js"],"sourcesContent":["\"use strict\";\n\n/**\n * Set app version\n * @module Feature_Version\n */\n\nconst { fs } = require('@genx/sys');\nconst Feature = require('../enum/Feature');\n\nmodule.exports = {\n\n    /**\n     * This feature is loaded at init stage\n     * @member {string}\n     */\n    type: Feature.INIT,\n\n    /**\n     * Load the feature\n     * @param {App} app - The cli app module object\n     * @param {string} version - Version information, use @package.version to use the version info from package.json located under working folder\n     * @returns {Promise.<*>}\n     */\n    load_: async function (app, version) {\n        if (version === '@package.version') {\n            let pkgFile = app.toAbsolutePath('package.json');\n            if (!(await fs.exists(pkgFile))) {\n                throw new Error('\"package.json\" not found in working directory. CWD: ' + app.workingPath);\n            }\n\n            let pkg = await fs.readJson(pkgFile);\n            version = pkg.version;\n        } \n\n        app.version = version;\n    }\n};"],"mappings":"AAAA,YAAY,CAACA,OAAA,gCAOb,KAAM,CAAEC,EAAG,CAAC,CAAGD,OAAO,CAAC,WAAW,CAAC,CACnC,KAAM,CAAAE,OAAO,CAAGF,OAAO,CAAC,iBAAiB,CAAC,CAE1CG,MAAM,CAACC,OAAO,CAAG,CAMbC,IAAI,CAAEH,OAAO,CAACI,IAAI,CAQlBC,KAAK,CAAE,cAAAA,CAAgBC,GAAG,CAAEC,OAAO,CAAE,CACjC,GAAIA,OAAO,GAAK,kBAAkB,CAAE,CAChC,GAAI,CAAAC,OAAO,CAAGF,GAAG,CAACG,cAAc,CAAC,cAAc,CAAC,CAChD,GAAI,EAAE,KAAM,CAAAV,EAAE,CAACW,MAAM,CAACF,OAAO,CAAC,CAAC,CAAE,CAC7B,KAAM,IAAI,CAAAG,KAAK,CAAC,wDAAsD,CAAGL,GAAG,CAACM,WAAW,CAC5F,CAEA,GAAI,CAAAC,GAAG,CAAG,KAAM,CAAAd,EAAE,CAACe,QAAQ,CAACN,OAAO,CAAC,CACpCD,OAAO,CAAGM,GAAG,CAACN,OAClB,CAEAD,GAAG,CAACC,OAAO,CAAGA,OAClB,CACJ,CAAC"}