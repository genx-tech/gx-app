"use strict";

require("source-map-support/register");

const path = require("path");

const {
  _,
  fs,
  eachAsync_
} = require("rk-utils");

const Feature = require("../enum/Feature");

const {
  InvalidConfiguration
} = require("../utils/Errors");

const {
  tryRequire
} = require('../utils/Helpers');

module.exports = {
  type: Feature.PLUGIN,
  load_: async (server, entries) => {
    const {
      LibModule
    } = tryRequire('@genx/server');
    return eachAsync_(entries, async (config, name) => {
      let options = Object.assign({
        env: server.env,
        logWithAppName: server.options.logWithAppName
      }, config.options);
      let appPath;

      if (config.npmModule) {
        appPath = server.toAbsolutePath("node_modules", name);
      } else {
        appPath = path.join(server.appModulesPath, name);
      }

      let exists = (await fs.pathExists(appPath)) && (await fs.stat(appPath)).isDirectory();

      if (!exists) {
        throw new InvalidConfiguration(`Lib [${name}] not exists.`, server, `libModules.${name}`);
      }

      let lib = new LibModule(server, name, appPath, options);
      lib.on("configLoaded", () => {
        if (!_.isEmpty(config.settings)) {
          lib.config.settings = Object.assign({}, lib.config.settings, config.settings);
          server.log("verbose", `Lib settings of [${lib.name}] is overrided.`);
        }
      });
      let relativePath = path.relative(server.workingPath, appPath);
      server.log("verbose", `Loading lib [${lib.name}] from "${relativePath}" ...`);
      await lib.start_();
      server.registerLib(lib);
      server.log("verbose", `Lib [${lib.name}] is loaded.`);
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWF0dXJlcy9saWJNb2R1bGVzLmpzIl0sIm5hbWVzIjpbInBhdGgiLCJyZXF1aXJlIiwiXyIsImZzIiwiZWFjaEFzeW5jXyIsIkZlYXR1cmUiLCJJbnZhbGlkQ29uZmlndXJhdGlvbiIsInRyeVJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwidHlwZSIsIlBMVUdJTiIsImxvYWRfIiwic2VydmVyIiwiZW50cmllcyIsIkxpYk1vZHVsZSIsImNvbmZpZyIsIm5hbWUiLCJvcHRpb25zIiwiT2JqZWN0IiwiYXNzaWduIiwiZW52IiwibG9nV2l0aEFwcE5hbWUiLCJhcHBQYXRoIiwibnBtTW9kdWxlIiwidG9BYnNvbHV0ZVBhdGgiLCJqb2luIiwiYXBwTW9kdWxlc1BhdGgiLCJleGlzdHMiLCJwYXRoRXhpc3RzIiwic3RhdCIsImlzRGlyZWN0b3J5IiwibGliIiwib24iLCJpc0VtcHR5Iiwic2V0dGluZ3MiLCJsb2ciLCJyZWxhdGl2ZVBhdGgiLCJyZWxhdGl2ZSIsIndvcmtpbmdQYXRoIiwic3RhcnRfIiwicmVnaXN0ZXJMaWIiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBbUJBLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQSxDQUFGO0FBQUtDLEVBQUFBLEVBQUw7QUFBU0MsRUFBQUE7QUFBVCxJQUF3QkgsT0FBTyxDQUFDLFVBQUQsQ0FBckM7O0FBQ0EsTUFBTUksT0FBTyxHQUFHSixPQUFPLENBQUMsaUJBQUQsQ0FBdkI7O0FBQ0EsTUFBTTtBQUFFSyxFQUFBQTtBQUFGLElBQTJCTCxPQUFPLENBQUMsaUJBQUQsQ0FBeEM7O0FBQ0EsTUFBTTtBQUFFTSxFQUFBQTtBQUFGLElBQWlCTixPQUFPLENBQUMsa0JBQUQsQ0FBOUI7O0FBRUFPLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUtiQyxFQUFBQSxJQUFJLEVBQUVMLE9BQU8sQ0FBQ00sTUFMRDtBQWFiQyxFQUFBQSxLQUFLLEVBQUUsT0FBT0MsTUFBUCxFQUFlQyxPQUFmLEtBQTJCO0FBQzlCLFVBQU07QUFBRUMsTUFBQUE7QUFBRixRQUFnQlIsVUFBVSxDQUFDLGNBQUQsQ0FBaEM7QUFFQSxXQUFPSCxVQUFVLENBQUNVLE9BQUQsRUFBVSxPQUFPRSxNQUFQLEVBQWVDLElBQWYsS0FBd0I7QUFDL0MsVUFBSUMsT0FBTyxHQUFHQyxNQUFNLENBQUNDLE1BQVAsQ0FDVjtBQUNJQyxRQUFBQSxHQUFHLEVBQUVSLE1BQU0sQ0FBQ1EsR0FEaEI7QUFFSUMsUUFBQUEsY0FBYyxFQUFFVCxNQUFNLENBQUNLLE9BQVAsQ0FBZUk7QUFGbkMsT0FEVSxFQUtWTixNQUFNLENBQUNFLE9BTEcsQ0FBZDtBQVFBLFVBQUlLLE9BQUo7O0FBRUEsVUFBSVAsTUFBTSxDQUFDUSxTQUFYLEVBQXNCO0FBQ2xCRCxRQUFBQSxPQUFPLEdBQUdWLE1BQU0sQ0FBQ1ksY0FBUCxDQUFzQixjQUF0QixFQUFzQ1IsSUFBdEMsQ0FBVjtBQUNILE9BRkQsTUFFTztBQUNITSxRQUFBQSxPQUFPLEdBQUd2QixJQUFJLENBQUMwQixJQUFMLENBQVViLE1BQU0sQ0FBQ2MsY0FBakIsRUFBaUNWLElBQWpDLENBQVY7QUFDSDs7QUFFRCxVQUFJVyxNQUFNLEdBQUcsQ0FBQyxNQUFNekIsRUFBRSxDQUFDMEIsVUFBSCxDQUFjTixPQUFkLENBQVAsS0FBa0MsQ0FBQyxNQUFNcEIsRUFBRSxDQUFDMkIsSUFBSCxDQUFRUCxPQUFSLENBQVAsRUFBeUJRLFdBQXpCLEVBQS9DOztBQUNBLFVBQUksQ0FBQ0gsTUFBTCxFQUFhO0FBQ1QsY0FBTSxJQUFJdEIsb0JBQUosQ0FBMEIsUUFBT1csSUFBSyxlQUF0QyxFQUFzREosTUFBdEQsRUFBK0QsY0FBYUksSUFBSyxFQUFqRixDQUFOO0FBQ0g7O0FBRUQsVUFBSWUsR0FBRyxHQUFHLElBQUlqQixTQUFKLENBQWNGLE1BQWQsRUFBc0JJLElBQXRCLEVBQTRCTSxPQUE1QixFQUFxQ0wsT0FBckMsQ0FBVjtBQUVBYyxNQUFBQSxHQUFHLENBQUNDLEVBQUosQ0FBTyxjQUFQLEVBQXVCLE1BQU07QUFDekIsWUFBSSxDQUFDL0IsQ0FBQyxDQUFDZ0MsT0FBRixDQUFVbEIsTUFBTSxDQUFDbUIsUUFBakIsQ0FBTCxFQUFpQztBQUM3QkgsVUFBQUEsR0FBRyxDQUFDaEIsTUFBSixDQUFXbUIsUUFBWCxHQUFzQmhCLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JZLEdBQUcsQ0FBQ2hCLE1BQUosQ0FBV21CLFFBQTdCLEVBQXVDbkIsTUFBTSxDQUFDbUIsUUFBOUMsQ0FBdEI7QUFDQXRCLFVBQUFBLE1BQU0sQ0FBQ3VCLEdBQVAsQ0FBVyxTQUFYLEVBQXVCLG9CQUFtQkosR0FBRyxDQUFDZixJQUFLLGlCQUFuRDtBQUNIO0FBQ0osT0FMRDtBQU9BLFVBQUlvQixZQUFZLEdBQUdyQyxJQUFJLENBQUNzQyxRQUFMLENBQWN6QixNQUFNLENBQUMwQixXQUFyQixFQUFrQ2hCLE9BQWxDLENBQW5CO0FBQ0FWLE1BQUFBLE1BQU0sQ0FBQ3VCLEdBQVAsQ0FBVyxTQUFYLEVBQXVCLGdCQUFlSixHQUFHLENBQUNmLElBQUssV0FBVW9CLFlBQWEsT0FBdEU7QUFFQSxZQUFNTCxHQUFHLENBQUNRLE1BQUosRUFBTjtBQUVBM0IsTUFBQUEsTUFBTSxDQUFDNEIsV0FBUCxDQUFtQlQsR0FBbkI7QUFFQW5CLE1BQUFBLE1BQU0sQ0FBQ3VCLEdBQVAsQ0FBVyxTQUFYLEVBQXVCLFFBQU9KLEdBQUcsQ0FBQ2YsSUFBSyxjQUF2QztBQUNILEtBdkNnQixDQUFqQjtBQXdDSDtBQXhEWSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIExvYWQgbGliIG1vZHVsZXNcbiAqIEBtb2R1bGUgRmVhdHVyZV9MaWJNb2R1bGVzXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiAgJ2xpYk1vZHVsZXMnOiB7XG4gKiAgICAgICc8bmFtZT4nOiB7XG4gKiAgICAgICAgICBucG1Nb2R1bGU6IGZhbHNlLCAvLyB3aGV0aGVyIGlzIGEgbnBtIG1vZHVsZVxuICogICAgICAgICAgb3B0aW9uczogeyAvLyBtb2R1bGUgb3B0aW9uc1xuICogICAgICAgICAgfSxcbiAqICAgICAgICAgIHNldHRpbmdzOiB7IC8vIGNhbiBvdmVycmlkZSBtb2R1bGUgZGVmaW5lZCBzZXR0aW5nc1xuICogICAgICAgICAgfVxuICogICAgICB9XG4gKiAgfVxuICovXG5cbmNvbnN0IHBhdGggPSByZXF1aXJlKFwicGF0aFwiKTtcbmNvbnN0IHsgXywgZnMsIGVhY2hBc3luY18gfSA9IHJlcXVpcmUoXCJyay11dGlsc1wiKTtcbmNvbnN0IEZlYXR1cmUgPSByZXF1aXJlKFwiLi4vZW51bS9GZWF0dXJlXCIpO1xuY29uc3QgeyBJbnZhbGlkQ29uZmlndXJhdGlvbiB9ID0gcmVxdWlyZShcIi4uL3V0aWxzL0Vycm9yc1wiKTtcbmNvbnN0IHsgdHJ5UmVxdWlyZSB9ID0gcmVxdWlyZSgnLi4vdXRpbHMvSGVscGVycycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAvKipcbiAgICAgKiBUaGlzIGZlYXR1cmUgaXMgbG9hZGVkIGF0IHBsdWdpbiBzdGFnZS5cbiAgICAgKiBAbWVtYmVyIHtzdHJpbmd9XG4gICAgICovXG4gICAgdHlwZTogRmVhdHVyZS5QTFVHSU4sXG5cbiAgICAvKipcbiAgICAgKiBMb2FkIHRoZSBmZWF0dXJlLlxuICAgICAqIEBwYXJhbSB7V2ViU2VydmVyfSBzZXJ2ZXIgLSBUaGUgd2ViIHNlcnZlciBtb2R1bGUgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBlbnRyaWVzIC0gTGliIG1vZHVsZSBlbnRyaWVzLlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlLjwqPn1cbiAgICAgKi9cbiAgICBsb2FkXzogYXN5bmMgKHNlcnZlciwgZW50cmllcykgPT4ge1xuICAgICAgICBjb25zdCB7IExpYk1vZHVsZSB9ID0gdHJ5UmVxdWlyZSgnQGdlbngvc2VydmVyJyk7XG5cbiAgICAgICAgcmV0dXJuIGVhY2hBc3luY18oZW50cmllcywgYXN5bmMgKGNvbmZpZywgbmFtZSkgPT4ge1xuICAgICAgICAgICAgbGV0IG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgZW52OiBzZXJ2ZXIuZW52LFxuICAgICAgICAgICAgICAgICAgICBsb2dXaXRoQXBwTmFtZTogc2VydmVyLm9wdGlvbnMubG9nV2l0aEFwcE5hbWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjb25maWcub3B0aW9uc1xuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgbGV0IGFwcFBhdGg7XG5cbiAgICAgICAgICAgIGlmIChjb25maWcubnBtTW9kdWxlKSB7XG4gICAgICAgICAgICAgICAgYXBwUGF0aCA9IHNlcnZlci50b0Fic29sdXRlUGF0aChcIm5vZGVfbW9kdWxlc1wiLCBuYW1lKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYXBwUGF0aCA9IHBhdGguam9pbihzZXJ2ZXIuYXBwTW9kdWxlc1BhdGgsIG5hbWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgZXhpc3RzID0gKGF3YWl0IGZzLnBhdGhFeGlzdHMoYXBwUGF0aCkpICYmIChhd2FpdCBmcy5zdGF0KGFwcFBhdGgpKS5pc0RpcmVjdG9yeSgpO1xuICAgICAgICAgICAgaWYgKCFleGlzdHMpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZENvbmZpZ3VyYXRpb24oYExpYiBbJHtuYW1lfV0gbm90IGV4aXN0cy5gLCBzZXJ2ZXIsIGBsaWJNb2R1bGVzLiR7bmFtZX1gKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGxpYiA9IG5ldyBMaWJNb2R1bGUoc2VydmVyLCBuYW1lLCBhcHBQYXRoLCBvcHRpb25zKTtcblxuICAgICAgICAgICAgbGliLm9uKFwiY29uZmlnTG9hZGVkXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIV8uaXNFbXB0eShjb25maWcuc2V0dGluZ3MpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpYi5jb25maWcuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBsaWIuY29uZmlnLnNldHRpbmdzLCBjb25maWcuc2V0dGluZ3MpO1xuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXIubG9nKFwidmVyYm9zZVwiLCBgTGliIHNldHRpbmdzIG9mIFske2xpYi5uYW1lfV0gaXMgb3ZlcnJpZGVkLmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBsZXQgcmVsYXRpdmVQYXRoID0gcGF0aC5yZWxhdGl2ZShzZXJ2ZXIud29ya2luZ1BhdGgsIGFwcFBhdGgpO1xuICAgICAgICAgICAgc2VydmVyLmxvZyhcInZlcmJvc2VcIiwgYExvYWRpbmcgbGliIFske2xpYi5uYW1lfV0gZnJvbSBcIiR7cmVsYXRpdmVQYXRofVwiIC4uLmApO1xuXG4gICAgICAgICAgICBhd2FpdCBsaWIuc3RhcnRfKCk7XG5cbiAgICAgICAgICAgIHNlcnZlci5yZWdpc3RlckxpYihsaWIpO1xuXG4gICAgICAgICAgICBzZXJ2ZXIubG9nKFwidmVyYm9zZVwiLCBgTGliIFske2xpYi5uYW1lfV0gaXMgbG9hZGVkLmApO1xuICAgICAgICB9KTtcbiAgICB9LFxufTtcbiJdfQ==