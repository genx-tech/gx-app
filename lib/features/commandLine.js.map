{"version":3,"sources":["../../src/features/commandLine.js"],"names":["path","require","Feature","_","pushIntoBucket","eachAsync_","ApplicationError","InvalidConfiguration","translateMinimistOptions","opts","m","forOwn","detail","name","bool","set","default","alias","optionDecorator","length","gArgv","process","argv","slice","CommandLineArgumentError","constructor","message","nonOption","CommandLine","app","usage","parse","options","injectUsage","injects","minimist","tryRequire","option","arg","args","index","findIndex","arguments","undefined","updateOption","value","each","a","valueOrFunctionCall_","functor","doFilter_","opt","argIndex","filter","argExist","inquire_","inquirer","doInquire_","item","prompt","then","answers","console","log","ans","assert","concat","prepareInquire_","argExists","inquire","type","q","promptMessage","desc","promptType","choicesProvider","choices","promptDefault","afterInquire","onArgumentExists","showArguments","isEmpty","argOpt","validate_","checkRequire_","required","errors","argNum","i","msg","showUsageOnError","push","showUsage","afterBanner","map","join","exit","processSilentModeArguments_","hasOwnProperty","silentModeDefault","getBanner","banner","getUsage","bannerShown","fmtArgs","program","basename","afterCommandLine","line","reduce","sum","toString","Array","isArray","forEach","choice","afterOptions","showBannar","module","exports","INIT","load_","usageOptions","commandLine","silentMode","nonValidationMode"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/**\n * Parse command line arguments using minimist and store the parsed object into app.argv, and add app.showUsage() helper function\n * @module Feature_CommandLine\n */\n\nconst path = require(\"path\");\nconst Feature = require(\"../enum/Feature\");\nconst { _, pushIntoBucket, eachAsync_ } = require(\"@genx/july\");\nconst { ApplicationError, InvalidConfiguration } = require(\"@genx/error\");\n\nfunction translateMinimistOptions(opts) {\n    let m = {};\n\n    _.forOwn(opts, (detail, name) => {\n        if (detail.bool) {\n            pushIntoBucket(m, \"boolean\", name);\n        } else {\n            pushIntoBucket(m, \"string\", name);\n        }\n\n        if (\"default\" in detail) {\n            _.set(m, `default.${name}`, detail.default);\n        }\n\n        if (detail.alias) {\n            _.set(m, `alias.${name}`, detail.alias);\n        }\n    });\n\n    return m;\n}\n\nfunction optionDecorator(name) {\n    return name.length == 1 ? \"-\" + name : \"--\" + name;\n}\n\nconst gArgv = process.argv.slice(2);\n\n/**\n * Error caused by command line arguments.\n * @class\n * @extends ApplicationError\n */\nclass CommandLineArgumentError extends ApplicationError {\n    /**\n     * @param {string} message - Error message\n     * @param {string} name - The related config item\n     * @param {boolean} nonOption - Whether it is an option\n     */\n    constructor(message, name, nonOption) {\n        super(message, \"E_CLI_INVALID_ARG\", { name, nonOption });\n    }\n}\n\n/**\n * Command line helper object.\n */\nclass CommandLine {\n    constructor(app, usage) {\n        this.app = app;\n        this.usage = usage;\n\n        this.parse(usage.options);\n    }\n\n    injectUsage(injects) {\n        this.injects = injects;\n    }\n\n    parse(options) {\n        const minimist = this.app.tryRequire(\"minimist\");\n        this.argv = minimist(gArgv, translateMinimistOptions(options));\n    }\n\n    option(name) {\n        return this.argv[name];\n    }\n\n    arg(name) {\n        if (this.args[name]) return this.args[name];\n\n        let index = _.findIndex(this.usage.arguments, (arg) => arg.name === name);\n\n        if (index === -1 || this.argv._.length <= index) {\n            return undefined;\n        }\n\n        this.args || (this.args = {});\n        return (this.args[name] = this.argv._[index]);\n    }\n\n    updateOption(name, value) {\n        this.argv[name] = value;\n        let opts = this.usage.options[name];\n        if (opts.alias) {\n            _.each(opts.alias, (a) => {\n                this.argv[a] = value;\n            });\n        }\n    }\n\n    async valueOrFunctionCall_(functor) {\n        if (typeof functor === \"function\") {\n            return await functor(this);\n        }\n\n        return functor;\n    }\n\n    async doFilter_(name, opt, argIndex) {\n        if (opt.filter) {\n            if (typeof argIndex === \"undefined\") {\n                if (!(typeof opt.filter !== \"function\")) {\n                    throw new InvalidConfiguration(\n                        `The \"filter\" in the inquirer option for argument option \"${name}\" should be a function!`,\n                        this.app,\n                        `commandLine.options[${name}].filter`\n                    );\n                }\n\n                this.updateOption(name, await opt.filter(this.argv[name], this));\n            } else {\n                if (!(typeof opt.filter !== \"function\")) {\n                    throw new InvalidConfiguration(\n                        `The \"filter\" in the inquirer option for argument value \"${name}\" at position ${argIndex} should be a function!`,\n                        this.app,\n                        `commandLine.arguments[${argIndex}].filter`\n                    );\n                }\n\n                this.argv._[argIndex] = await opt.filter(this.argv._[argIndex], this);\n            }\n        }\n    };\n\n    argExist(name, argIndex) {\n        return typeof argIndex === \"undefined\" ? name in this.argv : this.argv._.length > argIndex;\n    }\n\n    async inquire_() {\n        const inquirer = this.app.tryRequire(\"inquirer\");\n\n        const doInquire_ = (item, argIndex) =>\n            inquirer.prompt([item]).then((answers) => {\n                console.log();\n\n                _.forOwn(answers, (ans, name) => {\n                    if (typeof argIndex === \"undefined\") {\n                        this.updateOption(name, ans);\n                    } else {\n                        assert: this.argv._.length === argIndex;\n\n                        this.argv._ = this.argv._.concat([ans]);\n                    }\n                });\n            });\n\n        const prepareInquire_ = async (opts, name, argIndex) => {\n            let argExists = this.argExist(name, argIndex);\n\n            if (\"inquire\" in opts && !argExists) {\n                //need inquire and the value not given through command line\n                let inquire = this.valueOrFunctionCall_(opts.inquire);\n\n                if (inquire) {\n                    let type;\n                    let q = { name: name, message: opts.promptMessage || opts.desc };\n\n                    if (opts.promptType) {\n                        type = opts.promptType;\n                        if (type === \"list\" || type === \"rawList\" || type === \"checkbox\" || type === \"expand\") {\n                            if (!opts.choicesProvider) {\n                                throw new InvalidConfiguration(\n                                    typeof argIndex === \"undefined\"\n                                        ? `Missing \"choicesProvider\" in the inquirer option for argument option \"${name}\"!`\n                                        : `Missing \"choicesProvider\" in the inquirer option for argument value \"${name}\" at postion ${argIndex}!`,\n                                    app,\n                                    typeof argIndex === \"undefined\"\n                                        ? `commandLine.options[${name}].choicesProvider`\n                                        : `commandLine.arguments[${argIndex}].choicesProvider`\n                                );\n                            }\n\n                            q.choices = await this.valueOrFunctionCall_(opts.choicesProvider);\n                        }\n                    } else if (opts.bool) {\n                        type = \"confirm\";\n                    } else {\n                        type = \"input\";\n                    }\n\n                    q.type = type;\n\n                    if (\"promptDefault\" in opts) {\n                        q.default = await this.valueOrFunctionCall_(opts.promptDefault);\n                    }\n\n                    await doInquire_(q, argIndex);\n                    await this.doFilter_(name, opts, argIndex);\n\n                    if (opts.afterInquire) {\n                        await opts.afterInquire(this);\n                    }\n                }\n            } else if (argExists) {\n                await this.doFilter_(name, opts, argIndex);\n                if (opts.onArgumentExists) {\n                    await opts.onArgumentExists(this);\n                }\n            }\n\n            if ((await this.valueOrFunctionCall_(this.usage.showArguments)) && this.argExist(name, argIndex)) {\n                if (typeof argIndex === \"undefined\") {\n                    console.log(\"option\", name, `(${opts.desc})`, \":\", this.argv[name]);\n                } else {\n                    console.log(`<${name}>`, \":\", this.argv._[argIndex]);\n                }\n            }\n        };\n\n        if (!_.isEmpty(this.usage.arguments)) {\n            await eachAsync_(this.usage.arguments, async (argOpt, index) => {\n                let { name, ...opts } = argOpt;\n\n                return prepareInquire_(opts, name, index);\n            });\n        }\n\n        return (\n            _.isEmpty(this.usage.options) || eachAsync_(this.usage.options, (opts, name) => prepareInquire_(opts, name))\n        );\n    }\n\n    /**\n     * validate parsed and filled argument options.\n     */\n    async validate_() {\n        const checkRequire_ = (opts) => this.valueOrFunctionCall_(opts.required);\n\n        let errors = [];\n\n        if (!_.isEmpty(this.usage.arguments)) {\n            let argNum = this.argv._.length;\n\n            if (argNum < this.usage.arguments.length) {\n                let args = [];\n\n                let i = 0;\n\n                await eachAsync_(this.usage.arguments, async (arg) => {\n                    let required = await checkRequire_(arg);\n\n                    if (required) {\n                        if (i >= argNum) {\n                            let msg = `Missing required argument \"${arg.name}\"!`;\n\n                            if (this.usage.showUsageOnError) {\n                                errors.push(msg);\n                            } else {\n                                throw new CommandLineArgumentError(msg, arg.name, true);\n                            }\n                        } else {\n                            args.push(this.argv._[i++]);\n                        }\n                    }\n                });\n\n                this.argv._ = args;\n            }\n        }\n\n        this.usage.options &&\n            (await eachAsync_(this.usage.options, async (opts, name) => {\n                let required = await checkRequire_(opts);\n\n                if (required && !(name in this.argv)) {\n                    let msg = `Missing required argument option of \"${name}\"!`;\n\n                    if (this.usage.showUsageOnError) {\n                        errors.push(msg);\n                    } else {\n                        throw new CommandLineArgumentError(msg, name);\n                    }\n                }\n            }));\n\n        if (errors.length > 0) {\n            this.showUsage({\n                afterBanner: () => \"Error(s):\\n\" + errors.map((msg) => \" - \" + msg).join(\"\\n\") + \"\\n\\n\",\n            });\n\n            process.exit(1);\n        }\n    }\n\n    async processSilentModeArguments_() {\n        await eachAsync_(this.usage.arguments, async (arg, index) => {\n            if (this.argv._.length <= index) {\n                if (arg.hasOwnProperty(\"silentModeDefault\")) {\n                    for (let i = this.argv._.length; i < index; i++) {\n                        this.argv._.push(undefined);\n                    }\n\n                    this.argv._.push(await this.valueOrFunctionCall_(arg.silentModeDefault));\n                }\n            } else {\n                const { name, ...opts } = arg;\n                await this.doFilter_(name, opts, index);\n                if (opts.onArgumentExists) {\n                    await opts.onArgumentExists(this);\n                }\n            }\n        });\n\n        await eachAsync_(this.usage.options, async (opts, name) => {\n            if (this.argExist(name)) {\n                await this.doFilter_(name, opts);\n                if (opts.onArgumentExists) {\n                    await opts.onArgumentExists(this);\n                }\n            } else if (opts.hasOwnProperty(\"silentModeDefault\")) {\n                this.updateOption(name, await this.valueOrFunctionCall_(opts.silentModeDefault));\n            }\n        });\n    }\n\n    getBanner() {\n        if (this.usage.banner) {\n            let banner = \"\";\n\n            if (typeof this.usage.banner === \"function\") {\n                banner += this.usage.banner(this);\n            } else if (typeof this.usage.banner === \"string\") {\n                banner += this.usage.banner;\n            } else {\n                throw new InvalidConfiguration(\n                    \"Invalid banner value of commandLine feature.\",\n                    this.app,\n                    `commandLine.banner`\n                );\n            }\n\n            banner += \"\\n\";\n\n            return banner;\n        }\n\n        return undefined;\n    }\n\n    getUsage(injects) {\n        injects = { ...this.injects, ...injects };\n\n        let usage = \"\";\n\n        let banner = !this.bannerShown && this.getBanner();\n        if (banner) {\n            usage += banner + \"\\n\";\n        }\n\n        if (injects && injects.afterBanner) {\n            usage += injects.afterBanner();\n        }\n\n        let fmtArgs = \"\";\n        if (!_.isEmpty(this.usage.arguments)) {\n            fmtArgs =\n                \" \" + this.usage.arguments.map((arg) => (arg.required ? `<${arg.name}>` : `[${arg.name}]`)).join(\" \");\n        }\n\n        usage += `Usage: ${this.usage.program || path.basename(process.argv[1])}${fmtArgs} [options]\\n\\n`;\n\n        if (injects && injects.afterCommandLine) {\n            usage += injects.afterCommandLine();\n        }\n\n        if (!_.isEmpty(this.usage.options)) {\n            usage += `Options:\\n`;\n            _.forOwn(this.usage.options, (opts, name) => {\n                let line = \"  \" + optionDecorator(name);\n                if (opts.alias) {\n                    line += _.reduce(opts.alias, (sum, a) => sum + \", \" + optionDecorator(a), \"\");\n                }\n\n                line += \"\\n\";\n                line += \"    \" + opts.desc + \"\\n\";\n\n                if (\"default\" in opts) {\n                    line += \"    default: \" + opts.default.toString() + \"\\n\";\n                }\n\n                if (opts.required) {\n                    if (typeof opts.required === \"function\") {\n                        line += \"    conditional\\n\";\n                    } else {\n                        line += \"    required\\n\";\n                    }\n                }\n\n                if (opts.choicesProvider && Array.isArray(opts.choicesProvider)) {\n                    line += \"    available values:\\n\";\n                    opts.choicesProvider.forEach((choice) => {\n                        line += `        \"${choice.value}\": ${choice.name}\\n`;\n                    });\n                }\n\n                line += \"\\n\";\n\n                usage += line;\n            });\n        }\n\n        if (injects && injects.afterOptions) {\n            usage += injects.afterOptions();\n        }\n\n        return usage;\n    }\n\n    showBannar() {\n        let banner = this.getBanner();\n        if (banner) {\n            console.log(banner);\n            this.bannerShown = true;\n        }\n    }\n\n    showUsage(injects) {\n        console.log(this.getUsage(injects));\n    }\n}\n\nmodule.exports = {\n    /**\n     * This feature is loaded at initialization stage\n     * @member {string}\n     */\n    type: Feature.INIT,\n\n    /**\n     * Load the feature\n     * @param {App} app - The cli app module object\n     * @param {object} usageOptions - Options for the feature\n     * @property {string} [usageOptions.banner] - Banner message or banner generator function\n     * @property {string} [usageOptions.program] - Executable name\n     * @property {array} [usageOptions.arguments] - Command line arguments, identified by the position of appearance\n     * @property {object} [usageOptions.options] - Command line options\n     * @property {boolean|function} [usageOptions.silentMode] - Whether to run in silient mode, default false\n     * @property {boolean|function} [usageOptions.nonValidationMode] - Whether to run validation     \n     * @property {boolean} [usageOptions.showUsageOnError]\n     *\n     * @example\n     *   options: { [argumentKey]: {\n     *      desc, // {string} - description\n     *      alias, // {array.<string>} - alias array\n     *      bool, // {boolean} - whether it is a boolean value\n     *      default, // {*} - default value\n     *      inquire, // {boolean | function(cli).<boolean>} - whether to enable interactive query\n     *      promptMessage, // {string} - prompt message for query, will use desc if not set\n     *      promptType, // {string} - prompt type, can be one of [ input, number, confirm, list, rawlist, expand, checkbox, password, editor ]\n     *      promptDefault, // {* | function(cli).<*>} - default value appeared on query or a async function to return the default value\n     *      choicesProvider, // {array | function(cli).<array> | function.<function(string).<array>>} - required for prompt type list, rawlist, expand, checkbox\n     *      filter, // {function(argv, cli).<argv>} - filter to process the argument value\n     *      afterInquire, // {function} - after inquire hook,\n     *      onArgumentExists, // {function} - when argument exists,\n     *      silentModeDefault // {*} - default value when run in silient mode,\n     *   } }\n     *\n     * @returns {Promise.<*>}\n     */\n    load_: async (app, usageOptions) => {\n        app.commandLine = new CommandLine(app, usageOptions);\n\n        let silentMode = usageOptions.silentMode;\n\n        if (silentMode && typeof silentMode === \"function\") {\n            silentMode = silentMode(app.commandLine);\n        }\n\n        app.commandLine.silentMode = silentMode;\n\n        if (silentMode) {\n            await app.commandLine.processSilentModeArguments_();\n        } else {\n            app.commandLine.showBannar();\n            await app.commandLine.inquire_();\n        }\n\n        let nonValidationMode = usageOptions.nonValidationMode;\n\n        if (nonValidationMode && typeof nonValidationMode === \"function\") {\n            nonValidationMode = nonValidationMode(app.commandLine);\n        }\n\n        app.commandLine.nonValidationMode = nonValidationMode;\n\n        if (!nonValidationMode) {\n            await app.commandLine.validate_();\n        }\n    },\n};\n"],"file":"commandLine.js"}