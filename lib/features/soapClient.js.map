{"version":3,"sources":["../../src/features/soapClient.js"],"names":["_","waitUntil_","require","Feature","ensureFeatureName","SoapClient","constructor","app","config","soap","tryRequire","createClientAsync","wsdlUrl","then","client","_client","catch","error","logError","_waitForClientReady_","createClientTimeout","maxRound","listMethods_","desc","describe","methods","mapValues","svc","ms","Object","keys","call_","method","args","result","rawResponse","soapHeader","rawRequest","module","exports","type","SERVICE","groupable","load_","settings","name","registerService"],"mappings":"AAAA,MAAM;AAAEA,EAAAA,CAAF;AAAKC,EAAAA;AAAL,IAAoBC,OAAO,CAAC,YAAD,CAAjC;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,iBAAD,CAAvB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAwBF,OAAO,CAAC,kBAAD,CAArC;AAEA;AACA;AACA;AACA;;;AAEA,MAAMG,UAAN,CAAiB;AACbC,EAAAA,WAAW,CAACC,GAAD,EAAMC,MAAN,EAAc;AACrB,SAAKD,GAAL,GAAWA,GAAX;AACA,SAAKC,MAAL,GAAcA,MAAd;AAEA,UAAMC,IAAI,GAAGF,GAAG,CAACG,UAAJ,CAAe,MAAf,CAAb;AAEAD,IAAAA,IAAI,CAACE,iBAAL,CAAuBH,MAAM,CAACI,OAA9B,EAAuCC,IAAvC,CAA4CC,MAAM,IAAI;AAClD,WAAKC,OAAL,GAAeD,MAAf;AACH,KAFD,EAEGE,KAFH,CAESC,KAAK,IAAI;AACd,WAAKV,GAAL,CAASW,QAAT,CAAkBD,KAAlB;AACH,KAJD;AAKH;;AAEyB,QAApBE,oBAAoB,GAAG;AACzB,QAAI,KAAKJ,OAAT,EAAkB,OAAO,KAAKA,OAAZ;AAElB,QAAIK,mBAAmB,GAAG,KAAKZ,MAAL,CAAYY,mBAAZ,IAAmC,KAA7D,CAHyB,CAG2C;;AACpE,QAAIC,QAAQ,GAAGD,mBAAmB,GAAG,GAArC;AAEA,WAAOnB,UAAU,CAAC,MAAM,KAAKc,OAAZ,EAAqB,GAArB,EAA0BM,QAA1B,CAAjB;AACH;;AAEiB,QAAZC,YAAY,GAAG;AACjB,QAAIR,MAAM,GAAG,MAAM,KAAKK,oBAAL,EAAnB;AAEA,QAAII,IAAI,GAAGT,MAAM,CAACU,QAAP,EAAX;;AAEA,QAAIC,OAAO,GAAGzB,CAAC,CAAC0B,SAAF,CAAYH,IAAZ,EAAkBI,GAAG,IAAI3B,CAAC,CAAC0B,SAAF,CAAYC,GAAZ,EAAiBC,EAAE,IAAIC,MAAM,CAACC,IAAP,CAAYF,EAAZ,CAAvB,CAAzB,CAAd;;AAEA,WAAOH,OAAP;AACH;;AAEU,QAALM,KAAK,CAACC,MAAD,EAASC,IAAT,EAAe;AACtB,QAAInB,MAAM,GAAG,MAAM,KAAKK,oBAAL,EAAnB;AAEA,QAAI,CAACe,MAAD,EAASC,WAAT,EAAsBC,UAAtB,EAAkCC,UAAlC,IAAgD,MAAMvB,MAAM,CAACkB,MAAM,GAAG,OAAV,CAAN,CAAyBC,IAAzB,CAA1D;AAEA,WAAOC,MAAP;AACH;;AAvCY;;AA0CjBI,MAAM,CAACC,OAAP,GAAiB;AAEb;AACJ;AACA;AACA;AACIC,EAAAA,IAAI,EAAErC,OAAO,CAACsC,OAND;;AAQb;AACJ;AACA;AACA;AACIC,EAAAA,SAAS,EAAE,IAZE;;AAcb;AACJ;AACA;AACA;AACA;AACA;AACIC,EAAAA,KAAK,EAAE,gBAAgBpC,GAAhB,EAAqBqC,QAArB,EAA+BC,IAA/B,EAAqC;AACxCzC,IAAAA,iBAAiB,CAACyC,IAAD,CAAjB;AAEA,QAAI/B,MAAM,GAAG,IAAIT,UAAJ,CAAeE,GAAf,EAAoBqC,QAApB,CAAb;AAEArC,IAAAA,GAAG,CAACuC,eAAJ,CAAoBD,IAApB,EAA0B/B,MAA1B;AACH;AA1BY,CAAjB","sourcesContent":["const { _, waitUntil_ } = require('@genx/july');\nconst Feature = require('../enum/Feature');\nconst { ensureFeatureName } = require(\"../utils/Helpers\");\n\n/**\n * Enable a named soap client\n * @module Feature_SoapClient\n */\n\nclass SoapClient {\n    constructor(app, config) {\n        this.app = app;\n        this.config = config;\n\n        const soap = app.tryRequire('soap');\n\n        soap.createClientAsync(config.wsdlUrl).then(client => {\n            this._client = client;\n        }).catch(error => {\n            this.app.logError(error);\n        });        \n    }    \n\n    async _waitForClientReady_() {\n        if (this._client) return this._client;\n\n        let createClientTimeout = this.config.createClientTimeout || 10000; // 10s\n        let maxRound = createClientTimeout / 100;\n\n        return waitUntil_(() => this._client, 100, maxRound);\n    }\n\n    async listMethods_() {\n        let client = await this._waitForClientReady_();\n\n        let desc = client.describe();\n\n        let methods = _.mapValues(desc, svc => _.mapValues(svc, ms => Object.keys(ms)));         \n        \n        return methods;\n    }\n\n    async call_(method, args) {\n        let client = await this._waitForClientReady_();\n\n        let [result, rawResponse, soapHeader, rawRequest] = await client[method + 'Async'](args);\n\n        return result;\n    }\n}\n\nmodule.exports = {\n\n    /**\n     * This feature is loaded at init stage\n     * @member {string}\n     */\n    type: Feature.SERVICE,\n\n    /**\n     * This feature can be grouped by serviceGroup\n     * @member {boolean}\n     */\n    groupable: true,\n\n    /**\n     * Load the feature\n     * @param {App} app - The cli app module object\n     * @param {object} settings - Settings of soal client   \n     * @returns {Promise.<*>}\n     */\n    load_: async function (app, settings, name) {\n        ensureFeatureName(name);\n\n        let client = new SoapClient(app, settings);\n\n        app.registerService(name, client);\n    }\n};"],"file":"soapClient.js"}