{"version":3,"sources":["../../src/features/bootstrap.js"],"names":["path","require","Feature","Literal","eachAsync_","glob","module","exports","type","PLUGIN","load_","app","options","bootPath","toAbsolutePath","join","workingPath","DEFAULT_BOOTSTRAP_PATH","bp","files","nodir","file","bootstrap"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,iBAAD,CAAvB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,iBAAD,CAAvB;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAiBH,OAAO,CAAC,YAAD,CAA9B;;AACA,MAAM;AAAEI,EAAAA;AAAF,IAAWJ,OAAO,CAAC,WAAD,CAAxB;;AAEAK,MAAM,CAACC,OAAP,GAAiB;AACb;AACJ;AACA;AACA;AACIC,EAAAA,IAAI,EAAEN,OAAO,CAACO,MALD;;AAOb;AACJ;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,KAAK,EAAE,gBAAgBC,GAAhB,EAAqBC,OAArB,EAA8B;AACjC,QAAIC,QAAQ,GAAGD,OAAO,CAACZ,IAAR,GACTW,GAAG,CAACG,cAAJ,CAAmBF,OAAO,CAACZ,IAA3B,CADS,GAETA,IAAI,CAACe,IAAL,CAAUJ,GAAG,CAACK,WAAd,EAA2Bb,OAAO,CAACc,sBAAnC,CAFN;AAIA,QAAIC,EAAE,GAAGlB,IAAI,CAACe,IAAL,CAAUF,QAAV,EAAoB,IAApB,EAA0B,MAA1B,CAAT;AAEA,QAAIM,KAAK,GAAG,MAAMd,IAAI,CAACa,EAAD,EAAK;AAAEE,MAAAA,KAAK,EAAE;AAAT,KAAL,CAAtB;AAEA,WAAOhB,UAAU,CAACe,KAAD,EAAQ,MAAOE,IAAP,IAAgB;AACrC,UAAIC,SAAS,GAAGrB,OAAO,CAACoB,IAAD,CAAvB;;AACA,aAAOC,SAAS,CAACX,GAAD,CAAhB;AACH,KAHgB,CAAjB;AAIH;AA3BY,CAAjB","sourcesContent":["\"use strict\";\n\n/**\n * Enable bootstrap scripts\n * @module Feature_Bootstrap\n */\n\nconst path = require(\"path\");\nconst Feature = require(\"../enum/Feature\");\nconst Literal = require(\"../enum/Literal\");\nconst { eachAsync_ } = require(\"@genx/july\");\nconst { glob } = require(\"@genx/sys\");\n\nmodule.exports = {\n    /**\n     * This feature is loaded at plugin stage\n     * @member {string}\n     */\n    type: Feature.PLUGIN,\n\n    /**\n     * Load the feature\n     * @param {App} app - The cli app module object\n     * @param {object} options - Options for the feature\n     * @property {string} [options.path='bootstrap'] - The path of the bootstrap scripts\n     * @returns {Promise.<*>}\n     */\n    load_: async function (app, options) {\n        let bootPath = options.path\n            ? app.toAbsolutePath(options.path)\n            : path.join(app.workingPath, Literal.DEFAULT_BOOTSTRAP_PATH);\n\n        let bp = path.join(bootPath, \"**\", \"*.js\");\n\n        let files = await glob(bp, { nodir: true });\n\n        return eachAsync_(files, async (file) => {\n            let bootstrap = require(file);\n            return bootstrap(app);\n        });\n    },\n};\n"],"file":"bootstrap.js"}