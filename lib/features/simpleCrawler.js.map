{"version":3,"sources":["../../src/features/simpleCrawler.js"],"names":["Feature","require","ensureFeatureName","basicAuth","req","authInfo","auth","username","password","bearerAuth","set","SimpleCrawler","constructor","app","settings","agent","tryRequire","saveCookies","timeout","response","deadline","responseTimeout","deadlineTimeout","parser","_afterReceive","text","load","_beforeSend","_sendRequest_","buffer","res","error","onErrorHandler","status","body","message","get_","url","query","get","post_","post","send","module","exports","type","SERVICE","groupable","load_","name","client","registerService"],"mappings":"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","sourcesContent":["const Feature = require('../enum/Feature');\nconst { ensureFeatureName } = require(\"../utils/Helpers\");\n\nconst basicAuth = (req, authInfo) => {\n    req.auth(authInfo.username, authInfo.password);\n}\n\nconst bearerAuth = (req, authInfo) => {\n    req.set('Authorization', `Bearer ${authInfo}`);\n}\n\nclass SimpleCrawler {\n    constructor(app, settings) {\n        this.agent = app.tryRequire('superagent');\n\n        if (settings.saveCookies) {\n            this.agent = this.agent.agent(); // create a separate cookie jar\n        }\n\n        //timeout\n        let timeout = {\n            response: 5000, // Wait 5 seconds for the server to start sending,\n            deadline: 60000 // but allow 1 minute for the file to finish loading.\n        };\n\n        if (settings.responseTimeout) {\n            timeout.response = settings.responseTimeout;\n        }\n\n        if (settings.deadlineTimeout) {\n            timeout.deadline = settings.deadlineTimeout;\n        }\n\n        if (settings.parser) {\n            if (settings.parser === 'cheerio') {\n                let parser = app.tryRequire('cheerio');\n                this._afterReceive = (text) => {\n                    return parser.load(text);\n                };\n            } \n        } \n\n        this._beforeSend = (req) => {\n            //timeout\n            req.timeout(timeout);\n\n            //auth\n            if (settings.basicAuth) {\n                basicAuth(req, settings.basicAuth);\n            } else if (settings.bearerAuth) {\n                bearerAuth(req, settings.bearerAuth);\n            }      \n        };         \n    }\n\n    async _sendRequest_(req) {\n        this._beforeSend(req);\n\n        req.buffer(true);\n\n        try {\n            let res = await req;\n            return this._afterReceive ? this._afterReceive(res.text) : res.text;\n        } catch (error) {\n            if (this.onErrorHandler) {\n                await this.onErrorHandler(error);\n            }\n\n            if (error.response) {\n                let { status, body, text } = error.response;\n\n                let message = (body && body.error) || (error.response.error && error.response.error.message) || text;\n                error.message = message;                \n                error.status = status;\n            }\n\n            throw error;\n        }\n    }\n\n    async get_(url, query) {\n        let req = this.agent.get(url);\n\n        if (query) {\n            req.query(query);\n        }\n\n        return this._sendRequest_(req);\n    }\n\n    async post_(url, query, body) {\n        let req = this.agent.post(url);\n        if (query) {\n            req.query(query);\n        }\n\n        if (body) {\n            req.send(body);            \n        }\n\n        return this._sendRequest_(req);\n    }\n}\n\nmodule.exports = {\n\n    /**\n     * This feature is loaded at plugin stage\n     * @member {string}\n     */\n    type: Feature.SERVICE,\n\n    /**\n     * This feature can be grouped by serviceGroup\n     * @member {boolean}\n     */\n     groupable: true,\n\n    /**\n     * Load the feature\n     * @param {App} app - The cli app module object\n     * @param {object} settings - Settings of simple crawler\n     * @property {boolean} [settings.saveCookies] - Flag of save cookies or not\n     * @property {object} [settings.basicAuth] - Basic authentication\n     * @property {string} [settings.bearerAuth] - Bearer authentication\n     * @property {number} [settings.responseTimeout] - Sets maximum time (ms) to wait for the first byte to arrive from the server, but it does not limit how long the entire download can take.\n     * @property {number} [settings.deadlineTimeout] - Sets a deadline (ms) for the entire request (including all uploads, redirects, server processing time) to complete.\n     * \n     * @returns {Promise.<*>}\n     */\n    load_: async function (app, settings, name) {\n        ensureFeatureName(name);\n\n        let client = new SimpleCrawler(app, settings);\n\n        app.registerService(name, client);    \n    }\n};"],"file":"simpleCrawler.js"}