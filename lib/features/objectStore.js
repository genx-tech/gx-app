"use strict";

require("source-map-support/register");

const {
  _
} = require('@genx/july');

const Feature = require('../enum/Feature');

class Store {
  constructor(app) {
    this._app = app;
    this._store = new Map();
    this._factory = {};
  }

  registerFactory(name, factory) {
    this._factory[name] = factory;
  }

  createAndStore(name) {
    if (this._store.has(name)) {
      throw new Error(`"${name}" already in store and don't need to create another.`);
    }

    let factory = this._factory[name];

    if (!factory || typeof factory !== 'function') {
      throw new Error(`Factroy for making "${name}" not found or invalid!`);
    }

    let obj = factory(this._app);

    this._store.set(name, obj);

    return obj;
  }

  ensureOne(name) {
    return this._store.get(name) || this.createAndStore(name);
  }

}

module.exports = {
  type: Feature.PLUGIN,
  load_: (app, factories) => {
    let store = new Store(app);

    _.forOwn(factories, (factory, name) => {
      store.registerFactory(name, factory);
    });

    app.store = store;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWF0dXJlcy9vYmplY3RTdG9yZS5qcyJdLCJuYW1lcyI6WyJfIiwicmVxdWlyZSIsIkZlYXR1cmUiLCJTdG9yZSIsImNvbnN0cnVjdG9yIiwiYXBwIiwiX2FwcCIsIl9zdG9yZSIsIk1hcCIsIl9mYWN0b3J5IiwicmVnaXN0ZXJGYWN0b3J5IiwibmFtZSIsImZhY3RvcnkiLCJjcmVhdGVBbmRTdG9yZSIsImhhcyIsIkVycm9yIiwib2JqIiwic2V0IiwiZW5zdXJlT25lIiwiZ2V0IiwibW9kdWxlIiwiZXhwb3J0cyIsInR5cGUiLCJQTFVHSU4iLCJsb2FkXyIsImZhY3RvcmllcyIsInN0b3JlIiwiZm9yT3duIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQU9BLE1BQU07QUFBRUEsRUFBQUE7QUFBRixJQUFRQyxPQUFPLENBQUMsWUFBRCxDQUFyQjs7QUFDQSxNQUFNQyxPQUFPLEdBQUdELE9BQU8sQ0FBQyxpQkFBRCxDQUF2Qjs7QUFFQSxNQUFNRSxLQUFOLENBQVk7QUFDUkMsRUFBQUEsV0FBVyxDQUFDQyxHQUFELEVBQU07QUFDYixTQUFLQyxJQUFMLEdBQVlELEdBQVo7QUFDQSxTQUFLRSxNQUFMLEdBQWMsSUFBSUMsR0FBSixFQUFkO0FBQ0EsU0FBS0MsUUFBTCxHQUFnQixFQUFoQjtBQUNIOztBQUVEQyxFQUFBQSxlQUFlLENBQUNDLElBQUQsRUFBT0MsT0FBUCxFQUFnQjtBQUMzQixTQUFLSCxRQUFMLENBQWNFLElBQWQsSUFBc0JDLE9BQXRCO0FBQ0g7O0FBRURDLEVBQUFBLGNBQWMsQ0FBQ0YsSUFBRCxFQUFPO0FBQ2pCLFFBQUksS0FBS0osTUFBTCxDQUFZTyxHQUFaLENBQWdCSCxJQUFoQixDQUFKLEVBQTJCO0FBQ3ZCLFlBQU0sSUFBSUksS0FBSixDQUFXLElBQUdKLElBQUssc0RBQW5CLENBQU47QUFDSDs7QUFFRCxRQUFJQyxPQUFPLEdBQUcsS0FBS0gsUUFBTCxDQUFjRSxJQUFkLENBQWQ7O0FBQ0EsUUFBSSxDQUFDQyxPQUFELElBQVksT0FBT0EsT0FBUCxLQUFtQixVQUFuQyxFQUErQztBQUMzQyxZQUFNLElBQUlHLEtBQUosQ0FBVyx1QkFBc0JKLElBQUsseUJBQXRDLENBQU47QUFDSDs7QUFFRCxRQUFJSyxHQUFHLEdBQUdKLE9BQU8sQ0FBQyxLQUFLTixJQUFOLENBQWpCOztBQUNBLFNBQUtDLE1BQUwsQ0FBWVUsR0FBWixDQUFnQk4sSUFBaEIsRUFBc0JLLEdBQXRCOztBQUNBLFdBQU9BLEdBQVA7QUFDSDs7QUFFREUsRUFBQUEsU0FBUyxDQUFDUCxJQUFELEVBQU87QUFDWixXQUFPLEtBQUtKLE1BQUwsQ0FBWVksR0FBWixDQUFnQlIsSUFBaEIsS0FBeUIsS0FBS0UsY0FBTCxDQUFvQkYsSUFBcEIsQ0FBaEM7QUFDSDs7QUE1Qk87O0FBK0JaUyxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFNYkMsRUFBQUEsSUFBSSxFQUFFcEIsT0FBTyxDQUFDcUIsTUFORDtBQWNiQyxFQUFBQSxLQUFLLEVBQUUsQ0FBQ25CLEdBQUQsRUFBTW9CLFNBQU4sS0FBb0I7QUFDdkIsUUFBSUMsS0FBSyxHQUFHLElBQUl2QixLQUFKLENBQVVFLEdBQVYsQ0FBWjs7QUFFQUwsSUFBQUEsQ0FBQyxDQUFDMkIsTUFBRixDQUFTRixTQUFULEVBQW9CLENBQUNiLE9BQUQsRUFBVUQsSUFBVixLQUFtQjtBQUNuQ2UsTUFBQUEsS0FBSyxDQUFDaEIsZUFBTixDQUFzQkMsSUFBdEIsRUFBNEJDLE9BQTVCO0FBQ0gsS0FGRDs7QUFJQVAsSUFBQUEsR0FBRyxDQUFDcUIsS0FBSixHQUFZQSxLQUFaO0FBQ0g7QUF0QlksQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBFbmFibGUgb2JqZWN0IHN0b3JlIGZlYXR1cmVcbiAqIEBtb2R1bGUgRmVhdHVyZV9PYmplY3RTdG9yZVxuICovXG5cbmNvbnN0IHsgXyB9ID0gcmVxdWlyZSgnQGdlbngvanVseScpO1xuY29uc3QgRmVhdHVyZSA9IHJlcXVpcmUoJy4uL2VudW0vRmVhdHVyZScpO1xuXG5jbGFzcyBTdG9yZSB7XG4gICAgY29uc3RydWN0b3IoYXBwKSB7XG4gICAgICAgIHRoaXMuX2FwcCA9IGFwcDtcbiAgICAgICAgdGhpcy5fc3RvcmUgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuX2ZhY3RvcnkgPSB7fTtcbiAgICB9XG5cbiAgICByZWdpc3RlckZhY3RvcnkobmFtZSwgZmFjdG9yeSkge1xuICAgICAgICB0aGlzLl9mYWN0b3J5W25hbWVdID0gZmFjdG9yeTtcbiAgICB9XG5cbiAgICBjcmVhdGVBbmRTdG9yZShuYW1lKSB7XG4gICAgICAgIGlmICh0aGlzLl9zdG9yZS5oYXMobmFtZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgXCIke25hbWV9XCIgYWxyZWFkeSBpbiBzdG9yZSBhbmQgZG9uJ3QgbmVlZCB0byBjcmVhdGUgYW5vdGhlci5gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBmYWN0b3J5ID0gdGhpcy5fZmFjdG9yeVtuYW1lXTsgICAgICBcbiAgICAgICAgaWYgKCFmYWN0b3J5IHx8IHR5cGVvZiBmYWN0b3J5ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhY3Ryb3kgZm9yIG1ha2luZyBcIiR7bmFtZX1cIiBub3QgZm91bmQgb3IgaW52YWxpZCFgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBvYmogPSBmYWN0b3J5KHRoaXMuX2FwcCk7XG4gICAgICAgIHRoaXMuX3N0b3JlLnNldChuYW1lLCBvYmopO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH1cblxuICAgIGVuc3VyZU9uZShuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdG9yZS5nZXQobmFtZSkgfHwgdGhpcy5jcmVhdGVBbmRTdG9yZShuYW1lKTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBmZWF0dXJlIGlzIGxvYWRlZCBhdCBwbHVnLWluIHN0YWdlXG4gICAgICogQG1lbWJlciB7c3RyaW5nfVxuICAgICAqL1xuICAgIHR5cGU6IEZlYXR1cmUuUExVR0lOLFxuXG4gICAgLyoqXG4gICAgICogTG9hZCB0aGUgZmVhdHVyZVxuICAgICAqIEBwYXJhbSB7QXBwfSBhcHAgLSBUaGUgYXBwIG1vZHVsZSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gZmFjdG9yaWVzIC0gT2JqZWN0IGZhY3Rvcmllc1xuICAgICAqIEByZXR1cm5zIHtQcm9taXNlLjwqPn1cbiAgICAgKi9cbiAgICBsb2FkXzogKGFwcCwgZmFjdG9yaWVzKSA9PiB7XG4gICAgICAgIGxldCBzdG9yZSA9IG5ldyBTdG9yZShhcHApO1xuXG4gICAgICAgIF8uZm9yT3duKGZhY3RvcmllcywgKGZhY3RvcnksIG5hbWUpID0+IHtcbiAgICAgICAgICAgIHN0b3JlLnJlZ2lzdGVyRmFjdG9yeShuYW1lLCBmYWN0b3J5KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYXBwLnN0b3JlID0gc3RvcmU7XG4gICAgfVxufTsiXX0=