"use strict";

require("source-map-support/register");

const path = require('path');

const {
  _,
  Promise,
  pascalCase
} = require('rk-utils');

const Feature = require('../enum/Feature');

const Literal = require('../enum/Literal');

const DbCache = {};
module.exports = {
  type: Feature.INIT,
  load_: async (app, oolong) => {
    app.oolong = oolong;

    if (!oolong.schemaDeployment) {
      throw new Error('Missing "schemaDeployment" in oolong config.');
    }

    app.db = schemaName => {
      if (DbCache[schemaName]) return DbCache[schemaName];
      let schemaInfo = oolong.schemaDeployment[schemaName];

      if (!schemaInfo || !schemaInfo.dataSource) {
        throw new Error('Missing "dataSource" in schemaDeployment section of oolong config.');
      }

      let connector = app.getService(schemaInfo.dataSource);

      if (!connector) {
        throw new Error('Invalid data source.');
      }

      let i18n = app.getService('i18n') || app.__;

      let modelPath;

      if (oolong.modelDir) {
        modelPath = app.toAbsolutePath(oolong.modelDir);
      } else if (app.backendPath) {
        modelPath = path.join(app.backendPath, Literal.MODELS_PATH);
      } else {
        modelPath = app.toAbsolutePath(Literal.MODELS_PATH);
      }

      const Db = require(path.join(modelPath, pascalCase(schemaName)));

      let db = new Db(connector, i18n);
      db.app = app;
      DbCache[schemaName] = db;
      return db;
    };

    app.model = modelFullName => {
      let [schemaName, modelName] = modelFullName.split('.');
      return app.db(schemaName).model(modelName);
    };
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWF0dXJlcy9vb2xvbmcuanMiXSwibmFtZXMiOlsicGF0aCIsInJlcXVpcmUiLCJfIiwiUHJvbWlzZSIsInBhc2NhbENhc2UiLCJGZWF0dXJlIiwiTGl0ZXJhbCIsIkRiQ2FjaGUiLCJtb2R1bGUiLCJleHBvcnRzIiwidHlwZSIsIklOSVQiLCJsb2FkXyIsImFwcCIsIm9vbG9uZyIsInNjaGVtYURlcGxveW1lbnQiLCJFcnJvciIsImRiIiwic2NoZW1hTmFtZSIsInNjaGVtYUluZm8iLCJkYXRhU291cmNlIiwiY29ubmVjdG9yIiwiZ2V0U2VydmljZSIsImkxOG4iLCJfXyIsIm1vZGVsUGF0aCIsIm1vZGVsRGlyIiwidG9BYnNvbHV0ZVBhdGgiLCJiYWNrZW5kUGF0aCIsImpvaW4iLCJNT0RFTFNfUEFUSCIsIkRiIiwibW9kZWwiLCJtb2RlbEZ1bGxOYW1lIiwibW9kZWxOYW1lIiwic3BsaXQiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBT0EsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBLENBQUY7QUFBS0MsRUFBQUEsT0FBTDtBQUFjQyxFQUFBQTtBQUFkLElBQTZCSCxPQUFPLENBQUMsVUFBRCxDQUExQzs7QUFDQSxNQUFNSSxPQUFPLEdBQUdKLE9BQU8sQ0FBQyxpQkFBRCxDQUF2Qjs7QUFDQSxNQUFNSyxPQUFPLEdBQUdMLE9BQU8sQ0FBQyxpQkFBRCxDQUF2Qjs7QUFFQSxNQUFNTSxPQUFPLEdBQUcsRUFBaEI7QUFFQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBS2JDLEVBQUFBLElBQUksRUFBRUwsT0FBTyxDQUFDTSxJQUxEO0FBY2JDLEVBQUFBLEtBQUssRUFBRSxPQUFPQyxHQUFQLEVBQVlDLE1BQVosS0FBdUI7QUFDMUJELElBQUFBLEdBQUcsQ0FBQ0MsTUFBSixHQUFhQSxNQUFiOztBQUVBLFFBQUksQ0FBQ0EsTUFBTSxDQUFDQyxnQkFBWixFQUE4QjtBQUMxQixZQUFNLElBQUlDLEtBQUosQ0FBVSw4Q0FBVixDQUFOO0FBQ0g7O0FBRURILElBQUFBLEdBQUcsQ0FBQ0ksRUFBSixHQUFVQyxVQUFELElBQWdCO0FBQ3JCLFVBQUlYLE9BQU8sQ0FBQ1csVUFBRCxDQUFYLEVBQXlCLE9BQU9YLE9BQU8sQ0FBQ1csVUFBRCxDQUFkO0FBRXpCLFVBQUlDLFVBQVUsR0FBR0wsTUFBTSxDQUFDQyxnQkFBUCxDQUF3QkcsVUFBeEIsQ0FBakI7O0FBQ0EsVUFBSSxDQUFDQyxVQUFELElBQWUsQ0FBQ0EsVUFBVSxDQUFDQyxVQUEvQixFQUEyQztBQUV2QyxjQUFNLElBQUlKLEtBQUosQ0FBVSxvRUFBVixDQUFOO0FBQ0g7O0FBRUQsVUFBSUssU0FBUyxHQUFHUixHQUFHLENBQUNTLFVBQUosQ0FBZUgsVUFBVSxDQUFDQyxVQUExQixDQUFoQjs7QUFDQSxVQUFJLENBQUNDLFNBQUwsRUFBZ0I7QUFDWixjQUFNLElBQUlMLEtBQUosQ0FBVSxzQkFBVixDQUFOO0FBQ0g7O0FBRUQsVUFBSU8sSUFBSSxHQUFHVixHQUFHLENBQUNTLFVBQUosQ0FBZSxNQUFmLEtBQTBCVCxHQUFHLENBQUNXLEVBQXpDOztBQUVBLFVBQUlDLFNBQUo7O0FBRUEsVUFBSVgsTUFBTSxDQUFDWSxRQUFYLEVBQXFCO0FBQ2pCRCxRQUFBQSxTQUFTLEdBQUdaLEdBQUcsQ0FBQ2MsY0FBSixDQUFtQmIsTUFBTSxDQUFDWSxRQUExQixDQUFaO0FBQ0gsT0FGRCxNQUVPLElBQUliLEdBQUcsQ0FBQ2UsV0FBUixFQUFxQjtBQUN4QkgsUUFBQUEsU0FBUyxHQUFHekIsSUFBSSxDQUFDNkIsSUFBTCxDQUFVaEIsR0FBRyxDQUFDZSxXQUFkLEVBQTJCdEIsT0FBTyxDQUFDd0IsV0FBbkMsQ0FBWjtBQUNILE9BRk0sTUFFQTtBQUNITCxRQUFBQSxTQUFTLEdBQUdaLEdBQUcsQ0FBQ2MsY0FBSixDQUFtQnJCLE9BQU8sQ0FBQ3dCLFdBQTNCLENBQVo7QUFDSDs7QUFFRCxZQUFNQyxFQUFFLEdBQUc5QixPQUFPLENBQUNELElBQUksQ0FBQzZCLElBQUwsQ0FBVUosU0FBVixFQUFxQnJCLFVBQVUsQ0FBQ2MsVUFBRCxDQUEvQixDQUFELENBQWxCOztBQUNBLFVBQUlELEVBQUUsR0FBRyxJQUFJYyxFQUFKLENBQU9WLFNBQVAsRUFBa0JFLElBQWxCLENBQVQ7QUFDQU4sTUFBQUEsRUFBRSxDQUFDSixHQUFILEdBQVNBLEdBQVQ7QUFFQU4sTUFBQUEsT0FBTyxDQUFDVyxVQUFELENBQVAsR0FBc0JELEVBQXRCO0FBRUEsYUFBT0EsRUFBUDtBQUNILEtBakNEOztBQW1DQUosSUFBQUEsR0FBRyxDQUFDbUIsS0FBSixHQUFhQyxhQUFELElBQW1CO0FBQzNCLFVBQUksQ0FBRWYsVUFBRixFQUFjZ0IsU0FBZCxJQUE0QkQsYUFBYSxDQUFDRSxLQUFkLENBQW9CLEdBQXBCLENBQWhDO0FBQ0EsYUFBT3RCLEdBQUcsQ0FBQ0ksRUFBSixDQUFPQyxVQUFQLEVBQW1CYyxLQUFuQixDQUF5QkUsU0FBekIsQ0FBUDtBQUNILEtBSEQ7QUFJSDtBQTVEWSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEVuYWJsZSBvb2xvbmcgRFNMXG4gKiBAbW9kdWxlIEZlYXR1cmVfT29sb25nXG4gKi9cblxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IHsgXywgUHJvbWlzZSwgcGFzY2FsQ2FzZSB9ID0gcmVxdWlyZSgncmstdXRpbHMnKTtcbmNvbnN0IEZlYXR1cmUgPSByZXF1aXJlKCcuLi9lbnVtL0ZlYXR1cmUnKTtcbmNvbnN0IExpdGVyYWwgPSByZXF1aXJlKCcuLi9lbnVtL0xpdGVyYWwnKTtcblxuY29uc3QgRGJDYWNoZSA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAvKipcbiAgICAgKiBUaGlzIGZlYXR1cmUgaXMgbG9hZGVkIGF0IGluaXQgc3RhZ2VcbiAgICAgKiBAbWVtYmVyIHtzdHJpbmd9XG4gICAgICovXG4gICAgdHlwZTogRmVhdHVyZS5JTklULFxuXG4gICAgLyoqXG4gICAgICogTG9hZCB0aGUgZmVhdHVyZVxuICAgICAqIEBwYXJhbSB7QXBwfSBhcHAgLSBUaGUgYXBwIG1vZHVsZSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb29sb25nIC0gT29sb25nIHNldHRpbmdzXG4gICAgICogQHByb3BlcnR5IHtib29sfSBbb29sb25nLmxvZ1NxbFN0YXRlbWVudF0gLSBGbGFnIHRvIHR1cm4gb24gc3FsIGRlYnVnZ2luZyBsb2dcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZS48Kj59XG4gICAgICovXG4gICAgbG9hZF86IGFzeW5jIChhcHAsIG9vbG9uZykgPT4ge1xuICAgICAgICBhcHAub29sb25nID0gb29sb25nO1xuXG4gICAgICAgIGlmICghb29sb25nLnNjaGVtYURlcGxveW1lbnQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBcInNjaGVtYURlcGxveW1lbnRcIiBpbiBvb2xvbmcgY29uZmlnLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXBwLmRiID0gKHNjaGVtYU5hbWUpID0+IHtcbiAgICAgICAgICAgIGlmIChEYkNhY2hlW3NjaGVtYU5hbWVdKSByZXR1cm4gRGJDYWNoZVtzY2hlbWFOYW1lXTtcblxuICAgICAgICAgICAgbGV0IHNjaGVtYUluZm8gPSBvb2xvbmcuc2NoZW1hRGVwbG95bWVudFtzY2hlbWFOYW1lXTtcbiAgICAgICAgICAgIGlmICghc2NoZW1hSW5mbyB8fCAhc2NoZW1hSW5mby5kYXRhU291cmNlKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIFwiZGF0YVNvdXJjZVwiIGluIHNjaGVtYURlcGxveW1lbnQgc2VjdGlvbiBvZiBvb2xvbmcgY29uZmlnLicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgY29ubmVjdG9yID0gYXBwLmdldFNlcnZpY2Uoc2NoZW1hSW5mby5kYXRhU291cmNlKTtcbiAgICAgICAgICAgIGlmICghY29ubmVjdG9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGRhdGEgc291cmNlLicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgaTE4biA9IGFwcC5nZXRTZXJ2aWNlKCdpMThuJykgfHwgYXBwLl9fO1xuXG4gICAgICAgICAgICBsZXQgbW9kZWxQYXRoO1xuXG4gICAgICAgICAgICBpZiAob29sb25nLm1vZGVsRGlyKSB7XG4gICAgICAgICAgICAgICAgbW9kZWxQYXRoID0gYXBwLnRvQWJzb2x1dGVQYXRoKG9vbG9uZy5tb2RlbERpcik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFwcC5iYWNrZW5kUGF0aCkge1xuICAgICAgICAgICAgICAgIG1vZGVsUGF0aCA9IHBhdGguam9pbihhcHAuYmFja2VuZFBhdGgsIExpdGVyYWwuTU9ERUxTX1BBVEgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtb2RlbFBhdGggPSBhcHAudG9BYnNvbHV0ZVBhdGgoTGl0ZXJhbC5NT0RFTFNfUEFUSCk7IFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBEYiA9IHJlcXVpcmUocGF0aC5qb2luKG1vZGVsUGF0aCwgcGFzY2FsQ2FzZShzY2hlbWFOYW1lKSkpO1xuICAgICAgICAgICAgbGV0IGRiID0gbmV3IERiKGNvbm5lY3RvciwgaTE4bik7XG4gICAgICAgICAgICBkYi5hcHAgPSBhcHA7XG5cbiAgICAgICAgICAgIERiQ2FjaGVbc2NoZW1hTmFtZV0gPSBkYjsgICAgICAgICAgICBcblxuICAgICAgICAgICAgcmV0dXJuIGRiO1xuICAgICAgICB9OyAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGFwcC5tb2RlbCA9IChtb2RlbEZ1bGxOYW1lKSA9PiB7XG4gICAgICAgICAgICBsZXQgWyBzY2hlbWFOYW1lLCBtb2RlbE5hbWUgXSA9IG1vZGVsRnVsbE5hbWUuc3BsaXQoJy4nKTtcbiAgICAgICAgICAgIHJldHVybiBhcHAuZGIoc2NoZW1hTmFtZSkubW9kZWwobW9kZWxOYW1lKTtcbiAgICAgICAgfTtcbiAgICB9XG59OyJdfQ==