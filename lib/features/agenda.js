"use strict";

require("source-map-support/register");

const Feature = require('../enum/Feature');

const {
  InvalidConfiguration
} = require('../utils/Errors');

const {
  tryRequire
} = require('../utils/Helpers');

module.exports = {
  type: Feature.SERVICE,
  load_: async function (app, options) {
    const Agenda = tryRequire('agenda');
    const {
      dataSource,
      collection,
      ...others
    } = options;

    if (!dataSource) {
      throw new InvalidConfiguration('Missing "dataSource" config.', app, 'agenda.dataSource');
    }

    (app.server || app).on('before:' + Feature.READY, asyncHandlers => {
      let dbService = app.getService(dataSource);

      if (!dbService) {
        throw new InvalidConfiguration(`Data source "${dataSource}" not found.`, app, 'agenda.dataSource');
      }

      if (dbService.driver !== 'mongodb') {
        throw new InvalidConfiguration(`Data source "${dataSource}" is not a mongodb.`, app, 'agenda.dataSource');
      }

      asyncHandlers.push((async () => {
        let db = await dbService.connect_();
        let opts = {
          mongo: db,
          db: {
            collection: collection
          },
          processEvery: '1 minute',
          ...others
        };
        const agenda = new Agenda(opts);
        await new Promise(resolve => agenda.once('ready', resolve));
        app.registerService('agenda', agenda);
      })());
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWF0dXJlcy9hZ2VuZGEuanMiXSwibmFtZXMiOlsiRmVhdHVyZSIsInJlcXVpcmUiLCJJbnZhbGlkQ29uZmlndXJhdGlvbiIsInRyeVJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwidHlwZSIsIlNFUlZJQ0UiLCJsb2FkXyIsImFwcCIsIm9wdGlvbnMiLCJBZ2VuZGEiLCJkYXRhU291cmNlIiwiY29sbGVjdGlvbiIsIm90aGVycyIsInNlcnZlciIsIm9uIiwiUkVBRFkiLCJhc3luY0hhbmRsZXJzIiwiZGJTZXJ2aWNlIiwiZ2V0U2VydmljZSIsImRyaXZlciIsInB1c2giLCJkYiIsImNvbm5lY3RfIiwib3B0cyIsIm1vbmdvIiwicHJvY2Vzc0V2ZXJ5IiwiYWdlbmRhIiwiUHJvbWlzZSIsInJlc29sdmUiLCJvbmNlIiwicmVnaXN0ZXJTZXJ2aWNlIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQVFBLE1BQU1BLE9BQU8sR0FBR0MsT0FBTyxDQUFDLGlCQUFELENBQXZCOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUEyQkQsT0FBTyxDQUFDLGlCQUFELENBQXhDOztBQUNBLE1BQU07QUFBRUUsRUFBQUE7QUFBRixJQUFpQkYsT0FBTyxDQUFDLGtCQUFELENBQTlCOztBQUVBRyxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFNYkMsRUFBQUEsSUFBSSxFQUFFTixPQUFPLENBQUNPLE9BTkQ7QUFlYkMsRUFBQUEsS0FBSyxFQUFFLGdCQUFnQkMsR0FBaEIsRUFBcUJDLE9BQXJCLEVBQThCO0FBQ2pDLFVBQU1DLE1BQU0sR0FBR1IsVUFBVSxDQUFDLFFBQUQsQ0FBekI7QUFFQSxVQUFNO0FBQUVTLE1BQUFBLFVBQUY7QUFBY0MsTUFBQUEsVUFBZDtBQUEwQixTQUFHQztBQUE3QixRQUF3Q0osT0FBOUM7O0FBRUEsUUFBSSxDQUFDRSxVQUFMLEVBQWlCO0FBQ2IsWUFBTSxJQUFJVixvQkFBSixDQUF5Qiw4QkFBekIsRUFBeURPLEdBQXpELEVBQThELG1CQUE5RCxDQUFOO0FBQ0g7O0FBRUQsS0FBQ0EsR0FBRyxDQUFDTSxNQUFKLElBQWNOLEdBQWYsRUFBb0JPLEVBQXBCLENBQXVCLFlBQVloQixPQUFPLENBQUNpQixLQUEzQyxFQUFtREMsYUFBRCxJQUFtQjtBQUVqRSxVQUFJQyxTQUFTLEdBQUdWLEdBQUcsQ0FBQ1csVUFBSixDQUFlUixVQUFmLENBQWhCOztBQUVBLFVBQUksQ0FBQ08sU0FBTCxFQUFnQjtBQUNaLGNBQU0sSUFBSWpCLG9CQUFKLENBQTBCLGdCQUFlVSxVQUFXLGNBQXBELEVBQW1FSCxHQUFuRSxFQUF3RSxtQkFBeEUsQ0FBTjtBQUNIOztBQUVELFVBQUlVLFNBQVMsQ0FBQ0UsTUFBVixLQUFxQixTQUF6QixFQUFvQztBQUNoQyxjQUFNLElBQUluQixvQkFBSixDQUEwQixnQkFBZVUsVUFBVyxxQkFBcEQsRUFBMEVILEdBQTFFLEVBQStFLG1CQUEvRSxDQUFOO0FBQ0g7O0FBRURTLE1BQUFBLGFBQWEsQ0FBQ0ksSUFBZCxDQUFtQixDQUFDLFlBQVk7QUFDNUIsWUFBSUMsRUFBRSxHQUFHLE1BQU1KLFNBQVMsQ0FBQ0ssUUFBVixFQUFmO0FBRUEsWUFBSUMsSUFBSSxHQUFHO0FBQUVDLFVBQUFBLEtBQUssRUFBRUgsRUFBVDtBQUFhQSxVQUFBQSxFQUFFLEVBQUU7QUFBRVYsWUFBQUEsVUFBVSxFQUFFQTtBQUFkLFdBQWpCO0FBQTZDYyxVQUFBQSxZQUFZLEVBQUUsVUFBM0Q7QUFBdUUsYUFBR2I7QUFBMUUsU0FBWDtBQUVBLGNBQU1jLE1BQU0sR0FBRyxJQUFJakIsTUFBSixDQUFXYyxJQUFYLENBQWY7QUFDQSxjQUFNLElBQUlJLE9BQUosQ0FBWUMsT0FBTyxJQUFJRixNQUFNLENBQUNHLElBQVAsQ0FBWSxPQUFaLEVBQXFCRCxPQUFyQixDQUF2QixDQUFOO0FBQ0FyQixRQUFBQSxHQUFHLENBQUN1QixlQUFKLENBQW9CLFFBQXBCLEVBQThCSixNQUE5QjtBQUNILE9BUmtCLEdBQW5CO0FBU0gsS0FyQkQ7QUFzQkg7QUE5Q1ksQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBFbmFibGUgYm9vdHN0cmFwIHNjcmlwdHNcbiAqIEBtb2R1bGUgRmVhdHVyZV9BZ2VuZGFcbiAqL1xuXG5cbmNvbnN0IEZlYXR1cmUgPSByZXF1aXJlKCcuLi9lbnVtL0ZlYXR1cmUnKTtcbmNvbnN0IHsgSW52YWxpZENvbmZpZ3VyYXRpb24gfSA9IHJlcXVpcmUoJy4uL3V0aWxzL0Vycm9ycycpO1xuY29uc3QgeyB0cnlSZXF1aXJlIH0gPSByZXF1aXJlKCcuLi91dGlscy9IZWxwZXJzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBmZWF0dXJlIGlzIGxvYWRlZCBhdCBwbHVnaW4gc3RhZ2VcbiAgICAgKiBAbWVtYmVyIHtzdHJpbmd9XG4gICAgICovXG4gICAgdHlwZTogRmVhdHVyZS5TRVJWSUNFLFxuXG4gICAgLyoqXG4gICAgICogTG9hZCB0aGUgZmVhdHVyZVxuICAgICAqIEBwYXJhbSB7QXBwfSBhcHAgLSBUaGUgYXBwIG1vZHVsZSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyAtIE9wdGlvbnMgZm9yIHRoZSBmZWF0dXJlXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IG9wdGlvbnMuZGF0YVNvdXJjZSAtIFRoZSBkYXRhU291cmNlIG5hbWVcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZS48Kj59XG4gICAgICovXG4gICAgbG9hZF86IGFzeW5jIGZ1bmN0aW9uIChhcHAsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgQWdlbmRhID0gdHJ5UmVxdWlyZSgnYWdlbmRhJyk7XG5cbiAgICAgICAgY29uc3QgeyBkYXRhU291cmNlLCBjb2xsZWN0aW9uLCAuLi5vdGhlcnMgfSA9IG9wdGlvbnM7XG5cbiAgICAgICAgaWYgKCFkYXRhU291cmNlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZENvbmZpZ3VyYXRpb24oJ01pc3NpbmcgXCJkYXRhU291cmNlXCIgY29uZmlnLicsIGFwcCwgJ2FnZW5kYS5kYXRhU291cmNlJyk7XG4gICAgICAgIH1cblxuICAgICAgICAoYXBwLnNlcnZlciB8fCBhcHApLm9uKCdiZWZvcmU6JyArIEZlYXR1cmUuUkVBRFksIChhc3luY0hhbmRsZXJzKSA9PiB7XG4gICAgICAgICAgICAvL3dhaXQgZm9yIGFsbCBwbHVnaW5zIGFyZSBsb2FkZWQgaW4gY2FzZSBvZiByZWZlcmVuY2luZyBzZXJ2aWNlcyBmcm9tIG90aGVyIHdlYiBtb2R1bGVcbiAgICAgICAgICAgIGxldCBkYlNlcnZpY2UgPSBhcHAuZ2V0U2VydmljZShkYXRhU291cmNlKTtcblxuICAgICAgICAgICAgaWYgKCFkYlNlcnZpY2UpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZENvbmZpZ3VyYXRpb24oYERhdGEgc291cmNlIFwiJHtkYXRhU291cmNlfVwiIG5vdCBmb3VuZC5gLCBhcHAsICdhZ2VuZGEuZGF0YVNvdXJjZScpO1xuICAgICAgICAgICAgfSAgICBcblxuICAgICAgICAgICAgaWYgKGRiU2VydmljZS5kcml2ZXIgIT09ICdtb25nb2RiJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ29uZmlndXJhdGlvbihgRGF0YSBzb3VyY2UgXCIke2RhdGFTb3VyY2V9XCIgaXMgbm90IGEgbW9uZ29kYi5gLCBhcHAsICdhZ2VuZGEuZGF0YVNvdXJjZScpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhc3luY0hhbmRsZXJzLnB1c2goKGFzeW5jICgpID0+IHsgIFxuICAgICAgICAgICAgICAgIGxldCBkYiA9IGF3YWl0IGRiU2VydmljZS5jb25uZWN0XygpOyBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBsZXQgb3B0cyA9IHsgbW9uZ286IGRiLCBkYjogeyBjb2xsZWN0aW9uOiBjb2xsZWN0aW9uIH0sIHByb2Nlc3NFdmVyeTogJzEgbWludXRlJywgLi4ub3RoZXJzIH07ICAgICAgICAgICAgICAgIFxuXG4gICAgICAgICAgICAgICAgY29uc3QgYWdlbmRhID0gbmV3IEFnZW5kYShvcHRzKTtcbiAgICAgICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IGFnZW5kYS5vbmNlKCdyZWFkeScsIHJlc29sdmUpKTtcbiAgICAgICAgICAgICAgICBhcHAucmVnaXN0ZXJTZXJ2aWNlKCdhZ2VuZGEnLCBhZ2VuZGEpO1xuICAgICAgICAgICAgfSkoKSk7ICAgICAgICAgICAgXG4gICAgICAgIH0pOyAgICAgICAgXG4gICAgfVxufTsiXX0=