"use strict";

require("source-map-support/register");

const path = require('path');

const Feature = require('../enum/Feature');

const {
  _,
  putIntoBucket,
  setValueByPath,
  eachAsync_
} = require('rk-utils');

const {
  tryRequire
} = require('../utils/Helpers');

const {
  ApplicationError,
  InvalidConfiguration
} = require('../utils/Errors');

function translateMinimistOptions(opts) {
  let m = {};

  _.forOwn(opts, (detail, name) => {
    if (detail.bool) {
      putIntoBucket(m, 'boolean', name);
    } else {
      putIntoBucket(m, 'string', name);
    }

    if ('default' in detail) {
      setValueByPath(m, `default.${name}`, detail.default);
    }

    if (detail.alias) {
      setValueByPath(m, `alias.${name}`, detail.alias);
    }
  });

  return m;
}

function optionDecorator(name) {
  return name.length == 1 ? '-' + name : '--' + name;
}

const gArgv = process.argv.slice(2);

class CommandLineArgumentError extends ApplicationError {
  constructor(message, name, nonOption) {
    super(message, 'E_CLI_INVALID_ARG', {
      name,
      nonOption
    });
  }

}

class CommandLine {
  constructor(app, usage) {
    this.app = app;
    this.usage = usage;
    this.parse(usage.options);
  }

  injectUsage(injects) {
    this.injects = injects;
  }

  parse(options) {
    const minimist = tryRequire('minimist');
    this.argv = minimist(gArgv, translateMinimistOptions(options));
  }

  option(name) {
    return this.argv[name];
  }

  arg(name) {
    if (this.args[name]) return this.args[name];

    let index = _.findIndex(this.usage.arguments, arg => arg.name === name);

    if (index === -1 || this.argv._.length <= index) {
      return undefined;
    }

    this.args || (this.args = {});
    return this.args[name] = this.argv._[index];
  }

  updateOption(name, value) {
    this.argv[name] = value;
    let opts = this.usage.options[name];

    if (opts.alias) {
      _.each(opts.alias, a => {
        this.argv[a] = value;
      });
    }
  }

  async valueOrFunctionCall_(functor) {
    if (typeof functor === 'function') {
      return await functor(this);
    }

    return functor;
  }

  async inquire_() {
    const inquirer = tryRequire('inquirer');

    const doInquire_ = (item, argIndex) => inquirer.prompt([item]).then(answers => {
      console.log();

      _.forOwn(answers, (ans, name) => {
        if (typeof argIndex === 'undefined') {
          this.updateOption(name, ans);
        } else {
          if (!(this.argv._.length === argIndex)) {
            throw new Error("Assertion failed: this.argv._.length === argIndex");
          }

          this.argv._ = this.argv._.concat([ans]);
        }
      });
    });

    const doFilter_ = async (name, opt, argIndex) => {
      if (opt.filter) {
        if (typeof argIndex === 'undefined') {
          if (!(typeof opt.filter !== 'function')) {
            throw new InvalidConfiguration(`The "filter" in the inquirer option for argument option "${name}" should be a function!`, this.app, `commandLine.options[${name}].filter`);
          }

          this.updateOption(name, (await opt.filter(this.argv[name], this)));
        } else {
          if (!(typeof opt.filter !== 'function')) {
            throw new InvalidConfiguration(`The "filter" in the inquirer option for argument value "${name}" at position ${argIndex} should be a function!`, this.app, `commandLine.arguments[${argIndex}].filter`);
          }

          this.argv._[argIndex] = await opt.filter(this.argv._[argIndex], this);
        }
      }
    };

    const argExist = (name, argIndex) => typeof argIndex === 'undefined' ? name in this.argv : this.argv._.length > argIndex;

    const prepareInquire_ = async (opts, name, argIndex) => {
      let argExists = argExist(name, argIndex);

      if ('inquire' in opts && !argExists) {
        let inquire = this.valueOrFunctionCall_(opts.inquire);

        if (inquire) {
          let type;
          let q = {
            name: name,
            message: opts.promptMessage || opts.desc
          };

          if (opts.promptType) {
            type = opts.promptType;

            if (type === 'list' || type === 'rawList' || type === 'checkbox' || type === 'expand') {
              if (!opts.choicesProvider) {
                throw new InvalidConfiguration(typeof argIndex === 'undefined' ? `Missing "choicesProvider" in the inquirer option for argument option "${name}"!` : `Missing "choicesProvider" in the inquirer option for argument value "${name}" at postion ${argIndex}!`, app, typeof argIndex === 'undefined' ? `commandLine.options[${name}].choicesProvider` : `commandLine.arguments[${argIndex}].choicesProvider`);
              }

              q.choices = await this.valueOrFunctionCall_(opts.choicesProvider);
            }
          } else if (opts.bool) {
            type = 'confirm';
          } else {
            type = 'input';
          }

          q.type = type;

          if ('promptDefault' in opts) {
            q.default = await this.valueOrFunctionCall_(opts.promptDefault);
          }

          await doInquire_(q, argIndex);
          await doFilter_(name, opts, argIndex);

          if (opts.afterInquire) {
            await opts.afterInquire(this);
          }
        }
      } else if (argExists) {
        await doFilter_(name, opts, argIndex);

        if (opts.onArgumentExists) {
          await opts.onArgumentExists(this);
        }
      }

      if (this.usage.showArguments && argExist(name, argIndex)) {
        if (typeof argIndex === 'undefined') {
          console.log('option', name, `(${opts.desc})`, ':', this.argv[name]);
        } else {
          console.log(`<${name}>`, ':', this.argv._[argIndex]);
        }
      }
    };

    if (!_.isEmpty(this.usage.arguments)) {
      await eachAsync_(this.usage.arguments, async (argOpt, index) => {
        let {
          name,
          ...opts
        } = argOpt;
        return prepareInquire_(opts, name, index);
      });
    }

    return _.isEmpty(this.usage.options) || eachAsync_(this.usage.options, (opts, name) => prepareInquire_(opts, name));
  }

  async validate_() {
    const checkRequire_ = opts => this.valueOrFunctionCall_(opts.required);

    let errors = [];

    if (!_.isEmpty(this.usage.arguments)) {
      let argNum = this.argv._.length;

      if (argNum < this.usage.arguments.length) {
        let args = [];
        let i = 0;
        await eachAsync_(this.usage.arguments, async arg => {
          let required = await checkRequire_(arg);

          if (required) {
            if (i >= argNum) {
              let msg = `Missing required argument "${arg.name}"!`;

              if (this.usage.showUsageOnError) {
                errors.push(msg);
              } else {
                throw new CommandLineArgumentError(msg, arg.name, true);
              }
            } else {
              args.push(this.argv._[i++]);
            }
          }
        });
        this.argv._ = args;
      }
    }

    this.usage.options && (await eachAsync_(this.usage.options, async (opts, name) => {
      let required = await checkRequire_(opts);

      if (required && !(name in this.argv)) {
        let msg = `Missing required argument option of "${name}"!`;

        if (this.usage.showUsageOnError) {
          errors.push(msg);
        } else {
          throw new CommandLineArgumentError(msg, name);
        }
      }
    }));

    if (errors.length > 0) {
      this.showUsage({
        afterBanner: () => 'Error(s):\n' + errors.map(msg => ' - ' + msg).join('\n') + '\n\n'
      });
      process.exit(1);
    }
  }

  async fillSilentModeDefaults_() {
    await eachAsync_(this.usage.arguments, async (arg, index) => {
      if (this.argv._.length <= index) {
        if (arg.hasOwnProperty('silentModeDefault')) {
          for (let i = this.argv._.length; i < index; i++) {
            this.argv._.push(undefined);
          }

          this.argv._.push((await this.valueOrFunctionCall_(arg.silentModeDefault)));
        }
      }
    });
    await eachAsync_(this.usage.options, async (opts, name) => {
      if (!this.argv.hasOwnProperty(name) && opts.hasOwnProperty('silentModeDefault')) {
        this.updateOption(name, (await this.valueOrFunctionCall_(opts.silentModeDefault)));
      }
    });
  }

  getBanner() {
    if (this.usage.banner) {
      let banner = '';

      if (typeof this.usage.banner === 'function') {
        banner += this.usage.banner(this);
      } else if (typeof this.usage.banner === 'string') {
        banner += this.usage.banner;
      } else {
        throw new InvalidConfiguration('Invalid banner value of commandLine feature.', this.app, `commandLine.banner`);
      }

      banner += '\n';
      return banner;
    }

    return undefined;
  }

  getUsage(injects) {
    injects = { ...this.injects,
      ...injects
    };
    let usage = '';
    let banner = !this.bannerShown && this.getBanner();

    if (banner) {
      usage += banner + '\n';
    }

    if (injects && injects.afterBanner) {
      usage += injects.afterBanner();
    }

    let fmtArgs = '';

    if (!_.isEmpty(this.usage.arguments)) {
      fmtArgs = ' ' + this.usage.arguments.map(arg => arg.required ? `<${arg.name}>` : `[${arg.name}]`).join(' ');
    }

    usage += `Usage: ${this.usage.program || path.basename(process.argv[1])}${fmtArgs} [options]\n\n`;

    if (injects && injects.afterCommandLine) {
      usage += injects.afterCommandLine();
    }

    if (!_.isEmpty(this.usage.options)) {
      usage += `Options:\n`;

      _.forOwn(this.usage.options, (opts, name) => {
        let line = '  ' + optionDecorator(name);

        if (opts.alias) {
          line += _.reduce(opts.alias, (sum, a) => sum + ', ' + optionDecorator(a), '');
        }

        line += '\n';
        line += '    ' + opts.desc + '\n';

        if ('default' in opts) {
          line += '    default: ' + opts.default.toString() + '\n';
        }

        if (opts.required) {
          if (typeof opts.required === 'function') {
            line += '    conditional\n';
          } else {
            line += '    required\n';
          }
        }

        if (opts.choicesProvider && Array.isArray(opts.choicesProvider)) {
          line += '    available values:\n';
          opts.choicesProvider.forEach(choice => {
            line += `        "${choice.value}": ${choice.name}\n`;
          });
        }

        line += '\n';
        usage += line;
      });
    }

    if (injects && injects.afterOptions) {
      usage += injects.afterOptions();
    }

    return usage;
  }

  showBannar() {
    let banner = this.getBanner();

    if (banner) {
      console.log(banner);
      this.bannerShown = true;
    }
  }

  showUsage(injects) {
    console.log(this.getUsage(injects));
  }

}

module.exports = {
  type: Feature.INIT,
  load_: async (app, usageOptions) => {
    app.commandLine = new CommandLine(app, usageOptions);
    let silentMode = usageOptions.silentMode;

    if (silentMode && typeof silentMode === 'function') {
      silentMode = silentMode(app.commandLine);
    }

    app.commandLine.silentMode = silentMode;

    if (silentMode) {
      await app.commandLine.fillSilentModeDefaults_();
    } else {
      app.commandLine.showBannar();
      await app.commandLine.inquire_();
    }

    let nonValidationMode = usageOptions.nonValidationMode;

    if (nonValidationMode && typeof nonValidationMode === 'function') {
      nonValidationMode = nonValidationMode(app.commandLine);
    }

    app.commandLine.nonValidationMode = nonValidationMode;

    if (!nonValidationMode) {
      await app.commandLine.validate_();
    }
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWF0dXJlcy9jb21tYW5kTGluZS5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsIkZlYXR1cmUiLCJfIiwicHV0SW50b0J1Y2tldCIsInNldFZhbHVlQnlQYXRoIiwiZWFjaEFzeW5jXyIsInRyeVJlcXVpcmUiLCJBcHBsaWNhdGlvbkVycm9yIiwiSW52YWxpZENvbmZpZ3VyYXRpb24iLCJ0cmFuc2xhdGVNaW5pbWlzdE9wdGlvbnMiLCJvcHRzIiwibSIsImZvck93biIsImRldGFpbCIsIm5hbWUiLCJib29sIiwiZGVmYXVsdCIsImFsaWFzIiwib3B0aW9uRGVjb3JhdG9yIiwibGVuZ3RoIiwiZ0FyZ3YiLCJwcm9jZXNzIiwiYXJndiIsInNsaWNlIiwiQ29tbWFuZExpbmVBcmd1bWVudEVycm9yIiwiY29uc3RydWN0b3IiLCJtZXNzYWdlIiwibm9uT3B0aW9uIiwiQ29tbWFuZExpbmUiLCJhcHAiLCJ1c2FnZSIsInBhcnNlIiwib3B0aW9ucyIsImluamVjdFVzYWdlIiwiaW5qZWN0cyIsIm1pbmltaXN0Iiwib3B0aW9uIiwiYXJnIiwiYXJncyIsImluZGV4IiwiZmluZEluZGV4IiwiYXJndW1lbnRzIiwidW5kZWZpbmVkIiwidXBkYXRlT3B0aW9uIiwidmFsdWUiLCJlYWNoIiwiYSIsInZhbHVlT3JGdW5jdGlvbkNhbGxfIiwiZnVuY3RvciIsImlucXVpcmVfIiwiaW5xdWlyZXIiLCJkb0lucXVpcmVfIiwiaXRlbSIsImFyZ0luZGV4IiwicHJvbXB0IiwidGhlbiIsImFuc3dlcnMiLCJjb25zb2xlIiwibG9nIiwiYW5zIiwiY29uY2F0IiwiZG9GaWx0ZXJfIiwib3B0IiwiZmlsdGVyIiwiYXJnRXhpc3QiLCJwcmVwYXJlSW5xdWlyZV8iLCJhcmdFeGlzdHMiLCJpbnF1aXJlIiwidHlwZSIsInEiLCJwcm9tcHRNZXNzYWdlIiwiZGVzYyIsInByb21wdFR5cGUiLCJjaG9pY2VzUHJvdmlkZXIiLCJjaG9pY2VzIiwicHJvbXB0RGVmYXVsdCIsImFmdGVySW5xdWlyZSIsIm9uQXJndW1lbnRFeGlzdHMiLCJzaG93QXJndW1lbnRzIiwiaXNFbXB0eSIsImFyZ09wdCIsInZhbGlkYXRlXyIsImNoZWNrUmVxdWlyZV8iLCJyZXF1aXJlZCIsImVycm9ycyIsImFyZ051bSIsImkiLCJtc2ciLCJzaG93VXNhZ2VPbkVycm9yIiwicHVzaCIsInNob3dVc2FnZSIsImFmdGVyQmFubmVyIiwibWFwIiwiam9pbiIsImV4aXQiLCJmaWxsU2lsZW50TW9kZURlZmF1bHRzXyIsImhhc093blByb3BlcnR5Iiwic2lsZW50TW9kZURlZmF1bHQiLCJnZXRCYW5uZXIiLCJiYW5uZXIiLCJnZXRVc2FnZSIsImJhbm5lclNob3duIiwiZm10QXJncyIsInByb2dyYW0iLCJiYXNlbmFtZSIsImFmdGVyQ29tbWFuZExpbmUiLCJsaW5lIiwicmVkdWNlIiwic3VtIiwidG9TdHJpbmciLCJBcnJheSIsImlzQXJyYXkiLCJmb3JFYWNoIiwiY2hvaWNlIiwiYWZ0ZXJPcHRpb25zIiwic2hvd0Jhbm5hciIsIm1vZHVsZSIsImV4cG9ydHMiLCJJTklUIiwibG9hZF8iLCJ1c2FnZU9wdGlvbnMiLCJjb21tYW5kTGluZSIsInNpbGVudE1vZGUiLCJub25WYWxpZGF0aW9uTW9kZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFPQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU1DLE9BQU8sR0FBR0QsT0FBTyxDQUFDLGlCQUFELENBQXZCOztBQUNBLE1BQU07QUFBRUUsRUFBQUEsQ0FBRjtBQUFLQyxFQUFBQSxhQUFMO0FBQW9CQyxFQUFBQSxjQUFwQjtBQUFvQ0MsRUFBQUE7QUFBcEMsSUFBbURMLE9BQU8sQ0FBQyxVQUFELENBQWhFOztBQUNBLE1BQU07QUFBRU0sRUFBQUE7QUFBRixJQUFpQk4sT0FBTyxDQUFDLGtCQUFELENBQTlCOztBQUNBLE1BQU07QUFBRU8sRUFBQUEsZ0JBQUY7QUFBb0JDLEVBQUFBO0FBQXBCLElBQTZDUixP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SUFBQUEsR0FBRyxDQUFDNEYsV0FBSixDQUFnQkUsaUJBQWhCLEdBQW9DQSxpQkFBcEM7O0FBRUEsUUFBSSxDQUFDQSxpQkFBTCxFQUF3QjtBQUNwQixZQUFNOUYsR0FBRyxDQUFDNEYsV0FBSixDQUFnQnhDLFNBQWhCLEVBQU47QUFDSDtBQUNKO0FBcEVZLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogUGFyc2UgY29tbWFuZCBsaW5lIGFyZ3VtZW50cyB1c2luZyBtaW5pbWlzdCBhbmQgc3RvcmUgdGhlIHBhcnNlZCBvYmplY3QgaW50byBhcHAuYXJndiwgYW5kIGFkZCBhcHAuc2hvd1VzYWdlKCkgaGVscGVyIGZ1bmN0aW9uXG4gKiBAbW9kdWxlIEZlYXR1cmVfQ29tbWFuZExpbmVcbiAqL1xuXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgRmVhdHVyZSA9IHJlcXVpcmUoJy4uL2VudW0vRmVhdHVyZScpO1xuY29uc3QgeyBfLCBwdXRJbnRvQnVja2V0LCBzZXRWYWx1ZUJ5UGF0aCwgZWFjaEFzeW5jXyB9ID0gcmVxdWlyZSgncmstdXRpbHMnKTtcbmNvbnN0IHsgdHJ5UmVxdWlyZSB9ID0gcmVxdWlyZSgnLi4vdXRpbHMvSGVscGVycycpO1xuY29uc3QgeyBBcHBsaWNhdGlvbkVycm9yLCBJbnZhbGlkQ29uZmlndXJhdGlvbiB9ID0gcmVxdWlyZSgnLi4vdXRpbHMvRXJyb3JzJylcblxuZnVuY3Rpb24gdHJhbnNsYXRlTWluaW1pc3RPcHRpb25zKG9wdHMpIHtcbiAgICBsZXQgbSA9IHt9O1xuXG4gICAgXy5mb3JPd24ob3B0cywgKGRldGFpbCwgbmFtZSkgPT4ge1xuICAgICAgICBpZiAoZGV0YWlsLmJvb2wpIHtcbiAgICAgICAgICAgIHB1dEludG9CdWNrZXQobSwgJ2Jvb2xlYW4nLCBuYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHB1dEludG9CdWNrZXQobSwgJ3N0cmluZycsIG5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCdkZWZhdWx0JyBpbiBkZXRhaWwpIHtcbiAgICAgICAgICAgIHNldFZhbHVlQnlQYXRoKG0sIGBkZWZhdWx0LiR7bmFtZX1gLCBkZXRhaWwuZGVmYXVsdCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGV0YWlsLmFsaWFzKSB7XG4gICAgICAgICAgICBzZXRWYWx1ZUJ5UGF0aChtLCBgYWxpYXMuJHtuYW1lfWAsIGRldGFpbC5hbGlhcyk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBtO1xufVxuXG5mdW5jdGlvbiBvcHRpb25EZWNvcmF0b3IobmFtZSkge1xuICAgIHJldHVybiBuYW1lLmxlbmd0aCA9PSAxID8gKCctJyArIG5hbWUpIDogKCctLScgKyBuYW1lKTtcbn1cblxuY29uc3QgZ0FyZ3YgPSBwcm9jZXNzLmFyZ3Yuc2xpY2UoMik7XG5cbi8qKlxuICogRXJyb3IgY2F1c2VkIGJ5IGNvbW1hbmQgbGluZSBhcmd1bWVudHMuXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIEFwcGxpY2F0aW9uRXJyb3IgIFxuICovXG5jbGFzcyBDb21tYW5kTGluZUFyZ3VtZW50RXJyb3IgZXh0ZW5kcyBBcHBsaWNhdGlvbkVycm9yIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSAtIEVycm9yIG1lc3NhZ2UgICAgIFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIHJlbGF0ZWQgY29uZmlnIGl0ZW0gIFxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gbm9uT3B0aW9uIC0gV2hldGhlciBpdCBpcyBhbiBvcHRpb24gXG4gICAgICovIFxuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIG5hbWUsIG5vbk9wdGlvbikgeyAgICAgXG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsICdFX0NMSV9JTlZBTElEX0FSRycsIHsgbmFtZSwgbm9uT3B0aW9uIH0pO1xuICAgIH1cbn1cblxuLyoqXG4gKiBDb21tYW5kIGxpbmUgaGVscGVyIG9iamVjdC5cbiAqL1xuY2xhc3MgQ29tbWFuZExpbmUge1xuICAgIGNvbnN0cnVjdG9yKGFwcCwgdXNhZ2UpIHtcbiAgICAgICAgdGhpcy5hcHAgPSBhcHA7XG4gICAgICAgIHRoaXMudXNhZ2UgPSB1c2FnZTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMucGFyc2UodXNhZ2Uub3B0aW9ucyk7XG4gICAgfVxuXG4gICAgaW5qZWN0VXNhZ2UoaW5qZWN0cykge1xuICAgICAgICB0aGlzLmluamVjdHMgPSBpbmplY3RzO1xuICAgIH1cblxuICAgIHBhcnNlKG9wdGlvbnMpIHsgICAgICAgIFxuICAgICAgICBjb25zdCBtaW5pbWlzdCA9IHRyeVJlcXVpcmUoJ21pbmltaXN0Jyk7XG4gICAgICAgIHRoaXMuYXJndiA9IG1pbmltaXN0KGdBcmd2LCB0cmFuc2xhdGVNaW5pbWlzdE9wdGlvbnMob3B0aW9ucykpO1xuICAgIH1cblxuICAgIG9wdGlvbihuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFyZ3ZbbmFtZV07XG4gICAgfVxuXG4gICAgYXJnKG5hbWUpIHtcbiAgICAgICAgaWYgKHRoaXMuYXJnc1tuYW1lXSkgcmV0dXJuIHRoaXMuYXJnc1tuYW1lXTtcblxuICAgICAgICBsZXQgaW5kZXggPSBfLmZpbmRJbmRleCh0aGlzLnVzYWdlLmFyZ3VtZW50cywgYXJnID0+IGFyZy5uYW1lID09PSBuYW1lKTtcblxuICAgICAgICBpZiAoaW5kZXggPT09IC0xIHx8IHRoaXMuYXJndi5fLmxlbmd0aCA8PSBpbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYXJncyB8fCAodGhpcy5hcmdzID0ge30pO1xuICAgICAgICByZXR1cm4gKHRoaXMuYXJnc1tuYW1lXSA9IHRoaXMuYXJndi5fW2luZGV4XSk7XG4gICAgfVxuXG4gICAgdXBkYXRlT3B0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIHRoaXMuYXJndltuYW1lXSA9IHZhbHVlO1xuICAgICAgICBsZXQgb3B0cyA9IHRoaXMudXNhZ2Uub3B0aW9uc1tuYW1lXTtcbiAgICAgICAgaWYgKG9wdHMuYWxpYXMpIHtcbiAgICAgICAgICAgIF8uZWFjaChvcHRzLmFsaWFzLCBhID0+IHsgdGhpcy5hcmd2W2FdID0gdmFsdWU7IH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgdmFsdWVPckZ1bmN0aW9uQ2FsbF8oZnVuY3Rvcikge1xuICAgICAgICBpZiAodHlwZW9mIGZ1bmN0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBmdW5jdG9yKHRoaXMpO1xuICAgICAgICB9IFxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGZ1bmN0b3I7XG4gICAgfVxuXG4gICAgYXN5bmMgaW5xdWlyZV8oKSB7XG4gICAgICAgIGNvbnN0IGlucXVpcmVyID0gdHJ5UmVxdWlyZSgnaW5xdWlyZXInKTtcblxuICAgICAgICBjb25zdCBkb0lucXVpcmVfID0gKGl0ZW0sIGFyZ0luZGV4KSA9PiBpbnF1aXJlci5wcm9tcHQoW2l0ZW1dKS50aGVuKGFuc3dlcnMgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coKTtcblxuICAgICAgICAgICAgXy5mb3JPd24oYW5zd2VycywgKGFucywgbmFtZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJnSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlT3B0aW9uKG5hbWUsIGFucyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0OiB0aGlzLmFyZ3YuXy5sZW5ndGggPT09IGFyZ0luZGV4O1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXJndi5fID0gdGhpcy5hcmd2Ll8uY29uY2F0KFthbnNdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTsgXG5cbiAgICAgICAgY29uc3QgZG9GaWx0ZXJfID0gYXN5bmMgKG5hbWUsIG9wdCwgYXJnSW5kZXgpID0+IHtcbiAgICAgICAgICAgIGlmIChvcHQuZmlsdGVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmdJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodHlwZW9mIG9wdC5maWx0ZXIgIT09ICdmdW5jdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZENvbmZpZ3VyYXRpb24oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYFRoZSBcImZpbHRlclwiIGluIHRoZSBpbnF1aXJlciBvcHRpb24gZm9yIGFyZ3VtZW50IG9wdGlvbiBcIiR7bmFtZX1cIiBzaG91bGQgYmUgYSBmdW5jdGlvbiFgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBjb21tYW5kTGluZS5vcHRpb25zWyR7bmFtZX1dLmZpbHRlcmApO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVPcHRpb24obmFtZSwgYXdhaXQgb3B0LmZpbHRlcih0aGlzLmFyZ3ZbbmFtZV0sIHRoaXMpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoISh0eXBlb2Ygb3B0LmZpbHRlciAhPT0gJ2Z1bmN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ29uZmlndXJhdGlvbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgVGhlIFwiZmlsdGVyXCIgaW4gdGhlIGlucXVpcmVyIG9wdGlvbiBmb3IgYXJndW1lbnQgdmFsdWUgXCIke25hbWV9XCIgYXQgcG9zaXRpb24gJHthcmdJbmRleH0gc2hvdWxkIGJlIGEgZnVuY3Rpb24hYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgY29tbWFuZExpbmUuYXJndW1lbnRzWyR7YXJnSW5kZXh9XS5maWx0ZXJgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXJndi5fW2FyZ0luZGV4XSA9IGF3YWl0IG9wdC5maWx0ZXIodGhpcy5hcmd2Ll9bYXJnSW5kZXhdLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgYXJnRXhpc3QgPSAobmFtZSwgYXJnSW5kZXgpID0+IHR5cGVvZiBhcmdJbmRleCA9PT0gJ3VuZGVmaW5lZCcgPyAobmFtZSBpbiB0aGlzLmFyZ3YpIDogKHRoaXMuYXJndi5fLmxlbmd0aCA+IGFyZ0luZGV4KTtcblxuICAgICAgICBjb25zdCBwcmVwYXJlSW5xdWlyZV8gPSBhc3luYyAob3B0cywgbmFtZSwgYXJnSW5kZXgpID0+IHtcbiAgICAgICAgICAgIGxldCBhcmdFeGlzdHMgPSBhcmdFeGlzdChuYW1lLCBhcmdJbmRleCk7XG5cbiAgICAgICAgICAgIGlmICgoJ2lucXVpcmUnIGluIG9wdHMpICYmICFhcmdFeGlzdHMpIHsgXG4gICAgICAgICAgICAgICAgLy9uZWVkIGlucXVpcmUgYW5kIHRoZSB2YWx1ZSBub3QgZ2l2ZW4gdGhyb3VnaCBjb21tYW5kIGxpbmVcbiAgICAgICAgICAgICAgICBsZXQgaW5xdWlyZSA9IHRoaXMudmFsdWVPckZ1bmN0aW9uQ2FsbF8ob3B0cy5pbnF1aXJlKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoaW5xdWlyZSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdHlwZTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHEgPSB7IG5hbWU6IG5hbWUsIG1lc3NhZ2U6IG9wdHMucHJvbXB0TWVzc2FnZSB8fCBvcHRzLmRlc2MgfTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5wcm9tcHRUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlID0gb3B0cy5wcm9tcHRUeXBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdsaXN0JyB8fCB0eXBlICA9PT0gJ3Jhd0xpc3QnIHx8IHR5cGUgPT09ICdjaGVja2JveCcgfHwgdHlwZSA9PT0gJ2V4cGFuZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW9wdHMuY2hvaWNlc1Byb3ZpZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ29uZmlndXJhdGlvbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBhcmdJbmRleCA9PT0gJ3VuZGVmaW5lZCcgPyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgTWlzc2luZyBcImNob2ljZXNQcm92aWRlclwiIGluIHRoZSBpbnF1aXJlciBvcHRpb24gZm9yIGFyZ3VtZW50IG9wdGlvbiBcIiR7bmFtZX1cIiFgIDogXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYE1pc3NpbmcgXCJjaG9pY2VzUHJvdmlkZXJcIiBpbiB0aGUgaW5xdWlyZXIgb3B0aW9uIGZvciBhcmd1bWVudCB2YWx1ZSBcIiR7bmFtZX1cIiBhdCBwb3N0aW9uICR7YXJnSW5kZXh9IWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgYXJnSW5kZXggPT09ICd1bmRlZmluZWQnID8gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYGNvbW1hbmRMaW5lLm9wdGlvbnNbJHtuYW1lfV0uY2hvaWNlc1Byb3ZpZGVyYCA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYGNvbW1hbmRMaW5lLmFyZ3VtZW50c1ske2FyZ0luZGV4fV0uY2hvaWNlc1Byb3ZpZGVyYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcS5jaG9pY2VzID0gYXdhaXQgdGhpcy52YWx1ZU9yRnVuY3Rpb25DYWxsXyhvcHRzLmNob2ljZXNQcm92aWRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0cy5ib29sKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlID0gJ2NvbmZpcm0nO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA9ICdpbnB1dCdcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHEudHlwZSA9IHR5cGU7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCdwcm9tcHREZWZhdWx0JyBpbiBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBxLmRlZmF1bHQgPSBhd2FpdCB0aGlzLnZhbHVlT3JGdW5jdGlvbkNhbGxfKG9wdHMucHJvbXB0RGVmYXVsdCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBkb0lucXVpcmVfKHEsIGFyZ0luZGV4KTtcblxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBkb0ZpbHRlcl8obmFtZSwgb3B0cywgYXJnSW5kZXgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmFmdGVySW5xdWlyZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgb3B0cy5hZnRlcklucXVpcmUodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYXJnRXhpc3RzKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgZG9GaWx0ZXJfKG5hbWUsIG9wdHMsIGFyZ0luZGV4KTtcbiAgICAgICAgICAgICAgICBpZiAob3B0cy5vbkFyZ3VtZW50RXhpc3RzKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG9wdHMub25Bcmd1bWVudEV4aXN0cyh0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IFxuXG4gICAgICAgICAgICBpZiAodGhpcy51c2FnZS5zaG93QXJndW1lbnRzICYmIGFyZ0V4aXN0KG5hbWUsIGFyZ0luZGV4KSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJnSW5kZXggPT09ICd1bmRlZmluZWQnKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdvcHRpb24nLCBuYW1lLCBgKCR7b3B0cy5kZXNjfSlgLCAnOicsIHRoaXMuYXJndltuYW1lXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYDwke25hbWV9PmAsICc6JywgdGhpcy5hcmd2Ll9bYXJnSW5kZXhdKTtcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICghXy5pc0VtcHR5KHRoaXMudXNhZ2UuYXJndW1lbnRzKSkge1xuICAgICAgICAgICAgYXdhaXQgZWFjaEFzeW5jXyh0aGlzLnVzYWdlLmFyZ3VtZW50cywgYXN5bmMgKGFyZ09wdCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgeyBuYW1lLCAuLi5vcHRzIH0gPSBhcmdPcHQ7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcHJlcGFyZUlucXVpcmVfKG9wdHMsIG5hbWUsIGluZGV4KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gXy5pc0VtcHR5KHRoaXMudXNhZ2Uub3B0aW9ucykgfHwgZWFjaEFzeW5jXyh0aGlzLnVzYWdlLm9wdGlvbnMsIChvcHRzLCBuYW1lKSA9PiBwcmVwYXJlSW5xdWlyZV8ob3B0cywgbmFtZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHZhbGlkYXRlIHBhcnNlZCBhbmQgZmlsbGVkIGFyZ3VtZW50IG9wdGlvbnMuXG4gICAgICovXG4gICAgYXN5bmMgdmFsaWRhdGVfKCkge1xuICAgICAgICBjb25zdCBjaGVja1JlcXVpcmVfID0gKG9wdHMpID0+IHRoaXMudmFsdWVPckZ1bmN0aW9uQ2FsbF8ob3B0cy5yZXF1aXJlZCk7XG5cbiAgICAgICAgbGV0IGVycm9ycyA9IFtdO1xuXG4gICAgICAgIGlmICghXy5pc0VtcHR5KHRoaXMudXNhZ2UuYXJndW1lbnRzKSkgeyAgICAgXG4gICAgICAgICAgICBsZXQgYXJnTnVtID0gdGhpcy5hcmd2Ll8ubGVuZ3RoO1xuXG4gICAgICAgICAgICBpZiAoYXJnTnVtIDwgdGhpcy51c2FnZS5hcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgbGV0IGFyZ3MgPSBbXTtcblxuICAgICAgICAgICAgICAgIGxldCBpID0gMDtcblxuICAgICAgICAgICAgICAgIGF3YWl0IGVhY2hBc3luY18odGhpcy51c2FnZS5hcmd1bWVudHMsIGFzeW5jIGFyZyA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCByZXF1aXJlZCA9IGF3YWl0IGNoZWNrUmVxdWlyZV8oYXJnKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAocmVxdWlyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpID49IGFyZ051bSkgeyAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbXNnID0gYE1pc3NpbmcgcmVxdWlyZWQgYXJndW1lbnQgXCIke2FyZy5uYW1lfVwiIWA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudXNhZ2Uuc2hvd1VzYWdlT25FcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChtc2cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7ICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBDb21tYW5kTGluZUFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtc2csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmcubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKHRoaXMuYXJndi5fW2krK10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5hcmd2Ll8gPSBhcmdzO1xuICAgICAgICAgICAgfSAgICAgICAgICAgIFxuICAgICAgICB9ICAgICAgICAgIFxuXG4gICAgICAgIHRoaXMudXNhZ2Uub3B0aW9ucyAmJiBhd2FpdCBlYWNoQXN5bmNfKHRoaXMudXNhZ2Uub3B0aW9ucywgYXN5bmMgKG9wdHMsIG5hbWUpID0+IHsgICAgICBcbiAgICAgICAgICAgIGxldCByZXF1aXJlZCA9IGF3YWl0IGNoZWNrUmVxdWlyZV8ob3B0cyk7XG5cbiAgICAgICAgICAgIGlmIChyZXF1aXJlZCAmJiAhKG5hbWUgaW4gdGhpcy5hcmd2KSkge1xuICAgICAgICAgICAgICAgIGxldCBtc2cgPSBgTWlzc2luZyByZXF1aXJlZCBhcmd1bWVudCBvcHRpb24gb2YgXCIke25hbWV9XCIhYDtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnVzYWdlLnNob3dVc2FnZU9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnB1c2gobXNnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQ29tbWFuZExpbmVBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgbXNnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoZXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuc2hvd1VzYWdlKHtcbiAgICAgICAgICAgICAgICBhZnRlckJhbm5lcjogKCkgPT4gJ0Vycm9yKHMpOlxcbicgKyBlcnJvcnMubWFwKG1zZyA9PiAnIC0gJyArIG1zZykuam9pbignXFxuJykgKyAnXFxuXFxuJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGZpbGxTaWxlbnRNb2RlRGVmYXVsdHNfKCkge1xuICAgICAgICBhd2FpdCBlYWNoQXN5bmNfKHRoaXMudXNhZ2UuYXJndW1lbnRzLCBhc3luYyAoYXJnLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuYXJndi5fLmxlbmd0aCA8PSBpbmRleCkge1xuICAgICAgICAgICAgICAgIGlmIChhcmcuaGFzT3duUHJvcGVydHkoJ3NpbGVudE1vZGVEZWZhdWx0JykpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuYXJndi5fLmxlbmd0aDsgaSA8IGluZGV4OyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXJndi5fLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXJndi5fLnB1c2goYXdhaXQgdGhpcy52YWx1ZU9yRnVuY3Rpb25DYWxsXyhhcmcuc2lsZW50TW9kZURlZmF1bHQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGF3YWl0IGVhY2hBc3luY18odGhpcy51c2FnZS5vcHRpb25zLCBhc3luYyAob3B0cywgbmFtZSkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmFyZ3YuaGFzT3duUHJvcGVydHkobmFtZSkgJiYgb3B0cy5oYXNPd25Qcm9wZXJ0eSgnc2lsZW50TW9kZURlZmF1bHQnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlT3B0aW9uKG5hbWUsIGF3YWl0IHRoaXMudmFsdWVPckZ1bmN0aW9uQ2FsbF8ob3B0cy5zaWxlbnRNb2RlRGVmYXVsdCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBnZXRCYW5uZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLnVzYWdlLmJhbm5lcikge1xuICAgICAgICAgICAgbGV0IGJhbm5lciA9ICcnO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMudXNhZ2UuYmFubmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgYmFubmVyICs9IHRoaXMudXNhZ2UuYmFubmVyKHRoaXMpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy51c2FnZS5iYW5uZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgYmFubmVyICs9IHRoaXMudXNhZ2UuYmFubmVyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZENvbmZpZ3VyYXRpb24oXG4gICAgICAgICAgICAgICAgICAgICdJbnZhbGlkIGJhbm5lciB2YWx1ZSBvZiBjb21tYW5kTGluZSBmZWF0dXJlLicsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwLFxuICAgICAgICAgICAgICAgICAgICBgY29tbWFuZExpbmUuYmFubmVyYFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBiYW5uZXIgKz0gJ1xcbic7XG5cbiAgICAgICAgICAgIHJldHVybiBiYW5uZXI7XG4gICAgICAgIH0gICAgICAgIFxuXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgZ2V0VXNhZ2UoaW5qZWN0cykge1xuICAgICAgICBpbmplY3RzID0geyAuLi50aGlzLmluamVjdHMsIC4uLmluamVjdHMgfTtcblxuICAgICAgICBsZXQgdXNhZ2UgPSAnJztcblxuICAgICAgICBsZXQgYmFubmVyID0gIXRoaXMuYmFubmVyU2hvd24gJiYgdGhpcy5nZXRCYW5uZXIoKTtcbiAgICAgICAgaWYgKGJhbm5lcikge1xuICAgICAgICAgICAgdXNhZ2UgKz0gYmFubmVyICsgJ1xcbic7XG4gICAgICAgIH0gICAgICAgIFxuICAgIFxuICAgICAgICBpZiAoaW5qZWN0cyAmJiBpbmplY3RzLmFmdGVyQmFubmVyKSB7XG4gICAgICAgICAgICB1c2FnZSArPSBpbmplY3RzLmFmdGVyQmFubmVyKCk7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgbGV0IGZtdEFyZ3MgPSAnJztcbiAgICAgICAgaWYgKCFfLmlzRW1wdHkodGhpcy51c2FnZS5hcmd1bWVudHMpKSB7XG4gICAgICAgICAgICBmbXRBcmdzID0gJyAnICsgdGhpcy51c2FnZS5hcmd1bWVudHMubWFwKGFyZyA9PiBhcmcucmVxdWlyZWQgPyBgPCR7YXJnLm5hbWV9PmAgOiBgWyR7YXJnLm5hbWV9XWApLmpvaW4oJyAnKTtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICB1c2FnZSArPSBgVXNhZ2U6ICR7dGhpcy51c2FnZS5wcm9ncmFtIHx8IHBhdGguYmFzZW5hbWUocHJvY2Vzcy5hcmd2WzFdKX0ke2ZtdEFyZ3N9IFtvcHRpb25zXVxcblxcbmA7XG4gICAgXG4gICAgICAgIGlmIChpbmplY3RzICYmIGluamVjdHMuYWZ0ZXJDb21tYW5kTGluZSkge1xuICAgICAgICAgICAgdXNhZ2UgKz0gaW5qZWN0cy5hZnRlckNvbW1hbmRMaW5lKCk7XG4gICAgICAgIH0gXG4gICAgICAgIFxuICAgICAgICBpZiAoIV8uaXNFbXB0eSh0aGlzLnVzYWdlLm9wdGlvbnMpKSB7XG4gICAgICAgICAgICB1c2FnZSArPSBgT3B0aW9uczpcXG5gO1xuICAgICAgICAgICAgXy5mb3JPd24odGhpcy51c2FnZS5vcHRpb25zLCAob3B0cywgbmFtZSkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBsaW5lID0gJyAgJyArIG9wdGlvbkRlY29yYXRvcihuYW1lKTtcbiAgICAgICAgICAgICAgICBpZiAob3B0cy5hbGlhcykge1xuICAgICAgICAgICAgICAgICAgICBsaW5lICs9IF8ucmVkdWNlKG9wdHMuYWxpYXMsIChzdW0sIGEpID0+IChzdW0gKyAnLCAnICsgb3B0aW9uRGVjb3JhdG9yKGEpKSwgJycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICBsaW5lICs9ICdcXG4nO1xuICAgICAgICAgICAgICAgIGxpbmUgKz0gJyAgICAnICsgb3B0cy5kZXNjICsgJ1xcbic7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCdkZWZhdWx0JyBpbiBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpbmUgKz0gJyAgICBkZWZhdWx0OiAnICsgb3B0cy5kZWZhdWx0LnRvU3RyaW5nKCkgKyAnXFxuJztcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKG9wdHMucmVxdWlyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRzLnJlcXVpcmVkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lICs9ICcgICAgY29uZGl0aW9uYWxcXG4nO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluZSArPSAnICAgIHJlcXVpcmVkXFxuJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChvcHRzLmNob2ljZXNQcm92aWRlciAmJiBBcnJheS5pc0FycmF5KG9wdHMuY2hvaWNlc1Byb3ZpZGVyKSkge1xuICAgICAgICAgICAgICAgICAgICBsaW5lICs9ICcgICAgYXZhaWxhYmxlIHZhbHVlczpcXG4nO1xuICAgICAgICAgICAgICAgICAgICBvcHRzLmNob2ljZXNQcm92aWRlci5mb3JFYWNoKGNob2ljZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lICs9IGAgICAgICAgIFwiJHtjaG9pY2UudmFsdWV9XCI6ICR7Y2hvaWNlLm5hbWV9XFxuYDtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIGxpbmUgKz0gJ1xcbic7XG4gICAgXG4gICAgICAgICAgICAgICAgdXNhZ2UgKz0gbGluZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9ICAgICAgICBcbiAgICBcbiAgICAgICAgaWYgKGluamVjdHMgJiYgaW5qZWN0cy5hZnRlck9wdGlvbnMpIHtcbiAgICAgICAgICAgIHVzYWdlICs9IGluamVjdHMuYWZ0ZXJPcHRpb25zKCk7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgcmV0dXJuIHVzYWdlO1xuICAgIH1cblxuICAgIHNob3dCYW5uYXIoKSB7XG4gICAgICAgIGxldCBiYW5uZXIgPSB0aGlzLmdldEJhbm5lcigpO1xuICAgICAgICBpZiAoYmFubmVyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhiYW5uZXIpO1xuICAgICAgICAgICAgdGhpcy5iYW5uZXJTaG93biA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgc2hvd1VzYWdlKGluamVjdHMpIHtcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5nZXRVc2FnZShpbmplY3RzKSk7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAvKipcbiAgICAgKiBUaGlzIGZlYXR1cmUgaXMgbG9hZGVkIGF0IGNvbmZpZ3VyYXRpb24gc3RhZ2VcbiAgICAgKiBAbWVtYmVyIHtzdHJpbmd9XG4gICAgICovXG4gICAgdHlwZTogRmVhdHVyZS5JTklULFxuXG4gICAgLyoqXG4gICAgICogTG9hZCB0aGUgZmVhdHVyZVxuICAgICAqIEBwYXJhbSB7QXBwfSBhcHAgLSBUaGUgY2xpIGFwcCBtb2R1bGUgb2JqZWN0XG4gICAgICogQHBhcmFtIHtvYmplY3R9IHVzYWdlT3B0aW9ucyAtIE9wdGlvbnMgZm9yIHRoZSBmZWF0dXJlICAgICBcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW3VzYWdlT3B0aW9ucy5iYW5uZXJdIC0gQmFubmVyIG1lc3NhZ2Ugb3IgYmFubmVyIGdlbmVyYXRvciBmdW5jdGlvblxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbdXNhZ2VPcHRpb25zLnByb2dyYW1dIC0gRXhlY3V0YWJsZSBuYW1lXG4gICAgICogQHByb3BlcnR5IHthcnJheX0gW3VzYWdlT3B0aW9ucy5hcmd1bWVudHNdIC0gQ29tbWFuZCBsaW5lIGFyZ3VtZW50cywgaWRlbnRpZmllZCBieSB0aGUgcG9zaXRpb24gb2YgYXBwZWFyYW5jZVxuICAgICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBbdXNhZ2VPcHRpb25zLm9wdGlvbnNdIC0gQ29tbWFuZCBsaW5lIG9wdGlvbnMgICAgIFxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbnxmdW5jdGlvbn0gW3VzYWdlT3B0aW9ucy5zaWxlbnRNb2RlXSAtIFdoZXRoZXIgdG8gcnVuIGluIHNpbGllbnQgbW9kZSwgZGVmYXVsdCBmYWxzZVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbnxmdW5jdGlvbn0gW3VzYWdlT3B0aW9ucy5ub25WYWxpZGF0aW9uTW9kZV0gLSBXaGV0aGVyIHRvIHJ1biB2YWxpZGF0aW9uXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFt1c2FnZU9wdGlvbnMuaGVscE9wdGlvbj0nPyddIC0gVGhlIG9wdGlvbiB3aGljaCBhY3QgYXMgaGVscFxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3VzYWdlT3B0aW9ucy5zaG93VXNhZ2VPbkVycm9yXVxuICAgICAqIFxuICAgICAqIEBleGFtcGxlXG4gICAgICogICBvcHRpb25zOiB7IFthcmd1bWVudEtleV06IHtcbiAgICAgKiAgICAgIGRlc2MsIC8vIHtzdHJpbmd9IC0gZGVzY3JpcHRpb25cbiAgICAgKiAgICAgIGFsaWFzLCAvLyB7YXJyYXkuPHN0cmluZz59IC0gYWxpYXMgYXJyYXlcbiAgICAgKiAgICAgIGJvb2wsIC8vIHtib29sZWFufSAtIHdoZXRoZXIgaXQgaXMgYSBib29sZWFuIHZhbHVlXG4gICAgICogICAgICBkZWZhdWx0LCAvLyB7Kn0gLSBkZWZhdWx0IHZhbHVlXG4gICAgICogICAgICBpbnF1aXJlLCAvLyB7Ym9vbGVhbiB8IGZ1bmN0aW9uKGNsaSkuPGJvb2xlYW4+fSAtIHdoZXRoZXIgdG8gZW5hYmxlIGludGVyYWN0aXZlIHF1ZXJ5XG4gICAgICogICAgICBwcm9tcHRNZXNzYWdlLCAvLyB7c3RyaW5nfSAtIHByb21wdCBtZXNzYWdlIGZvciBxdWVyeSwgd2lsbCB1c2UgZGVzYyBpZiBub3Qgc2V0XG4gICAgICogICAgICBwcm9tcHRUeXBlLCAvLyB7c3RyaW5nfSAtIHByb21wdCB0eXBlLCBjYW4gYmUgb25lIG9mIFsgaW5wdXQsIG51bWJlciwgY29uZmlybSwgbGlzdCwgcmF3bGlzdCwgZXhwYW5kLCBjaGVja2JveCwgcGFzc3dvcmQsIGVkaXRvciBdXG4gICAgICogICAgICBwcm9tcHREZWZhdWx0LCAvLyB7KiB8IGZ1bmN0aW9uKGNsaSkuPCo+fSAtIGRlZmF1bHQgdmFsdWUgYXBwZWFyZWQgb24gcXVlcnkgb3IgYSBhc3luYyBmdW5jdGlvbiB0byByZXR1cm4gdGhlIGRlZmF1bHQgdmFsdWVcbiAgICAgKiAgICAgIGNob2ljZXNQcm92aWRlciwgLy8ge2FycmF5IHwgZnVuY3Rpb24oY2xpKS48YXJyYXk+IHwgZnVuY3Rpb24uPGZ1bmN0aW9uKHN0cmluZykuPGFycmF5Pj59IC0gcmVxdWlyZWQgZm9yIHByb21wdCB0eXBlIGxpc3QsIHJhd2xpc3QsIGV4cGFuZCwgY2hlY2tib3hcbiAgICAgKiAgICAgIGZpbHRlciwgLy8ge2Z1bmN0aW9uKGFyZ3YsIGNsaSkuPGFyZ3Y+fSAtIGZpbHRlciB0byBwcm9jZXNzIHRoZSBhcmd1bWVudCB2YWx1ZVxuICAgICAqICAgICAgYWZ0ZXJJbnF1aXJlLCAvLyB7ZnVuY3Rpb259IC0gYWZ0ZXIgaW5xdWlyZSBob29rLFxuICAgICAqICAgICAgb25Bcmd1bWVudEV4aXN0cywgLy8ge2Z1bmN0aW9ufSAtIHdoZW4gYXJndW1lbnQgZXhpc3RzLFxuICAgICAqICAgICAgc2lsZW50TW9kZURlZmF1bHQgLy8geyp9IC0gZGVmYXVsdCB2YWx1ZSB3aGVuIHJ1biBpbiBzaWxpZW50IG1vZGUsXG4gICAgICogICB9IH1cbiAgICAgKiBcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZS48Kj59XG4gICAgICovXG4gICAgbG9hZF86IGFzeW5jIChhcHAsIHVzYWdlT3B0aW9ucykgPT4geyAgIFxuICAgICAgICBhcHAuY29tbWFuZExpbmUgPSBuZXcgQ29tbWFuZExpbmUoYXBwLCB1c2FnZU9wdGlvbnMpOyAgICAgICAgICAgICBcblxuICAgICAgICBsZXQgc2lsZW50TW9kZSA9IHVzYWdlT3B0aW9ucy5zaWxlbnRNb2RlO1xuXG4gICAgICAgIGlmIChzaWxlbnRNb2RlICYmIHR5cGVvZiBzaWxlbnRNb2RlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBzaWxlbnRNb2RlID0gc2lsZW50TW9kZShhcHAuY29tbWFuZExpbmUpO1xuICAgICAgICB9ICBcblxuICAgICAgICBhcHAuY29tbWFuZExpbmUuc2lsZW50TW9kZSA9IHNpbGVudE1vZGU7XG5cbiAgICAgICAgaWYgKHNpbGVudE1vZGUpIHtcbiAgICAgICAgICAgIGF3YWl0IGFwcC5jb21tYW5kTGluZS5maWxsU2lsZW50TW9kZURlZmF1bHRzXygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXBwLmNvbW1hbmRMaW5lLnNob3dCYW5uYXIoKTtcbiAgICAgICAgICAgIGF3YWl0IGFwcC5jb21tYW5kTGluZS5pbnF1aXJlXygpOyAgICAgICAgICAgIFxuICAgICAgICB9ICAgICAgICBcblxuICAgICAgICBsZXQgbm9uVmFsaWRhdGlvbk1vZGUgPSB1c2FnZU9wdGlvbnMubm9uVmFsaWRhdGlvbk1vZGU7XG5cbiAgICAgICAgaWYgKG5vblZhbGlkYXRpb25Nb2RlICYmIHR5cGVvZiBub25WYWxpZGF0aW9uTW9kZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgbm9uVmFsaWRhdGlvbk1vZGUgPSBub25WYWxpZGF0aW9uTW9kZShhcHAuY29tbWFuZExpbmUpO1xuICAgICAgICB9ICBcblxuICAgICAgICBhcHAuY29tbWFuZExpbmUubm9uVmFsaWRhdGlvbk1vZGUgPSBub25WYWxpZGF0aW9uTW9kZTtcblxuICAgICAgICBpZiAoIW5vblZhbGlkYXRpb25Nb2RlKSB7ICAgICAgICAgICAgXG4gICAgICAgICAgICBhd2FpdCBhcHAuY29tbWFuZExpbmUudmFsaWRhdGVfKCk7XG4gICAgICAgIH1cbiAgICB9XG59OyJdfQ==