"use strict";

require("source-map-support/register");

const path = require('path');

const Feature = require('../enum/Feature');

const {
  _,
  putIntoBucket,
  setValueByPath,
  eachAsync_
} = require('rk-utils');

const {
  tryRequire
} = require('../utils/Helpers');

const {
  ApplicationError,
  InvalidConfiguration
} = require('../utils/Errors');

function translateMinimistOptions(opts) {
  let m = {};

  _.forOwn(opts, (detail, name) => {
    if (detail.bool) {
      putIntoBucket(m, 'boolean', name);
    } else {
      putIntoBucket(m, 'string', name);
    }

    if ('default' in detail) {
      setValueByPath(m, `default.${name}`, detail.default);
    }

    if (detail.alias) {
      setValueByPath(m, `alias.${name}`, detail.alias);
    }
  });

  return m;
}

function optionDecorator(name) {
  return name.length == 1 ? '-' + name : '--' + name;
}

const gArgv = process.argv.slice(2);

class CommandLineArgumentError extends ApplicationError {
  constructor(message, name, nonOption) {
    super(message, 'E_CLI_INVALID_ARG', {
      name,
      nonOption
    });
  }

}

class CommandLine {
  constructor(app, usage) {
    this.app = app;
    this.usage = usage;
    this.parse(usage.options);
  }

  injectUsage(injects) {
    this.injects = injects;
  }

  parse(options) {
    const minimist = tryRequire('minimist');
    this.argv = minimist(gArgv, translateMinimistOptions(options));
  }

  option(name) {
    return this.argv[name];
  }

  arg(name) {
    if (this.args[name]) return this.args[name];

    let index = _.findIndex(this.usage.arguments, arg => arg.name === name);

    if (index === -1 || this.argv._.length <= index) {
      return undefined;
    }

    this.args || (this.args = {});
    return this.args[name] = this.argv._[index];
  }

  updateOption(name, value) {
    this.argv[name] = value;
    let opts = this.usage.options[name];

    if (opts.alias) {
      _.each(opts.alias, a => {
        this.argv[a] = value;
      });
    }
  }

  async inquire_() {
    const inquirer = tryRequire('inquirer');

    const doInquire_ = (item, argIndex) => inquirer.prompt([item]).then(answers => {
      console.log();

      _.forOwn(answers, (ans, name) => {
        if (typeof argIndex === 'undefined') {
          this.updateOption(name, ans);
        } else {
          if (!(this.argv._.length === argIndex)) {
            throw new Error("Assertion failed: this.argv._.length === argIndex");
          }

          this.argv._ = this.argv._.concat([ans]);
        }
      });
    });

    const doFilter_ = async (name, opt, argIndex) => {
      if (opt.filter) {
        if (typeof argIndex === 'undefined') {
          if (!(typeof opt.filter !== 'function')) {
            throw new InvalidConfiguration(`The "filter" in the inquirer option for argument option "${name}" should be a function!`, this.app, `commandLine.options[${name}].filter`);
          }

          this.updateOption(name, (await opt.filter(this.argv[name], this)));
        } else {
          if (!(typeof opt.filter !== 'function')) {
            throw new InvalidConfiguration(`The "filter" in the inquirer option for argument value "${name}" at position ${argIndex} should be a function!`, this.app, `commandLine.arguments[${argIndex}].filter`);
          }

          this.argv._[argIndex] = await opt.filter(this.argv._[argIndex], this);
        }
      }
    };

    const argExist = (name, argIndex) => typeof argIndex === 'undefined' ? name in this.argv : this.argv._.length > argIndex;

    const prepareInquire_ = async (opts, name, argIndex) => {
      let argExists = argExist(name, argIndex);

      if ('inquire' in opts && !argExists) {
        let inquire = opts.inquire;

        if (typeof opts.inquire === 'function') {
          inquire = await opts.inquire(this);
        }

        if (inquire) {
          let type;
          let q = {
            name: name,
            message: opts.promptMessage || opts.desc
          };

          if (opts.promptType) {
            type = opts.promptType;

            if (type === 'list' || type === 'rawList' || type === 'checkbox' || type === 'expand') {
              if (!opts.choicesProvider) {
                throw new InvalidConfiguration(typeof argIndex === 'undefined' ? `Missing "choicesProvider" in the inquirer option for argument option "${name}"!` : `Missing "choicesProvider" in the inquirer option for argument value "${name}" at postion ${argIndex}!`, app, typeof argIndex === 'undefined' ? `commandLine.options[${name}].choicesProvider` : `commandLine.arguments[${argIndex}].choicesProvider`);
              }

              if (typeof opts.choicesProvider === 'function') {
                q.choices = await opts.choicesProvider(this);
              } else {
                q.choices = await opts.choicesProvider;
              }
            }
          } else if (opts.bool) {
            type = 'confirm';
          } else {
            type = 'input';
          }

          q.type = type;

          if ('promptDefault' in opts) {
            if (typeof opts.promptDefault === 'function') {
              q.default = await opts.promptDefault(this);
            } else {
              q.default = opts.promptDefault;
            }
          }

          await doInquire_(q, argIndex);
          await doFilter_(name, opts, argIndex);

          if (opts.afterInquire) {
            await opts.afterInquire(this);
          }
        }
      } else if (argExists) {
        await doFilter_(name, opts, argIndex);
      }

      if (this.usage.showArguments && argExist(name, argIndex)) {
        if (typeof argIndex === 'undefined') {
          console.log('option', name, `(${opts.desc})`, ':', this.argv[name]);
        } else {
          console.log(`<${name}>`, ':', this.argv._[argIndex]);
        }
      }
    };

    if (!_.isEmpty(this.usage.arguments)) {
      await eachAsync_(this.usage.arguments, async (argOpt, index) => {
        let {
          name,
          ...opts
        } = argOpt;
        return prepareInquire_(opts, name, index);
      });
    }

    return _.isEmpty(this.usage.options) || eachAsync_(this.usage.options, (opts, name) => prepareInquire_(opts, name));
  }

  async validate_() {
    const checkRequire_ = async opts => {
      let required = opts.required;

      if (typeof required === 'function') {
        required = await required();
      }

      return required;
    };

    let errors = [];

    if (!_.isEmpty(this.usage.arguments)) {
      let argNum = this.argv._.length;

      if (argNum < this.usage.arguments.length) {
        let args = [];
        let i = 0;
        await eachAsync_(this.usage.arguments, async arg => {
          let required = await checkRequire_(arg);

          if (required) {
            if (i >= argNum) {
              let msg = `Missing required argument "${arg.name}"!`;

              if (this.usage.showUsageOnError) {
                errors.push(msg);
              } else {
                throw new CommandLineArgumentError(msg, arg.name, true);
              }
            } else {
              args.push(this.argv._[i++]);
            }
          }
        });
        this.argv._ = args;
      }
    }

    await eachAsync_(this.usage.options, async (opts, name) => {
      let required = await checkRequire_(opts);

      if (required && !(name in this.argv)) {
        let msg = `Missing required argument option of "${name}"!`;

        if (this.usage.showUsageOnError) {
          errors.push(msg);
        } else {
          throw new CommandLineArgumentError(msg, name);
        }
      }
    });

    if (errors.length > 0) {
      this.showUsage({
        afterBanner: () => 'Error(s):\n' + errors.map(msg => ' - ' + msg).join('\n') + '\n\n'
      });
      process.exit(1);
    }
  }

  async fillSilentModeDefaults_() {
    await eachAsync_(this.usage.arguments, async (arg, index) => {
      if (this.argv._.length <= index) {
        if (arg.hasOwnProperty('silentModeDefault')) {
          for (let i = this.argv._.length; i < index; i++) {
            this.argv._.push(undefined);
          }

          this.argv._.push(arg['silentModeDefault']);
        }
      }
    });
    await eachAsync_(this.usage.options, async (opts, name) => {
      if (!this.argv.hasOwnProperty(name) && opts.hasOwnProperty('silentModeDefault')) {
        this.updateOption(name, opts.silentModeDefault);
      }
    });
  }

  getBanner() {
    if (this.usage.banner) {
      let banner = '';

      if (typeof this.usage.banner === 'function') {
        banner += this.usage.banner(this);
      } else if (typeof this.usage.banner === 'string') {
        banner += this.usage.banner;
      } else {
        throw new InvalidConfiguration('Invalid banner value of commandLine feature.', this.app, `commandLine.banner`);
      }

      banner += '\n';
      return banner;
    }

    return undefined;
  }

  getUsage(injects) {
    injects = { ...this.injects,
      ...injects
    };
    let usage = '';
    let banner = !this.bannerShown && this.getBanner();

    if (banner) {
      usage += banner + '\n';
    }

    if (injects && injects.afterBanner) {
      usage += injects.afterBanner();
    }

    let fmtArgs = '';

    if (!_.isEmpty(this.usage.arguments)) {
      fmtArgs = ' ' + this.usage.arguments.map(arg => arg.required ? `<${arg.name}>` : `[${arg.name}]`).join(' ');
    }

    usage += `Usage: ${this.usage.program || path.basename(process.argv[1])}${fmtArgs} [options]\n\n`;

    if (injects && injects.afterCommandLine) {
      usage += injects.afterCommandLine();
    }

    if (!_.isEmpty(this.usage.options)) {
      usage += `Options:\n`;

      _.forOwn(this.usage.options, (opts, name) => {
        let line = '  ' + optionDecorator(name);

        if (opts.alias) {
          line += _.reduce(opts.alias, (sum, a) => sum + ', ' + optionDecorator(a), '');
        }

        line += '\n';
        line += '    ' + opts.desc + '\n';

        if ('default' in opts) {
          line += '    default: ' + opts.default.toString() + '\n';
        }

        if (opts.required) {
          if (typeof opts.required === 'function') {
            line += '    conditional\n';
          } else {
            line += '    required\n';
          }
        }

        if (opts.choicesProvider && Array.isArray(opts.choicesProvider)) {
          line += '    available values:\n';
          opts.choicesProvider.forEach(choice => {
            line += `        "${choice.value}": ${choice.name}\n`;
          });
        }

        line += '\n';
        usage += line;
      });
    }

    if (injects && injects.afterOptions) {
      usage += injects.afterOptions();
    }

    return usage;
  }

  showBannar() {
    let banner = this.getBanner();

    if (banner) {
      console.log(banner);
      this.bannerShown = true;
    }
  }

  showUsage(injects) {
    console.log(this.getUsage(injects));
  }

}

module.exports = {
  type: Feature.INIT,
  load_: async (app, usageOptions) => {
    app.commandLine = new CommandLine(app, usageOptions);
    let silentMode = usageOptions.silentMode;

    if (silentMode && typeof silentMode === 'function') {
      silentMode = silentMode(app.commandLine);
    }

    app.commandLine.silentMode = silentMode;

    if (silentMode) {
      await app.commandLine.fillSilentModeDefaults_();
    } else {
      app.commandLine.showBannar();
      await app.commandLine.inquire_();
    }

    let nonValidationMode = usageOptions.nonValidationMode;

    if (nonValidationMode && typeof nonValidationMode === 'function') {
      nonValidationMode = nonValidationMode(app.commandLine);
    }

    app.commandLine.nonValidationMode = nonValidationMode;

    if (!nonValidationMode) {
      await app.commandLine.validate_();
    }
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWF0dXJlcy9jb21tYW5kTGluZS5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsIkZlYXR1cmUiLCJfIiwicHV0SW50b0J1Y2tldCIsInNldFZhbHVlQnlQYXRoIiwiZWFjaEFzeW5jXyIsInRyeVJlcXVpcmUiLCJBcHBsaWNhdGlvbkVycm9yIiwiSW52YWxpZENvbmZpZ3VyYXRpb24iLCJ0cmFuc2xhdGVNaW5pbWlzdE9wdGlvbnMiLCJvcHRzIiwibSIsImZvck93biIsImRldGFpbCIsIm5hbWUiLCJib29sIiwiZGVmYXVsdCIsImFsaWFzIiwib3B0aW9uRGVjb3JhdG9yIiwibGVuZ3RoIiwiZ0FyZ3YiLCJwcm9jZXNzIiwiYXJndiIsInNsaWNlIiwiQ29tbWFuZExpbmVBcmd1bWVudEVycm9yIiwiY29uc3RydWN0b3IiLCJtZXNzYWdlIiwibm9uT3B0aW9uIiwiQ29tbWFuZExpbmUiLCJhcHAiLCJ1c2FnZSIsInBhcnNlIiwib3B0aW9ucyIsImluamVjdFVzYWdlIiwiaW5qZWN0cyIsIm1pbmltaXN0Iiwib3B0aW9uIiwiYXJnIiwiYXJncyIsImluZGV4IiwiZmluZEluZGV4IiwiYXJndW1lbnRzIiwidW5kZWZpbmVkIiwidXBkYXRlT3B0aW9uIiwidmFsdWUiLCJlYWNoIiwiYSIsImlucXVpcmVfIiwiaW5xdWlyZXIiLCJkb0lucXVpcmVfIiwiaXRlbSIsImFyZ0luZGV4IiwicHJvbXB0IiwidGhlbiIsImFuc3dlcnMiLCJjb25zb2xlIiwibG9nIiwiYW5zIiwiY29uY2F0IiwiZG9GaWx0ZXJfIiwib3B0IiwiZmlsdGVyIiwiYXJnRXhpc3QiLCJwcmVwYXJlSW5xdWlyZV8iLCJhcmdFeGlzdHMiLCJpbnF1aXJlIiwidHlwZSIsInEiLCJwcm9tcHRNZXNzYWdlIiwiZGVzYyIsInByb21wdFR5cGUiLCJjaG9pY2VzUHJvdmlkZXIiLCJjaG9pY2VzIiwicHJvbXB0RGVmYXVsdCIsImFmdGVySW5xdWlyZSIsInNob3dBcmd1bWVudHMiLCJpc0VtcHR5IiwiYXJnT3B0IiwidmFsaWRhdGVfIiwiY2hlY2tSZXF1aXJlXyIsInJlcXVpcmVkIiwiZXJyb3JzIiwiYXJnTnVtIiwiaSIsIm1zZyIsInNob3dVc2FnZU9uRXJyb3IiLCJwdXNoIiwic2hvd1VzYWdlIiwiYWZ0ZXJCYW5uZXIiLCJtYXAiLCJqb2luIiwiZXhpdCIsImZpbGxTaWxlbnRNb2RlRGVmYXVsdHNfIiwiaGFzT3duUHJvcGVydHkiLCJzaWxlbnRNb2RlRGVmYXVsdCIsImdldEJhbm5lciIsImJhbm5lciIsImdldFVzYWdlIiwiYmFubmVyU2hvd24iLCJmbXRBcmdzIiwicHJvZ3JhbSIsImJhc2VuYW1lIiwiYWZ0ZXJDb21tYW5kTGluZSIsImxpbmUiLCJyZWR1Y2UiLCJzdW0iLCJ0b1N0cmluZyIsIkFycmF5IiwiaXNBcnJheSIsImZvckVhY2giLCJjaG9pY2UiLCJhZnRlck9wdGlvbnMiLCJzaG93QmFubmFyIiwibW9kdWxlIiwiZXhwb3J0cyIsIklOSVQiLCJsb2FkXyIsInVzYWdlT3B0aW9ucyIsImNvbW1hbmRMaW5lIiwic2lsZW50TW9kZSIsIm5vblZhbGlkYXRpb25Nb2RlIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQU9BLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsTUFBTUMsT0FBTyxHQUFHRCxPQUFPLENBQUMsaUJBQUQsQ0FBdkI7O0FBQ0EsTUFBTTtBQUFFRSxFQUFBQSxDQUFGO0FBQUtDLEVBQUFBLGFBQUw7QUFBb0JDLEVBQUFBLGNBQXBCO0FBQW9DQyxFQUFBQTtBQUFwQyxJQUFtREwsT0FBTyxDQUFDLFVBQUQsQ0FBaEU7O0FBQ0EsTUFBTTtBQUFFTSxFQUFBQTtBQUFGLElBQWlCTixPQUFPLENBQUMsa0JBQUQsQ0FBOUI7O0FBQ0EsTUFBTTtBQUFFTyxFQUFBQSxnQkFBRjtBQUFvQkMsRUFBQUE7QUFBcEIsSUFBNkNSLE9BQU8sQ0FBQyxpQkFBRCxDQUExRDs7QUFFQSxTQUFTUyx3QkFBVCxDQUFrQ0MsSUFBbEMs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LEVBQWtFO0FBQzlEQSxNQUFBQSxpQkFBaUIsR0FBR0EsaUJBQWlCLENBQUMzRixHQUFHLENBQUN5RixXQUFMLENBQXJDO0FBQ0g7O0FBRUR6RixJQUFBQSxHQUFHLENBQUN5RixXQUFKLENBQWdCRSxpQkFBaEIsR0FBb0NBLGlCQUFwQzs7QUFFQSxRQUFJLENBQUNBLGlCQUFMLEVBQXdCO0FBQ3BCLFlBQU0zRixHQUFHLENBQUN5RixXQUFKLENBQWdCeEMsU0FBaEIsRUFBTjtBQUNIO0FBQ0o7QUFsRVksQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBQYXJzZSBjb21tYW5kIGxpbmUgYXJndW1lbnRzIHVzaW5nIG1pbmltaXN0IGFuZCBzdG9yZSB0aGUgcGFyc2VkIG9iamVjdCBpbnRvIGFwcC5hcmd2LCBhbmQgYWRkIGFwcC5zaG93VXNhZ2UoKSBoZWxwZXIgZnVuY3Rpb25cbiAqIEBtb2R1bGUgRmVhdHVyZV9Db21tYW5kTGluZVxuICovXG5cbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCBGZWF0dXJlID0gcmVxdWlyZSgnLi4vZW51bS9GZWF0dXJlJyk7XG5jb25zdCB7IF8sIHB1dEludG9CdWNrZXQsIHNldFZhbHVlQnlQYXRoLCBlYWNoQXN5bmNfIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgeyB0cnlSZXF1aXJlIH0gPSByZXF1aXJlKCcuLi91dGlscy9IZWxwZXJzJyk7XG5jb25zdCB7IEFwcGxpY2F0aW9uRXJyb3IsIEludmFsaWRDb25maWd1cmF0aW9uIH0gPSByZXF1aXJlKCcuLi91dGlscy9FcnJvcnMnKVxuXG5mdW5jdGlvbiB0cmFuc2xhdGVNaW5pbWlzdE9wdGlvbnMob3B0cykge1xuICAgIGxldCBtID0ge307XG5cbiAgICBfLmZvck93bihvcHRzLCAoZGV0YWlsLCBuYW1lKSA9PiB7XG4gICAgICAgIGlmIChkZXRhaWwuYm9vbCkge1xuICAgICAgICAgICAgcHV0SW50b0J1Y2tldChtLCAnYm9vbGVhbicsIG5hbWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHV0SW50b0J1Y2tldChtLCAnc3RyaW5nJywgbmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJ2RlZmF1bHQnIGluIGRldGFpbCkge1xuICAgICAgICAgICAgc2V0VmFsdWVCeVBhdGgobSwgYGRlZmF1bHQuJHtuYW1lfWAsIGRldGFpbC5kZWZhdWx0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkZXRhaWwuYWxpYXMpIHtcbiAgICAgICAgICAgIHNldFZhbHVlQnlQYXRoKG0sIGBhbGlhcy4ke25hbWV9YCwgZGV0YWlsLmFsaWFzKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG07XG59XG5cbmZ1bmN0aW9uIG9wdGlvbkRlY29yYXRvcihuYW1lKSB7XG4gICAgcmV0dXJuIG5hbWUubGVuZ3RoID09IDEgPyAoJy0nICsgbmFtZSkgOiAoJy0tJyArIG5hbWUpO1xufVxuXG5jb25zdCBnQXJndiA9IHByb2Nlc3MuYXJndi5zbGljZSgyKTtcblxuLyoqXG4gKiBFcnJvciBjYXVzZWQgYnkgY29tbWFuZCBsaW5lIGFyZ3VtZW50cy5cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgQXBwbGljYXRpb25FcnJvciAgXG4gKi9cbmNsYXNzIENvbW1hbmRMaW5lQXJndW1lbnRFcnJvciBleHRlbmRzIEFwcGxpY2F0aW9uRXJyb3Ige1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIC0gRXJyb3IgbWVzc2FnZSAgICAgXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgcmVsYXRlZCBjb25maWcgaXRlbSAgXG4gICAgICogQHBhcmFtIHtib29sZWFufSBub25PcHRpb24gLSBXaGV0aGVyIGl0IGlzIGFuIG9wdGlvbiBcbiAgICAgKi8gXG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgbmFtZSwgbm9uT3B0aW9uKSB7ICAgICBcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgJ0VfQ0xJX0lOVkFMSURfQVJHJywgeyBuYW1lLCBub25PcHRpb24gfSk7XG4gICAgfVxufVxuXG4vKipcbiAqIENvbW1hbmQgbGluZSBoZWxwZXIgb2JqZWN0LlxuICovXG5jbGFzcyBDb21tYW5kTGluZSB7XG4gICAgY29uc3RydWN0b3IoYXBwLCB1c2FnZSkge1xuICAgICAgICB0aGlzLmFwcCA9IGFwcDtcbiAgICAgICAgdGhpcy51c2FnZSA9IHVzYWdlO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5wYXJzZSh1c2FnZS5vcHRpb25zKTtcbiAgICB9XG5cbiAgICBpbmplY3RVc2FnZShpbmplY3RzKSB7XG4gICAgICAgIHRoaXMuaW5qZWN0cyA9IGluamVjdHM7XG4gICAgfVxuXG4gICAgcGFyc2Uob3B0aW9ucykgeyAgICAgICAgXG4gICAgICAgIGNvbnN0IG1pbmltaXN0ID0gdHJ5UmVxdWlyZSgnbWluaW1pc3QnKTtcbiAgICAgICAgdGhpcy5hcmd2ID0gbWluaW1pc3QoZ0FyZ3YsIHRyYW5zbGF0ZU1pbmltaXN0T3B0aW9ucyhvcHRpb25zKSk7XG4gICAgfVxuXG4gICAgb3B0aW9uKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXJndltuYW1lXTtcbiAgICB9XG5cbiAgICBhcmcobmFtZSkge1xuICAgICAgICBpZiAodGhpcy5hcmdzW25hbWVdKSByZXR1cm4gdGhpcy5hcmdzW25hbWVdO1xuXG4gICAgICAgIGxldCBpbmRleCA9IF8uZmluZEluZGV4KHRoaXMudXNhZ2UuYXJndW1lbnRzLCBhcmcgPT4gYXJnLm5hbWUgPT09IG5hbWUpO1xuXG4gICAgICAgIGlmIChpbmRleCA9PT0gLTEgfHwgdGhpcy5hcmd2Ll8ubGVuZ3RoIDw9IGluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5hcmdzIHx8ICh0aGlzLmFyZ3MgPSB7fSk7XG4gICAgICAgIHJldHVybiAodGhpcy5hcmdzW25hbWVdID0gdGhpcy5hcmd2Ll9baW5kZXhdKTtcbiAgICB9XG5cbiAgICB1cGRhdGVPcHRpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5hcmd2W25hbWVdID0gdmFsdWU7XG4gICAgICAgIGxldCBvcHRzID0gdGhpcy51c2FnZS5vcHRpb25zW25hbWVdO1xuICAgICAgICBpZiAob3B0cy5hbGlhcykge1xuICAgICAgICAgICAgXy5lYWNoKG9wdHMuYWxpYXMsIGEgPT4geyB0aGlzLmFyZ3ZbYV0gPSB2YWx1ZTsgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBpbnF1aXJlXygpIHtcbiAgICAgICAgY29uc3QgaW5xdWlyZXIgPSB0cnlSZXF1aXJlKCdpbnF1aXJlcicpO1xuXG4gICAgICAgIGNvbnN0IGRvSW5xdWlyZV8gPSAoaXRlbSwgYXJnSW5kZXgpID0+IGlucXVpcmVyLnByb21wdChbaXRlbV0pLnRoZW4oYW5zd2VycyA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygpO1xuXG4gICAgICAgICAgICBfLmZvck93bihhbnN3ZXJzLCAoYW5zLCBuYW1lKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmdJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVPcHRpb24obmFtZSwgYW5zKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnQ6IHRoaXMuYXJndi5fLmxlbmd0aCA9PT0gYXJnSW5kZXg7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcmd2Ll8gPSB0aGlzLmFyZ3YuXy5jb25jYXQoW2Fuc10pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pOyBcblxuICAgICAgICBjb25zdCBkb0ZpbHRlcl8gPSBhc3luYyAobmFtZSwgb3B0LCBhcmdJbmRleCkgPT4ge1xuICAgICAgICAgICAgaWYgKG9wdC5maWx0ZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFyZ0luZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoISh0eXBlb2Ygb3B0LmZpbHRlciAhPT0gJ2Z1bmN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ29uZmlndXJhdGlvbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgVGhlIFwiZmlsdGVyXCIgaW4gdGhlIGlucXVpcmVyIG9wdGlvbiBmb3IgYXJndW1lbnQgb3B0aW9uIFwiJHtuYW1lfVwiIHNob3VsZCBiZSBhIGZ1bmN0aW9uIWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYGNvbW1hbmRMaW5lLm9wdGlvbnNbJHtuYW1lfV0uZmlsdGVyYCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZU9wdGlvbihuYW1lLCBhd2FpdCBvcHQuZmlsdGVyKHRoaXMuYXJndltuYW1lXSwgdGhpcykpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHR5cGVvZiBvcHQuZmlsdGVyICE9PSAnZnVuY3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRDb25maWd1cmF0aW9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBUaGUgXCJmaWx0ZXJcIiBpbiB0aGUgaW5xdWlyZXIgb3B0aW9uIGZvciBhcmd1bWVudCB2YWx1ZSBcIiR7bmFtZX1cIiBhdCBwb3NpdGlvbiAke2FyZ0luZGV4fSBzaG91bGQgYmUgYSBmdW5jdGlvbiFgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBjb21tYW5kTGluZS5hcmd1bWVudHNbJHthcmdJbmRleH1dLmZpbHRlcmApO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcmd2Ll9bYXJnSW5kZXhdID0gYXdhaXQgb3B0LmZpbHRlcih0aGlzLmFyZ3YuX1thcmdJbmRleF0sIHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBhcmdFeGlzdCA9IChuYW1lLCBhcmdJbmRleCkgPT4gdHlwZW9mIGFyZ0luZGV4ID09PSAndW5kZWZpbmVkJyA/IChuYW1lIGluIHRoaXMuYXJndikgOiAodGhpcy5hcmd2Ll8ubGVuZ3RoID4gYXJnSW5kZXgpO1xuXG4gICAgICAgIGNvbnN0IHByZXBhcmVJbnF1aXJlXyA9IGFzeW5jIChvcHRzLCBuYW1lLCBhcmdJbmRleCkgPT4ge1xuICAgICAgICAgICAgbGV0IGFyZ0V4aXN0cyA9IGFyZ0V4aXN0KG5hbWUsIGFyZ0luZGV4KTtcblxuICAgICAgICAgICAgaWYgKCgnaW5xdWlyZScgaW4gb3B0cykgJiYgIWFyZ0V4aXN0cykgeyBcbiAgICAgICAgICAgICAgICAvL25lZWQgaW5xdWlyZSBhbmQgdGhlIHZhbHVlIG5vdCBnaXZlbiB0aHJvdWdoIGNvbW1hbmQgbGluZVxuICAgICAgICAgICAgICAgIGxldCBpbnF1aXJlID0gb3B0cy5pbnF1aXJlO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0cy5pbnF1aXJlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vaWYgaW5xdWlyZSBwcm9wZXJ0eSBpcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB3aGV0aGVyIHRvIGdvIHdpdGggaW5xdWlyZVxuICAgICAgICAgICAgICAgICAgICBpbnF1aXJlID0gYXdhaXQgb3B0cy5pbnF1aXJlKHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChpbnF1aXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCB0eXBlO1xuICAgICAgICAgICAgICAgICAgICBsZXQgcSA9IHsgbmFtZTogbmFtZSwgbWVzc2FnZTogb3B0cy5wcm9tcHRNZXNzYWdlIHx8IG9wdHMuZGVzYyB9O1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLnByb21wdFR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPSBvcHRzLnByb21wdFR5cGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2xpc3QnIHx8IHR5cGUgID09PSAncmF3TGlzdCcgfHwgdHlwZSA9PT0gJ2NoZWNrYm94JyB8fCB0eXBlID09PSAnZXhwYW5kJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb3B0cy5jaG9pY2VzUHJvdmlkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRDb25maWd1cmF0aW9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGFyZ0luZGV4ID09PSAndW5kZWZpbmVkJyA/IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBNaXNzaW5nIFwiY2hvaWNlc1Byb3ZpZGVyXCIgaW4gdGhlIGlucXVpcmVyIG9wdGlvbiBmb3IgYXJndW1lbnQgb3B0aW9uIFwiJHtuYW1lfVwiIWAgOiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgTWlzc2luZyBcImNob2ljZXNQcm92aWRlclwiIGluIHRoZSBpbnF1aXJlciBvcHRpb24gZm9yIGFyZ3VtZW50IHZhbHVlIFwiJHtuYW1lfVwiIGF0IHBvc3Rpb24gJHthcmdJbmRleH0hYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBhcmdJbmRleCA9PT0gJ3VuZGVmaW5lZCcgPyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgY29tbWFuZExpbmUub3B0aW9uc1ske25hbWV9XS5jaG9pY2VzUHJvdmlkZXJgIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgY29tbWFuZExpbmUuYXJndW1lbnRzWyR7YXJnSW5kZXh9XS5jaG9pY2VzUHJvdmlkZXJgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9wdHMuY2hvaWNlc1Byb3ZpZGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHEuY2hvaWNlcyA9IGF3YWl0IG9wdHMuY2hvaWNlc1Byb3ZpZGVyKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHEuY2hvaWNlcyA9IGF3YWl0IG9wdHMuY2hvaWNlc1Byb3ZpZGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0cy5ib29sKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlID0gJ2NvbmZpcm0nO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA9ICdpbnB1dCdcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHEudHlwZSA9IHR5cGU7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCdwcm9tcHREZWZhdWx0JyBpbiBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9wdHMucHJvbXB0RGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHEuZGVmYXVsdCA9IGF3YWl0IG9wdHMucHJvbXB0RGVmYXVsdCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcS5kZWZhdWx0ID0gb3B0cy5wcm9tcHREZWZhdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgZG9JbnF1aXJlXyhxLCBhcmdJbmRleCk7XG5cbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgZG9GaWx0ZXJfKG5hbWUsIG9wdHMsIGFyZ0luZGV4KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5hZnRlcklucXVpcmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IG9wdHMuYWZ0ZXJJbnF1aXJlKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFyZ0V4aXN0cykge1xuICAgICAgICAgICAgICAgIGF3YWl0IGRvRmlsdGVyXyhuYW1lLCBvcHRzLCBhcmdJbmRleCk7XG4gICAgICAgICAgICB9IFxuXG4gICAgICAgICAgICBpZiAodGhpcy51c2FnZS5zaG93QXJndW1lbnRzICYmIGFyZ0V4aXN0KG5hbWUsIGFyZ0luZGV4KSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJnSW5kZXggPT09ICd1bmRlZmluZWQnKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdvcHRpb24nLCBuYW1lLCBgKCR7b3B0cy5kZXNjfSlgLCAnOicsIHRoaXMuYXJndltuYW1lXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYDwke25hbWV9PmAsICc6JywgdGhpcy5hcmd2Ll9bYXJnSW5kZXhdKTtcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICghXy5pc0VtcHR5KHRoaXMudXNhZ2UuYXJndW1lbnRzKSkge1xuICAgICAgICAgICAgYXdhaXQgZWFjaEFzeW5jXyh0aGlzLnVzYWdlLmFyZ3VtZW50cywgYXN5bmMgKGFyZ09wdCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgeyBuYW1lLCAuLi5vcHRzIH0gPSBhcmdPcHQ7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcHJlcGFyZUlucXVpcmVfKG9wdHMsIG5hbWUsIGluZGV4KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gXy5pc0VtcHR5KHRoaXMudXNhZ2Uub3B0aW9ucykgfHwgZWFjaEFzeW5jXyh0aGlzLnVzYWdlLm9wdGlvbnMsIChvcHRzLCBuYW1lKSA9PiBwcmVwYXJlSW5xdWlyZV8ob3B0cywgbmFtZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHZhbGlkYXRlIHBhcnNlZCBhbmQgZmlsbGVkIGFyZ3VtZW50IG9wdGlvbnMuXG4gICAgICovXG4gICAgYXN5bmMgdmFsaWRhdGVfKCkge1xuICAgICAgICBjb25zdCBjaGVja1JlcXVpcmVfID0gYXN5bmMgKG9wdHMpID0+IHtcbiAgICAgICAgICAgIGxldCByZXF1aXJlZCA9IG9wdHMucmVxdWlyZWQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmVxdWlyZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICByZXF1aXJlZCA9IGF3YWl0IHJlcXVpcmVkKCk7XG4gICAgICAgICAgICB9IFxuXG4gICAgICAgICAgICByZXR1cm4gcmVxdWlyZWQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgbGV0IGVycm9ycyA9IFtdO1xuXG4gICAgICAgIGlmICghXy5pc0VtcHR5KHRoaXMudXNhZ2UuYXJndW1lbnRzKSkgeyAgICAgXG4gICAgICAgICAgICBsZXQgYXJnTnVtID0gdGhpcy5hcmd2Ll8ubGVuZ3RoO1xuXG4gICAgICAgICAgICBpZiAoYXJnTnVtIDwgdGhpcy51c2FnZS5hcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgbGV0IGFyZ3MgPSBbXTtcblxuICAgICAgICAgICAgICAgIGxldCBpID0gMDtcblxuICAgICAgICAgICAgICAgIGF3YWl0IGVhY2hBc3luY18odGhpcy51c2FnZS5hcmd1bWVudHMsIGFzeW5jIGFyZyA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCByZXF1aXJlZCA9IGF3YWl0IGNoZWNrUmVxdWlyZV8oYXJnKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAocmVxdWlyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpID49IGFyZ051bSkgeyAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbXNnID0gYE1pc3NpbmcgcmVxdWlyZWQgYXJndW1lbnQgXCIke2FyZy5uYW1lfVwiIWA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudXNhZ2Uuc2hvd1VzYWdlT25FcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChtc2cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7ICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBDb21tYW5kTGluZUFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtc2csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmcubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKHRoaXMuYXJndi5fW2krK10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5hcmd2Ll8gPSBhcmdzO1xuICAgICAgICAgICAgfSAgICAgICAgICAgIFxuICAgICAgICB9ICAgICAgICAgIFxuXG4gICAgICAgIGF3YWl0IGVhY2hBc3luY18odGhpcy51c2FnZS5vcHRpb25zLCBhc3luYyAob3B0cywgbmFtZSkgPT4ge1xuICAgICAgICAgICAgbGV0IHJlcXVpcmVkID0gYXdhaXQgY2hlY2tSZXF1aXJlXyhvcHRzKTtcblxuICAgICAgICAgICAgaWYgKHJlcXVpcmVkICYmICEobmFtZSBpbiB0aGlzLmFyZ3YpKSB7XG4gICAgICAgICAgICAgICAgbGV0IG1zZyA9IGBNaXNzaW5nIHJlcXVpcmVkIGFyZ3VtZW50IG9wdGlvbiBvZiBcIiR7bmFtZX1cIiFgO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudXNhZ2Uuc2hvd1VzYWdlT25FcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChtc2cpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBDb21tYW5kTGluZUFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICBtc2csXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChlcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5zaG93VXNhZ2Uoe1xuICAgICAgICAgICAgICAgIGFmdGVyQmFubmVyOiAoKSA9PiAnRXJyb3Iocyk6XFxuJyArIGVycm9ycy5tYXAobXNnID0+ICcgLSAnICsgbXNnKS5qb2luKCdcXG4nKSArICdcXG5cXG4nXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgZmlsbFNpbGVudE1vZGVEZWZhdWx0c18oKSB7XG4gICAgICAgIGF3YWl0IGVhY2hBc3luY18odGhpcy51c2FnZS5hcmd1bWVudHMsIGFzeW5jIChhcmcsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5hcmd2Ll8ubGVuZ3RoIDw9IGluZGV4KSB7XG4gICAgICAgICAgICAgICAgaWYgKGFyZy5oYXNPd25Qcm9wZXJ0eSgnc2lsZW50TW9kZURlZmF1bHQnKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5hcmd2Ll8ubGVuZ3RoOyBpIDwgaW5kZXg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcmd2Ll8ucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcmd2Ll8ucHVzaChhcmdbJ3NpbGVudE1vZGVEZWZhdWx0J10pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgYXdhaXQgZWFjaEFzeW5jXyh0aGlzLnVzYWdlLm9wdGlvbnMsIGFzeW5jIChvcHRzLCBuYW1lKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuYXJndi5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiBvcHRzLmhhc093blByb3BlcnR5KCdzaWxlbnRNb2RlRGVmYXVsdCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVPcHRpb24obmFtZSwgb3B0cy5zaWxlbnRNb2RlRGVmYXVsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldEJhbm5lcigpIHtcbiAgICAgICAgaWYgKHRoaXMudXNhZ2UuYmFubmVyKSB7XG4gICAgICAgICAgICBsZXQgYmFubmVyID0gJyc7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy51c2FnZS5iYW5uZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBiYW5uZXIgKz0gdGhpcy51c2FnZS5iYW5uZXIodGhpcyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLnVzYWdlLmJhbm5lciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBiYW5uZXIgKz0gdGhpcy51c2FnZS5iYW5uZXI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ29uZmlndXJhdGlvbihcbiAgICAgICAgICAgICAgICAgICAgJ0ludmFsaWQgYmFubmVyIHZhbHVlIG9mIGNvbW1hbmRMaW5lIGZlYXR1cmUuJyxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHAsXG4gICAgICAgICAgICAgICAgICAgIGBjb21tYW5kTGluZS5iYW5uZXJgXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGJhbm5lciArPSAnXFxuJztcblxuICAgICAgICAgICAgcmV0dXJuIGJhbm5lcjtcbiAgICAgICAgfSAgICAgICAgXG5cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBnZXRVc2FnZShpbmplY3RzKSB7XG4gICAgICAgIGluamVjdHMgPSB7IC4uLnRoaXMuaW5qZWN0cywgLi4uaW5qZWN0cyB9O1xuXG4gICAgICAgIGxldCB1c2FnZSA9ICcnO1xuXG4gICAgICAgIGxldCBiYW5uZXIgPSAhdGhpcy5iYW5uZXJTaG93biAmJiB0aGlzLmdldEJhbm5lcigpO1xuICAgICAgICBpZiAoYmFubmVyKSB7XG4gICAgICAgICAgICB1c2FnZSArPSBiYW5uZXIgKyAnXFxuJztcbiAgICAgICAgfSAgICAgICAgXG4gICAgXG4gICAgICAgIGlmIChpbmplY3RzICYmIGluamVjdHMuYWZ0ZXJCYW5uZXIpIHtcbiAgICAgICAgICAgIHVzYWdlICs9IGluamVjdHMuYWZ0ZXJCYW5uZXIoKTtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBsZXQgZm10QXJncyA9ICcnO1xuICAgICAgICBpZiAoIV8uaXNFbXB0eSh0aGlzLnVzYWdlLmFyZ3VtZW50cykpIHtcbiAgICAgICAgICAgIGZtdEFyZ3MgPSAnICcgKyB0aGlzLnVzYWdlLmFyZ3VtZW50cy5tYXAoYXJnID0+IGFyZy5yZXF1aXJlZCA/IGA8JHthcmcubmFtZX0+YCA6IGBbJHthcmcubmFtZX1dYCkuam9pbignICcpO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIHVzYWdlICs9IGBVc2FnZTogJHt0aGlzLnVzYWdlLnByb2dyYW0gfHwgcGF0aC5iYXNlbmFtZShwcm9jZXNzLmFyZ3ZbMV0pfSR7Zm10QXJnc30gW29wdGlvbnNdXFxuXFxuYDtcbiAgICBcbiAgICAgICAgaWYgKGluamVjdHMgJiYgaW5qZWN0cy5hZnRlckNvbW1hbmRMaW5lKSB7XG4gICAgICAgICAgICB1c2FnZSArPSBpbmplY3RzLmFmdGVyQ29tbWFuZExpbmUoKTtcbiAgICAgICAgfSBcbiAgICAgICAgXG4gICAgICAgIGlmICghXy5pc0VtcHR5KHRoaXMudXNhZ2Uub3B0aW9ucykpIHtcbiAgICAgICAgICAgIHVzYWdlICs9IGBPcHRpb25zOlxcbmA7XG4gICAgICAgICAgICBfLmZvck93bih0aGlzLnVzYWdlLm9wdGlvbnMsIChvcHRzLCBuYW1lKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGxpbmUgPSAnICAnICsgb3B0aW9uRGVjb3JhdG9yKG5hbWUpO1xuICAgICAgICAgICAgICAgIGlmIChvcHRzLmFsaWFzKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpbmUgKz0gXy5yZWR1Y2Uob3B0cy5hbGlhcywgKHN1bSwgYSkgPT4gKHN1bSArICcsICcgKyBvcHRpb25EZWNvcmF0b3IoYSkpLCAnJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIGxpbmUgKz0gJ1xcbic7XG4gICAgICAgICAgICAgICAgbGluZSArPSAnICAgICcgKyBvcHRzLmRlc2MgKyAnXFxuJztcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoJ2RlZmF1bHQnIGluIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgbGluZSArPSAnICAgIGRlZmF1bHQ6ICcgKyBvcHRzLmRlZmF1bHQudG9TdHJpbmcoKSArICdcXG4nO1xuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICBpZiAob3B0cy5yZXF1aXJlZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9wdHMucmVxdWlyZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUgKz0gJyAgICBjb25kaXRpb25hbFxcbic7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lICs9ICcgICAgcmVxdWlyZWRcXG4nO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKG9wdHMuY2hvaWNlc1Byb3ZpZGVyICYmIEFycmF5LmlzQXJyYXkob3B0cy5jaG9pY2VzUHJvdmlkZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpbmUgKz0gJyAgICBhdmFpbGFibGUgdmFsdWVzOlxcbic7XG4gICAgICAgICAgICAgICAgICAgIG9wdHMuY2hvaWNlc1Byb3ZpZGVyLmZvckVhY2goY2hvaWNlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUgKz0gYCAgICAgICAgXCIke2Nob2ljZS52YWx1ZX1cIjogJHtjaG9pY2UubmFtZX1cXG5gO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgbGluZSArPSAnXFxuJztcbiAgICBcbiAgICAgICAgICAgICAgICB1c2FnZSArPSBsaW5lO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gICAgICAgIFxuICAgIFxuICAgICAgICBpZiAoaW5qZWN0cyAmJiBpbmplY3RzLmFmdGVyT3B0aW9ucykge1xuICAgICAgICAgICAgdXNhZ2UgKz0gaW5qZWN0cy5hZnRlck9wdGlvbnMoKTtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICByZXR1cm4gdXNhZ2U7XG4gICAgfVxuXG4gICAgc2hvd0Jhbm5hcigpIHtcbiAgICAgICAgbGV0IGJhbm5lciA9IHRoaXMuZ2V0QmFubmVyKCk7XG4gICAgICAgIGlmIChiYW5uZXIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGJhbm5lcik7XG4gICAgICAgICAgICB0aGlzLmJhbm5lclNob3duID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBzaG93VXNhZ2UoaW5qZWN0cykge1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmdldFVzYWdlKGluamVjdHMpKTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIC8qKlxuICAgICAqIFRoaXMgZmVhdHVyZSBpcyBsb2FkZWQgYXQgY29uZmlndXJhdGlvbiBzdGFnZVxuICAgICAqIEBtZW1iZXIge3N0cmluZ31cbiAgICAgKi9cbiAgICB0eXBlOiBGZWF0dXJlLklOSVQsXG5cbiAgICAvKipcbiAgICAgKiBMb2FkIHRoZSBmZWF0dXJlXG4gICAgICogQHBhcmFtIHtBcHB9IGFwcCAtIFRoZSBjbGkgYXBwIG1vZHVsZSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gdXNhZ2VPcHRpb25zIC0gT3B0aW9ucyBmb3IgdGhlIGZlYXR1cmUgICAgIFxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbdXNhZ2VPcHRpb25zLmJhbm5lcl0gLSBCYW5uZXIgbWVzc2FnZSBvciBiYW5uZXIgZ2VuZXJhdG9yIGZ1bmN0aW9uXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFt1c2FnZU9wdGlvbnMucHJvZ3JhbV0gLSBFeGVjdXRhYmxlIG5hbWVcbiAgICAgKiBAcHJvcGVydHkge2FycmF5fSBbdXNhZ2VPcHRpb25zLmFyZ3VtZW50c10gLSBDb21tYW5kIGxpbmUgYXJndW1lbnRzLCBpZGVudGlmaWVkIGJ5IHRoZSBwb3NpdGlvbiBvZiBhcHBlYXJhbmNlXG4gICAgICogQHByb3BlcnR5IHtvYmplY3R9IFt1c2FnZU9wdGlvbnMub3B0aW9uc10gLSBDb21tYW5kIGxpbmUgb3B0aW9ucyAgICAgXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufGZ1bmN0aW9ufSBbdXNhZ2VPcHRpb25zLnNpbGVudE1vZGVdIC0gV2hldGhlciB0byBydW4gaW4gc2lsaWVudCBtb2RlLCBkZWZhdWx0IGZhbHNlXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufGZ1bmN0aW9ufSBbdXNhZ2VPcHRpb25zLm5vblZhbGlkYXRpb25Nb2RlXSAtIFdoZXRoZXIgdG8gcnVuIHZhbGlkYXRpb25cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW3VzYWdlT3B0aW9ucy5oZWxwT3B0aW9uPSc/J10gLSBUaGUgb3B0aW9uIHdoaWNoIGFjdCBhcyBoZWxwXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbdXNhZ2VPcHRpb25zLnNob3dVc2FnZU9uRXJyb3JdXG4gICAgICogXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAgIG9wdGlvbnM6IHsgW2FyZ3VtZW50S2V5XToge1xuICAgICAqICAgICAgZGVzYywgLy8ge3N0cmluZ30gLSBkZXNjcmlwdGlvblxuICAgICAqICAgICAgYWxpYXMsIC8vIHthcnJheS48c3RyaW5nPn0gLSBhbGlhcyBhcnJheVxuICAgICAqICAgICAgYm9vbCwgLy8ge2Jvb2xlYW59IC0gd2hldGhlciBpdCBpcyBhIGJvb2xlYW4gdmFsdWVcbiAgICAgKiAgICAgIGRlZmF1bHQsIC8vIHsqfSAtIGRlZmF1bHQgdmFsdWVcbiAgICAgKiAgICAgIGlucXVpcmUsIC8vIHtib29sZWFuIHwgZnVuY3Rpb24oY2xpKS48Ym9vbGVhbj59IC0gd2hldGhlciB0byBlbmFibGUgaW50ZXJhY3RpdmUgcXVlcnlcbiAgICAgKiAgICAgIHByb21wdE1lc3NhZ2UsIC8vIHtzdHJpbmd9IC0gcHJvbXB0IG1lc3NhZ2UgZm9yIHF1ZXJ5LCB3aWxsIHVzZSBkZXNjIGlmIG5vdCBzZXRcbiAgICAgKiAgICAgIHByb21wdFR5cGUsIC8vIHtzdHJpbmd9IC0gcHJvbXB0IHR5cGUsIGNhbiBiZSBvbmUgb2YgWyBpbnB1dCwgbnVtYmVyLCBjb25maXJtLCBsaXN0LCByYXdsaXN0LCBleHBhbmQsIGNoZWNrYm94LCBwYXNzd29yZCwgZWRpdG9yIF1cbiAgICAgKiAgICAgIHByb21wdERlZmF1bHQsIC8vIHsqIHwgZnVuY3Rpb24oY2xpKS48Kj59IC0gZGVmYXVsdCB2YWx1ZSBhcHBlYXJlZCBvbiBxdWVyeSBvciBhIGFzeW5jIGZ1bmN0aW9uIHRvIHJldHVybiB0aGUgZGVmYXVsdCB2YWx1ZVxuICAgICAqICAgICAgY2hvaWNlc1Byb3ZpZGVyLCAvLyB7YXJyYXkgfCBmdW5jdGlvbihjbGkpLjxhcnJheT4gfCBmdW5jdGlvbi48ZnVuY3Rpb24oc3RyaW5nKS48YXJyYXk+Pn0gLSByZXF1aXJlZCBmb3IgcHJvbXB0IHR5cGUgbGlzdCwgcmF3bGlzdCwgZXhwYW5kLCBjaGVja2JveFxuICAgICAqICAgICAgZmlsdGVyLCAvLyB7ZnVuY3Rpb24oYXJndiwgY2xpKS48YXJndj59IC0gZmlsdGVyIHRvIHByb2Nlc3MgdGhlIGFyZ3VtZW50IHZhbHVlXG4gICAgICogICAgICBhZnRlcklucXVpcmUgLy8ge2Z1bmN0aW9ufSAtIGFmdGVyIGlucXVpcmUgaG9va1xuICAgICAqICAgfSB9XG4gICAgICogXG4gICAgICogQHJldHVybnMge1Byb21pc2UuPCo+fVxuICAgICAqL1xuICAgIGxvYWRfOiBhc3luYyAoYXBwLCB1c2FnZU9wdGlvbnMpID0+IHsgICBcbiAgICAgICAgYXBwLmNvbW1hbmRMaW5lID0gbmV3IENvbW1hbmRMaW5lKGFwcCwgdXNhZ2VPcHRpb25zKTsgICAgICAgICAgICAgXG5cbiAgICAgICAgbGV0IHNpbGVudE1vZGUgPSB1c2FnZU9wdGlvbnMuc2lsZW50TW9kZTtcblxuICAgICAgICBpZiAoc2lsZW50TW9kZSAmJiB0eXBlb2Ygc2lsZW50TW9kZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgc2lsZW50TW9kZSA9IHNpbGVudE1vZGUoYXBwLmNvbW1hbmRMaW5lKTtcbiAgICAgICAgfSAgXG5cbiAgICAgICAgYXBwLmNvbW1hbmRMaW5lLnNpbGVudE1vZGUgPSBzaWxlbnRNb2RlO1xuXG4gICAgICAgIGlmIChzaWxlbnRNb2RlKSB7XG4gICAgICAgICAgICBhd2FpdCBhcHAuY29tbWFuZExpbmUuZmlsbFNpbGVudE1vZGVEZWZhdWx0c18oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFwcC5jb21tYW5kTGluZS5zaG93QmFubmFyKCk7XG4gICAgICAgICAgICBhd2FpdCBhcHAuY29tbWFuZExpbmUuaW5xdWlyZV8oKTsgICAgICAgICAgICBcbiAgICAgICAgfSAgICAgICAgXG5cbiAgICAgICAgbGV0IG5vblZhbGlkYXRpb25Nb2RlID0gdXNhZ2VPcHRpb25zLm5vblZhbGlkYXRpb25Nb2RlO1xuXG4gICAgICAgIGlmIChub25WYWxpZGF0aW9uTW9kZSAmJiB0eXBlb2Ygbm9uVmFsaWRhdGlvbk1vZGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIG5vblZhbGlkYXRpb25Nb2RlID0gbm9uVmFsaWRhdGlvbk1vZGUoYXBwLmNvbW1hbmRMaW5lKTtcbiAgICAgICAgfSAgXG5cbiAgICAgICAgYXBwLmNvbW1hbmRMaW5lLm5vblZhbGlkYXRpb25Nb2RlID0gbm9uVmFsaWRhdGlvbk1vZGU7XG5cbiAgICAgICAgaWYgKCFub25WYWxpZGF0aW9uTW9kZSkge1xuICAgICAgICAgICAgYXdhaXQgYXBwLmNvbW1hbmRMaW5lLnZhbGlkYXRlXygpO1xuICAgICAgICB9XG4gICAgfVxufTsiXX0=