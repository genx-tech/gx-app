{"version":3,"sources":["../../src/features/libModules.js"],"names":["path","require","_","eachAsync_","fs","Feature","InvalidConfiguration","module","exports","type","PLUGIN","load_","server","entries","LibModule","tryRequire","config","name","options","Object","assign","env","logWithAppName","appPath","npmModule","toAbsolutePath","appModulesPath","join","exists","pathExists","stat","isDirectory","lib","on","isEmpty","settings","log","relativePath","relative","workingPath","start_","registerLib"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/**\n * Load lib modules\n * @module Feature_LibModules\n *\n * @example\n *\n *  'libModules': {\n *      '<name>': {\n *          npmModule: false, // whether is a npm module\n *          options: { // module options\n *          },\n *          settings: { // can override module defined settings\n *          }\n *      }\n *  }\n */\n\nconst path = require(\"path\");\nconst { _, eachAsync_ } = require(\"@genx/july\");\nconst { fs } = require(\"@genx/sys\");\nconst Feature = require(\"../enum/Feature\");\nconst { InvalidConfiguration } = require(\"@genx/error\");\n\nmodule.exports = {\n    /**\n     * This feature is loaded at plugin stage.\n     * @member {string}\n     */\n    type: Feature.PLUGIN,\n\n    /**\n     * Load the feature.\n     * @param {WebServer} server - The web server module object.\n     * @param {object} entries - Lib module entries.\n     * @returns {Promise.<*>}\n     */\n    load_: async (server, entries) => {\n        const { LibModule } = server.tryRequire('@genx/server');\n\n        return eachAsync_(entries, async (config, name) => {\n            let options = Object.assign(\n                {\n                    env: server.env,\n                    logWithAppName: server.options.logWithAppName,\n                },\n                config.options\n            );\n\n            let appPath;\n\n            if (config.npmModule) {\n                appPath = server.toAbsolutePath(\"node_modules\", name);\n            } else {\n                const appModulesPath = server.appModulesPath || server.toAbsolutePath(server.options.appModulesPath);                \n                appPath = path.join(appModulesPath, name);\n            }\n\n            let exists = (await fs.pathExists(appPath)) && (await fs.stat(appPath)).isDirectory();\n            if (!exists) {\n                throw new InvalidConfiguration(`Lib [${name}] not exists.`, server, `libModules.${name}`);\n            }\n\n            let lib = new LibModule(server, name, appPath, options);\n\n            lib.on(\"configLoaded\", () => {\n                if (!_.isEmpty(config.settings)) {\n                    lib.config.settings = Object.assign({}, lib.config.settings, config.settings);\n                    server.log(\"verbose\", `Lib settings of [${lib.name}] is overrided.`);\n                }\n            });\n\n            let relativePath = path.relative(server.workingPath, appPath);\n            server.log(\"verbose\", `Loading lib [${lib.name}] from \"${relativePath}\" ...`);\n\n            await lib.start_();\n\n            server.registerLib(lib);\n\n            server.log(\"verbose\", `Lib [${lib.name}] is loaded.`);\n        });\n    },\n};\n"],"file":"libModules.js"}