"use strict";

require("source-map-support/register");

const {
  _
} = require('rk-utils');

const Feature = require('../enum/Feature');

const {
  tryRequire
} = require('../utils/Helpers');

const AllowedMethods = {
  'get': 'get',
  'post': 'post',
  'put': 'put',
  'del': 'del',
  'delete': 'del',
  'upload': 'post',
  'download': 'get'
};

class RestClient {
  constructor(endpoint, onSendHandler) {
    this.agent = tryRequire('superagent');
    this.endpoint = endpoint.endsWith('/') ? endpoint : endpoint + '/';
    this.onSendHandler = onSendHandler;
  }

  async _sendRequest_(req, streamMode) {
    if (this.onSendHandler) {
      this.onSendHandler(req);
    }

    if (streamMode) return req;

    try {
      let res = await req;
      return res.type === 'text/plain' ? res.text : res.body || res.text;
    } catch (error) {
      if (this.onErrorHandler) {
        let stopProcess = await this.onErrorHandler(error);

        if (stopProcess) {
          return undefined;
        }
      }

      if (error.response) {
        let {
          status,
          body,
          text
        } = error.response;
        let message = body && body.error || error.response.error && error.response.error.message || text;
        error.message = message;
        error.status = status;
      }

      throw error;
    }
  }

  async call_(method, path, query, body, streamMode) {
    method = method.toLowerCase();
    let httpMethod = AllowedMethods[method];

    if (!httpMethod) {
      throw new Error('Invalid method: ' + method);
    }

    if (path[0] === '/') {
      path = path.substr(1);
    }

    let req = this.agent[httpMethod](this.endpoint + path);

    if (query) {
      req.query(query);
    }

    if (method === 'download') {
      req.responseType('blob');
    } else if (method === 'upload') {
      req.attach("file", body);
    } else if (body) {
      req.send(body);
    }

    return this._sendRequest_(req, streamMode);
  }

  async getOne_(resource, id, query) {
    return this.call_('get', encodeURIComponent(resource) + '/' + encodeURIComponent(id), query);
  }

  async getList_(resource, query) {
    return this.call_('get', encodeURIComponent(resource), query);
  }

  async create_(resource, data) {
    return this.call_('post', encodeURIComponent(resource), null, data);
  }

  async updateAny_(resource, where, data) {
    return this.call_('put', encodeURIComponent(resource), where, data);
  }

  async updateOne_(resource, id, data) {
    return this.call_('put', encodeURIComponent(resource) + '/' + encodeURIComponent(id), null, data);
  }

  async removeOne_(resource, id) {
    return this.call_('del', encodeURIComponent(resource) + '/' + encodeURIComponent(id));
  }

  async removeAny_(resource, where) {
    return this.call_('del', encodeURIComponent(resource), where);
  }

}

module.exports = {
  type: Feature.SERVICE,
  load_: async function (app, settings) {
    _.map(settings, (endpoint, name) => {
      let client = new RestClient(endpoint);
      app.registerService(`restClient.${name}`, client);
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,