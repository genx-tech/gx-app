"use strict";

require("source-map-support/register");

const {
  _
} = require("@genx/july");

const URL = require('url');

const {
  RestClient
} = require('./restClient');

const Feature = require("../enum/Feature");

const {
  ensureFeatureName
} = require("../utils/Helpers");

class RestTestClient extends RestClient {
  constructor(app, endpoint, onSend, onError, onSent) {
    super(endpoint, onSend, onError, onSent);
    this.agent = app.tryRequire("supertest");
  }

  initReq(httpMethod, url) {
    const urlObj = URL.parse(url);
    const testUrl = urlObj.path;

    if (urlObj.hash) {
      testUrl += "#" + urlObj.hash;
    }

    if (!this.server) {
      throw new Error('"server" is required before sending test request.');
    }

    return this.agent(this.server)[httpMethod](testUrl);
  }

}

module.exports = {
  type: Feature.SERVICE,
  groupable: true,
  load_: async function (app, settings, name) {
    ensureFeatureName(name);
    let client = new RestTestClient(app, settings);
    app.registerService(name, client);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWF0dXJlcy9zdXBlclRlc3QuanMiXSwibmFtZXMiOlsiXyIsInJlcXVpcmUiLCJVUkwiLCJSZXN0Q2xpZW50IiwiRmVhdHVyZSIsImVuc3VyZUZlYXR1cmVOYW1lIiwiUmVzdFRlc3RDbGllbnQiLCJjb25zdHJ1Y3RvciIsImFwcCIsImVuZHBvaW50Iiwib25TZW5kIiwib25FcnJvciIsIm9uU2VudCIsImFnZW50IiwidHJ5UmVxdWlyZSIsImluaXRSZXEiLCJodHRwTWV0aG9kIiwidXJsIiwidXJsT2JqIiwicGFyc2UiLCJ0ZXN0VXJsIiwicGF0aCIsImhhc2giLCJzZXJ2ZXIiLCJFcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0eXBlIiwiU0VSVklDRSIsImdyb3VwYWJsZSIsImxvYWRfIiwic2V0dGluZ3MiLCJuYW1lIiwiY2xpZW50IiwicmVnaXN0ZXJTZXJ2aWNlIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTTtBQUFFQSxFQUFBQTtBQUFGLElBQVFDLE9BQU8sQ0FBQyxZQUFELENBQXJCOztBQUNBLE1BQU1DLEdBQUcsR0FBR0QsT0FBTyxDQUFDLEtBQUQsQ0FBbkI7O0FBRUEsTUFBTTtBQUFFRSxFQUFBQTtBQUFGLElBQWlCRixPQUFPLENBQUMsY0FBRCxDQUE5Qjs7QUFDQSxNQUFNRyxPQUFPLEdBQUdILE9BQU8sQ0FBQyxpQkFBRCxDQUF2Qjs7QUFDQSxNQUFNO0FBQUVJLEVBQUFBO0FBQUYsSUFBd0JKLE9BQU8sQ0FBQyxrQkFBRCxDQUFyQzs7QUFXQSxNQUFNSyxjQUFOLFNBQTZCSCxVQUE3QixDQUF3QztBQU9wQ0ksRUFBQUEsV0FBVyxDQUFDQyxHQUFELEVBQU1DLFFBQU4sRUFBZ0JDLE1BQWhCLEVBQXdCQyxPQUF4QixFQUFpQ0MsTUFBakMsRUFBeUM7QUFDaEQsVUFBTUgsUUFBTixFQUFnQkMsTUFBaEIsRUFBd0JDLE9BQXhCLEVBQWlDQyxNQUFqQztBQUNBLFNBQUtDLEtBQUwsR0FBYUwsR0FBRyxDQUFDTSxVQUFKLENBQWUsV0FBZixDQUFiO0FBQ0g7O0FBT0RDLEVBQUFBLE9BQU8sQ0FBQ0MsVUFBRCxFQUFhQyxHQUFiLEVBQWtCO0FBQ3JCLFVBQU1DLE1BQU0sR0FBR2hCLEdBQUcsQ0FBQ2lCLEtBQUosQ0FBVUYsR0FBVixDQUFmO0FBRUEsVUFBTUcsT0FBTyxHQUFHRixNQUFNLENBQUNHLElBQXZCOztBQUNBLFFBQUlILE1BQU0sQ0FBQ0ksSUFBWCxFQUFpQjtBQUNiRixNQUFBQSxPQUFPLElBQUksTUFBTUYsTUFBTSxDQUFDSSxJQUF4QjtBQUNIOztBQUVELFFBQUksQ0FBQyxLQUFLQyxNQUFWLEVBQWtCO0FBQ2QsWUFBTSxJQUFJQyxLQUFKLENBQVUsbURBQVYsQ0FBTjtBQUNIOztBQUVELFdBQU8sS0FBS1gsS0FBTCxDQUFXLEtBQUtVLE1BQWhCLEVBQXdCUCxVQUF4QixFQUFvQ0ksT0FBcEMsQ0FBUDtBQUNIOztBQTlCbUM7O0FBaUN4Q0ssTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBS2JDLEVBQUFBLElBQUksRUFBRXZCLE9BQU8sQ0FBQ3dCLE9BTEQ7QUFXYkMsRUFBQUEsU0FBUyxFQUFFLElBWEU7QUFtQmJDLEVBQUFBLEtBQUssRUFBRSxnQkFBZ0J0QixHQUFoQixFQUFxQnVCLFFBQXJCLEVBQStCQyxJQUEvQixFQUFxQztBQUN4QzNCLElBQUFBLGlCQUFpQixDQUFDMkIsSUFBRCxDQUFqQjtBQUVBLFFBQUlDLE1BQU0sR0FBRyxJQUFJM0IsY0FBSixDQUFtQkUsR0FBbkIsRUFBd0J1QixRQUF4QixDQUFiO0FBRUF2QixJQUFBQSxHQUFHLENBQUMwQixlQUFKLENBQW9CRixJQUFwQixFQUEwQkMsTUFBMUI7QUFDSDtBQXpCWSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgXyB9ID0gcmVxdWlyZShcIkBnZW54L2p1bHlcIik7XG5jb25zdCBVUkwgPSByZXF1aXJlKCd1cmwnKTtcblxuY29uc3QgeyBSZXN0Q2xpZW50IH0gPSByZXF1aXJlKCcuL3Jlc3RDbGllbnQnKTtcbmNvbnN0IEZlYXR1cmUgPSByZXF1aXJlKFwiLi4vZW51bS9GZWF0dXJlXCIpO1xuY29uc3QgeyBlbnN1cmVGZWF0dXJlTmFtZSB9ID0gcmVxdWlyZShcIi4uL3V0aWxzL0hlbHBlcnNcIik7XG5cbi8qKlxuICogRW5hYmxlIGEgbmFtZWQgc3VwZXIgcmVzdCBjbGllbnQsIGZvciBjb2RlIGNvdmVyYWdlIHRlc3Qgb25seS5cbiAqIEBtb2R1bGUgRmVhdHVyZV9TdXBlclRlc3RcbiAqL1xuXG4vKipcbiAqIFJFU1RmdWwgdGVzdCBjbGllbnQuXG4gKiBAY2xhc3NcbiAqL1xuY2xhc3MgUmVzdFRlc3RDbGllbnQgZXh0ZW5kcyBSZXN0Q2xpZW50IHtcbiAgICAvKiogICAgIFxuICAgICAqIEBwYXJhbSB7Kn0gZW5kcG9pbnQgXG4gICAgICogQHBhcmFtIHsqfSBvblNlbmQgXG4gICAgICogQHBhcmFtIHsqfSBvbkVycm9yIFxuICAgICAqIEBwYXJhbSB7Kn0gb25TZW50IFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGFwcCwgZW5kcG9pbnQsIG9uU2VuZCwgb25FcnJvciwgb25TZW50KSB7XG4gICAgICAgIHN1cGVyKGVuZHBvaW50LCBvblNlbmQsIG9uRXJyb3IsIG9uU2VudCk7ICAgXG4gICAgICAgIHRoaXMuYWdlbnQgPSBhcHAudHJ5UmVxdWlyZShcInN1cGVydGVzdFwiKTsgICAgIFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlIHRoZSBkZWZhdWx0IGluaXRSZXEgbWV0aG9kIG9mIFJlc3RDbGllbnQuXG4gICAgICogQHBhcmFtIHsqfSBodHRwTWV0aG9kIFxuICAgICAqIEBwYXJhbSB7Kn0gdXJsIFxuICAgICAqL1xuICAgIGluaXRSZXEoaHR0cE1ldGhvZCwgdXJsKSB7XG4gICAgICAgIGNvbnN0IHVybE9iaiA9IFVSTC5wYXJzZSh1cmwpO1xuXG4gICAgICAgIGNvbnN0IHRlc3RVcmwgPSB1cmxPYmoucGF0aDtcbiAgICAgICAgaWYgKHVybE9iai5oYXNoKSB7XG4gICAgICAgICAgICB0ZXN0VXJsICs9IFwiI1wiICsgdXJsT2JqLmhhc2g7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuc2VydmVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wic2VydmVyXCIgaXMgcmVxdWlyZWQgYmVmb3JlIHNlbmRpbmcgdGVzdCByZXF1ZXN0LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuYWdlbnQodGhpcy5zZXJ2ZXIpW2h0dHBNZXRob2RdKHRlc3RVcmwpO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgLyoqXG4gICAgICogVGhpcyBmZWF0dXJlIGlzIGxvYWRlZCBhdCBpbml0IHN0YWdlXG4gICAgICogQG1lbWJlciB7c3RyaW5nfVxuICAgICAqL1xuICAgIHR5cGU6IEZlYXR1cmUuU0VSVklDRSxcblxuICAgIC8qKlxuICAgICAqIFRoaXMgZmVhdHVyZSBjYW4gYmUgZ3JvdXBlZCBieSBzZXJ2aWNlR3JvdXBcbiAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAqL1xuICAgIGdyb3VwYWJsZTogdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIExvYWQgdGhlIGZlYXR1cmVcbiAgICAgKiBAcGFyYW0ge0FwcH0gYXBwIC0gVGhlIGNsaSBhcHAgbW9kdWxlIG9iamVjdFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBzZXR0aW5ncyAtIFNldHRpbmdzIG9mIHJlc3QgY2xpZW50c1xuICAgICAqIEByZXR1cm5zIHtQcm9taXNlLjwqPn1cbiAgICAgKi9cbiAgICBsb2FkXzogYXN5bmMgZnVuY3Rpb24gKGFwcCwgc2V0dGluZ3MsIG5hbWUpIHtcbiAgICAgICAgZW5zdXJlRmVhdHVyZU5hbWUobmFtZSk7XG4gICAgICAgIFxuICAgICAgICBsZXQgY2xpZW50ID0gbmV3IFJlc3RUZXN0Q2xpZW50KGFwcCwgc2V0dGluZ3MpO1xuXG4gICAgICAgIGFwcC5yZWdpc3RlclNlcnZpY2UobmFtZSwgY2xpZW50KTtcbiAgICB9LFxufTtcbiJdfQ==